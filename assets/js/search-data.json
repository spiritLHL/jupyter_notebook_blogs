{
  
    
        "post0": {
            "title": "小额贷款的划算问题(matlab数学建模)",
            "content": "学校要求的参赛论文，顺手发上博客了，有错漏欢迎在评论区留言。 . 小额贷款的划算问题 . 摘要 . 为解决小额贷款对借贷者是否划算的问题，本文由相关金融理论基础入手，分析四还款方式：等额本金还款法、等额本息还款法、等本等息还款法、先息后本还款法。以此为切入点构造简单的模型，对借贷者的还款行为进行模拟。 . 针对问题一，根据金融理论基础，参考文献[2]，建模预测出该公司在四种还款方式下一年后实际需要还款款项及每期还款金额，比对出还款方式为等额本金还款法时对该广告公司最划算。同时，我还分析了不同还款方法下实际可能带来的危害。 . 针对问题二，参照《中华人民共和国民法典》[8]对各银行贷款利息和现有的合法小额贷款产品的规定，由问题一的模型，对比出对贷款公司的收益最大的还款方式。同时根据各种同类型产品的实际数据，设计出一款合法且有市场竞争力的小额贷款产品。 . 针对问题三，根据对问题一和问题二的探讨研究，以及相关政府政策，推测疫情期间小额贷款对于小微企业及个体商户有很大吸引力，各大银行的小额贷款比民间借贷的优惠更多，民间小额贷款产品的竞争力下降。 . 关键词 等额本金还款法、等额本息还款法、等本等息还款法、先息后本还款法、民法典 . 1 问题重述 . 1.1 问题背景 . 我国小额贷款公司的快速发展始于2008年《指导意见》颁布之后，银监会和中国人民银行虽然还没有正式确立小额贷款公司的金融机构地位（法律地位仍然属于工商企业），但也对小额贷款公司的合法地位给予肯定态度。[1]《指导意见》将小额贷款公司定义为，以面向个体工商户、小微型企业和“三农”发放小额、短期、分散、灵活贷款为主营业务、引导资金流向农村和欠发达地区，改善金融服务，不吸收公众存款的有限责任公司或股份有限公司。其具体相关细则的设置以《指导意见》为基础，各地区根据实际经济发展情况制定具体标准。 . 1.2 相关信息 . 等额本金还款法是指还款期内，把贷款总额等分，每月还相同数额的本金和剩余贷款在该月产生的利息。特点是每月还款金额递减（每月还款本金固定，利息越来越少），借款人起初还款金额较大，越往后每月还款金额越少。 . 等额本息还款法是指还款期内，把本金总额与利息总额相加，然后平均分摊到还款期内的每个月中。特点是每个月的还款金额固定，每月还款中的本金比重逐月递增，利息比重逐月递减。 . 等本等息还款法是指在还款期内，月还款总额不变，月还款本金不变，月还款利息不变。 . 先息后本还款法是指在还款期内，每月先偿还利息，到期后归还本金 . 1.3 需解决的问题 . 本文将问题述问题归结为以下三个部分，建立数学模型进行分析研究。 . 问题一：还款预测 . 原有某公司广告产品，借款1万，日息万分之三，收集相关资料，建模说明一年后实际需要还款多少和实际可能带来的危害。 . 问题二：设计小额贷款产品 . 按照民法典规定允许，比较各银行贷款利息和现有的合法小额贷款产品，为某贷款公司设计一款合法的小额贷款产品，使该产品在市场中具有较强竞争力。 . 问题三：总结小额贷款的实况 . 综合建模信息与相关资料，说明小额贷款的真实情况 . 2 问题分析 . 2.1 问题一 . 分析问题一，建立还款金额的数学模型，首先分析还款利息中的计算方式，以确定还款的确定方式。计算每月还款金额，根据四种不同还款方式分别计算每月还款利息以及本金，最后计算出借款人每月所需要还款的金额。再利用四种不同还款方式的每月还款金额计算出借款人需要还款的总金额，并分别计算出其中对应的总利息。最后分析设计模型给出的参数，优化模型，建立对借款人实际还款的模拟。 . 2.2 问题二 . 分析问题二，根据问题一给出的四个还款模型，比对各还款方式的还款金额与利息，参考相关资料给出的各地区贷款公司和各银行小额贷款的产品，选取对贷款公司有竞争力的还款方式作为小额贷款产品的还款方式。 . 2.3 问题三 . 分析问题三，针对实际的小额贷款生态，相关文献中已有详细论述。再根据前述问题一与问题二的模型分析，模拟小额贷款的真实情况，对其可靠性进行评估。 . 3 模型假设 . 1.该公司还款时间无延期，忽略实际政策影响导致的延期还款。 . 2.该公司具有长期的稳定收入，在还款期内，对还款金额有承受能力，忽略实际还款过程中的公司流动资金浮动造成的还款拖欠。 . 4 模型建立与求解 . 4.1 小额贷款的金融理论基础 . 企业或者个人在进行贷款时，在对贷款的偿还方式进行选择时，有多种选择，本文列举等额本息偿还，等额本金偿还，等本等息偿还和先息后本偿还。 . 4.2 符号说明 . 符号 符号说明 .   | 贷款额度 | .   | 总还贷期 | .   | 月利率 | .   | 现还款期数 | .   | 第n期还款金额 | .   | 总还款金额 | .   | 总还款利息 | . 4.3 等额本金还款法模型的建立 . 建立对每一期还款金额计算的模型[2]。该还款模式每一期所还的钱，为本金与利息之和。其中，本金是恒定不变的，而利息是逐期减少的。 . 第n期还款金额为： . 总还款金额为： . 总还款利息为： . 4.4 等额本息还款法模型的建立 . 建立对每一期还款金额计算的模型[2]。该还款模式每期所还的钱，即本金与利息之和是恒定不变的。它是一个固定的值，设为A。本息的组成，本金与利息两者的变化是不同的，本金是逐期的增加，而利息是逐期的减少，两者相加的和即本息又是一个恒定不变的，保持着一个动态的平衡。 . 第n期还款金额为： . 总还款金额为： . 总利息为： . 4.5 等本等息还款法模型的建立 . 建立对每一期还款金额计算的模型。该还款模式每一期偿还本金是不变的，每期偿还利息也是不变的。 . 第n期还款金额为： . 总还款金额为： . 总利息为： . 4.6 先息后本还款法模型的建立 . 建立对每一期还款金额计算的模型。该还款模式每期还款本金为0，每期只还利息，且利息不变，最后一期还总贷款额本金。 . 第n期还款金额为为： . 总还款金额为： . 总利息为： . 4.7 各模型的比较 . 根据上述各模型求解出的该公司一年后还款金额 . 表 1公司一年后还款金额 .   等额本金 等额本息 等本等息 先息后本 . 总还款金额 | 10585.0000 | 10594.6075 | 11080 | 11080 | . 总利息 | 585.0000 | 594.6075 | 1080 | 1080 | . 根据表中数据比较，针对小额贷款的还款总金额，还款方式为等额本金还款法时对该公司最划算，如果还款方式为等本等息还款法和先息后本还款法，则对发展前景不好的小型公司存在一定危险，还款金额大可能造成该公司资金链断裂。针对公司的运营状况，考虑到公司还款过程中存在的市场竞争，该公司也许更需要一个每期还款数额稳定的还款方式，即还款方式为等额本息还款法或等本等息还款法中的一种，又考虑到还款数额的问题，应当为等额本息还款法此时最为划算。 . 针对公司这一年里的运营情况，若该公司市场近期前景好，预期未来市场前景不明朗，则还款方式为等额本金还款法时最为划算，此时该公司可以在前期多还款后期少还款。如果还款方式为等本等息还款法，则该公司后期还款可能会导致资金链断裂。若该公司预期一年后有大笔盈利，则还款方式为先息后本还款法最为划算，此时该公司可以在前期尽量减少支出，将资金用于开拓市场，在最后一期中再偿还所有本金。若还款方式为先息后本还款法但是该公司预期一年后没有大的盈利，则会有造成公司资不抵债的可能。 . 4.8 模型评价 . 4.8.1 模型的优点 . 根据不同还款方式建立还款推导公式，考虑到每期还款金额的变化，提出计算每期还款金额的方法，模型对问题的模拟良好。 . 4.8.2 模型的缺点 . 四大模型未能引入政策因素以及经济因素对问题进行模拟，模拟结果与实际情况有一定的误差，可靠性较低。 . 4.8.3 模型的改进方案 . 将政策因素和经济因素设置为变量(POL和ECO)，导入模型中，获得更高的可靠性。 . 5 设计小额贷款产品 . 5.1 建设银行的小额贷款产品与某贷款公司的产品 . 5.1.1 建设银行的善融商务个人小额贷款 . 贷款对象： . (1).建行个人网银盾客户，并且已成功注册为善融商务会员和开通商城的账户。 . (2).在建设银行开立个人银行结算账户。 . 贷款期限： . 贷款额度有效期最长不超过1年（含）;个人小额贷款额度项下支用的单笔贷款的期限最长不超过1年（含）。 . 贷款额度： . 个人小额贷款预授信额度最低1000元，最高30万元，客户可在该额度项下申请支用贷款。 . 贷款用途： . 个人小额贷款支持购买建设银行善融商务个人商城签约商户销售的商品或服务。 . 还款方式及还款日： . 个人小额贷款的还款方式为委托扣款方式，还款日为贷款发放日的每月对日，客户须在还款日前将还款金额存入合同约定的还款账户内，建设银行在还款日从约定还款账户自动扣划。 . 利息参考： . 参照2020年6月贷款基准利率表。 . 表 2 2020年6月贷款基准利率表 . 各项贷款 利率 公积金 利率 . 一年以内(含一年) | 4.35 | 五年以下(含五年) | 2.75 | . 一至五年 (含五年) | 4.75 |   |   | . 五年以上 | 4.90 | 五年以上 | 3.25 | . 以上数据来源于金投网[6] . 5.1.2 某公司暖心借产品 . 贷款对象：有实名制手机号正常使用6个月以上，且有社保或信用卡(二选一) . 的22-55周岁公民。 . 贷款所需资料：身份认证、人脸识别、个人基础信息、工作信息、联系人、银行卡、社保或公积金(二选一)。 . 贷款额度：最高50000。 . 贷款周期：12个月。 . 利息参考： . 因为目前暂时找不到该产品的实际使用者，以借款的时候实际的利息费率为准。 . 5.2 小额贷款产品的还款方式 . 图 1四种还款方式每期还款对比图 . [CHART] . 图 2前三种还款方式每期还款对比图 . [CHART] . 根据对问题一的建模分析，可以得到四种还款方式对比图。表格1、图表1和图表2显示，等本等息还款法与先息后本还款法总利息最高，等额本金还款法总利息最低。但是等额本金还款法前期还款压力大，等额本息每月还款金额固定，利息比等额本金还款法更高，比等本等息还款法更低。实际市场中小额贷款公司通常是做无抵押贷款产品，所以贷款公司承担风险较大，因而对贷款收益要求更高。因此小额贷款公司要求贷款利率相对较高，在还款方式上，选择最大化收益的等本等息还款法或先息后本还款法作为公司小额贷款产品的还款方式。考虑贷款公司需要稳定的还款收益，选取等本等息还款法作为公司小额贷款产品的还款方式，该还款方式同时可以避免借款人拖欠债务或资不抵债。 . 5.3 小额贷款产品的利率 . 根据对建设银行的小额贷款产品与某贷款公司的产品的利率以及附录中的部分银行2020年1月贷款利率表，可推断全国范围内银行利率在4.35~5.6之间是合理的。根据央行相关规定，小额贷款公司的自营贷款利率和接受的委托贷款利率，必须控制在央行公布的同期同档次贷款基准利率４倍以内。为追求贷款产品最大化收益且保证在贷款利率上一定的市场竞争力，该小额贷款的利率设计为17.4%。 . 5.4 小额贷款产品的附加条件 . 根据《中华人民共和国民法典》[8]第六百六十九条、第六百七十二条的规定。设计该贷款产品应依据法典合法收集借款人的相关资料以及信用信息作为评判是否发放贷款的标准之一。在贷款期限内，设计要求定期审查借款人的有关财务会计报表或者其他资料。 . 建行的善融小额贷款产品表明，贷款款项可以指定市场对象与特定的客户群体。设计该贷款产品定向投资某一领域的某一用途。参考相关文献[3][4]以及银行信息网的相关资料，设计该产品的客户群体为农牧民，个体工商户以及小微企业。该客户群体是具有生产经营能力以及贷款偿还能力，且得不到所需的金融服务,没有充分享受到金融便利的群体。设计该产品的主要市场对象为网络运营贷款。该市场的前景比较明朗，市场还未饱和。 . 针对该贷款产品对贷款公司的风险，设计符合《民法典》的风险规避措施，以期减小运营风险。根据《中华人民共和国民法典》[8]第六百七十一条，第六百七十六条、第六百七十七条、第六百七十八条、第六百八十条的规定，在合同中添加条款，当借款人逾期未付还款款项时，我方有权申请冻结借款人的银行卡，有权向法院提起诉讼要求借款人及时归还款项。如若借款人没有能力归还贷款，则诉讼要求借款人以不动资产进行抵押还贷。该合同自贷款人提供借款时生效。对于贷款过程中的还款纠纷，以《中华人民共和国民法典》和相关法律条文以及实际案例为标准进行诉讼。 . 6 小额贷款的实况 . 根据参考文献[3][4][5]，可以得出以下结论：小额贷款公司随着国家和地方政府对小额贷款公司政策的变化，小额贷款公司只有具备了充足的财务资源与长远的财务战略、有活力的财务能力与财务执行力、持续的财务创新能力才能保持长久的市场竞争力。结合现今受疫情影响而导致的经济不景气，部分小微企业及个体商户需要资金支撑其度过经济下行期。小额贷款公司只要选好有发展前景或占当地市场份额较大的客户群体发放小额贷款，刺激当地经济运行，可以预见的是当报复性消费到来时，小额贷款公司收益有大幅增长的可能性较大。 . 根据中国人民银行的资料显示，近期尽管实行金融支持稳企业保就业政策，刺激经济增长。疫情期间，第三产业迎来困难期，且恢复起来相对较慢。对于第三产业的相关贷款，各类贷款都要求对相关资料严格审查及评估，避免发生借款人资不抵债的情况。根据中国人民银行对金融支持稳企业保就业政策的预测，该政策预计带动相关地方法人银行新发放普惠小微贷款近1万亿元，大幅提高小微企业信用贷款发放比例。同时，各地方政府也出台了相关的地方性政策给贷款开绿灯，如《深圳市应对新型冠状病毒肺炎疫情中小微企业贷款贴息项目实施办法》中就计划拨款10%的市级产业专项资金重点用于贷款贴息。这些政策的出台会导致各地银行贷款的竞争力上升，民间小额贷款的竞争力相对下降。短期内，商业银行与国有银行的小额贷款将大受欢迎，民间小额贷款前景较差。长期来看，民间小额贷款的无抵押贷款占据优势，结合网络贷款办理手续的简化，市场前景明朗。 . 参考文献 . 戴川业. 四川瀚华小额贷款产品资产证券化研究[D].湘潭大学,2019. . | 赵毓.等额本金与等额本息偿还贷款的利息研究——基于会计视角[J].科技资讯,2018,16(35):243-244. . | 魏玲丽,王能军.小额贷款公司财务竞争力评价指标体系研究[J].经济师,2020(04):124-125. . | 肖方良.当前商业银行发展小额贷款业务的难点与对策[J].海峡科学,2019(06):44-46+49. . | 涂斌. 庐山农村商业银行小额贷款业务存在的问题与对策研究[D].华东交通大学,2019. . | 金投网.2020年6月1日最新银行贷款利率表[EB/OL]. https://bank.cngold.org/c/2020-06-01/c7060639.html,2020-06-01. . | 银行信息港.2020年银行贷款利率表[EB/OL]. https://www.yinhang123.net/lltz/daikuanlilvbiao/1354405.html . | ,2019-12-03. . 人民网－人民日报.中华人民共和国民法典[EB/OL]. http://legal.people.com.cn/n1/2020/0602/c42510-31731656.html | ,2020年06月02日. . 人民银行网站.人民银行举行金融支持稳企业保就业新闻发布会[EB/OL]. http://www.gov.cn/xinwen/2020-06/03/content_5516920.htm,2020-06-03. | 附录 . “problem.mlx “ . clc;close all; . %% 获取数据 . day_i=3/10000 %日息 . number_of_periods_i=day_i*30 %月利率 . P=10000 %借款金额 . N = 12 %还款期数 . %% 模型选取及计算 . Amount=P %借款金额 . rate=number_of_periods_i %月利率 . number_of_periods=N %贷款期数 . command=input(‘输入0为等额本金还款，输入1为等额本息还款，输入2为等本等息还款，输入3为先息后本还款： ‘) . if command==0 . %等额本金还款方式 . M=Amount/number_of_periods %每月偿还本金 . for j=1:number_of_periods-1 . Amount(j+1)=Amount(j)-M %月初余额 . end . R=Amount*rate %月底的利息 . debt=Amount+R %月底欠款 . M1=M+Amount*rate %月还款额 . sum_R=sum(R) %总利息 . sum_Amount=sum(M1) %还款总额 . M=M-zeros(1,number_of_periods) . data=[Amount’,R’,debt’,M’,M1’]%月初所欠金额 利息额 月末所欠金额 偿还本金 月末付款 . [n,m]=size(data) . result= cell(n+1,m) . result(1,:)={‘月初所欠金额’,’利息额’,’月末所欠金额’,’偿还本金’,’月末付款’} . result(2:end,:) = num2cell(data) . xlswrite(‘data.xlsx’,result,’等额本金还款方式’)%输出excel . fprintf(‘sum_R=%f’,sum_R) . fprintf(‘sum_Amount=%f’,sum_Amount) . elseif command==1 . %等额本息还款方式 . M=Amount*(rate*(1+rate)^number_of_periods)/((1+rate)^number_of_periods-1)%月还款额 . for i=1:number_of_periods-1 . Amount(i+1)=Amount(i)*(1+rate)-M %月初金额 . end . R=Amount*rate %月底的利息 . mon=M-R %每月偿还本金 . debt=Amount+R %月底欠款 . sum_R=sum(R) %总利息 . sum_Amount=M*number_of_periods %还款总额 . M=M-zeros(1,number_of_periods) . data=[Amount’,R’,debt’,M’-R’,M’]%月初所欠金额 利息额 月末所欠金额 偿还本金 月末付款 . [n,m]=size(data) . result= cell(n+1,m) . result(1,:)={‘月初所欠金额’,’利息额’,’月末所欠金额’,’偿还本金’,’月末付款’} . result(2:end,:) = num2cell(data) . xlswrite(‘data.xlsx’,result,’等额本息还款方式’)%输出excel . fprintf(‘sum_R=%f’,sum_R) . fprintf(‘sum_Amount=%f’,sum_Amount) . elseif command==2 . %等本等息还款方式 . M=Amount/number_of_periods %月还本金 . for i=1:number_of_periods-1 . Amount(i+1)=Amount(i)-M %月初金额 . end . R=[P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate,P*rate] %月底的利息 . debt=Amount+R %月底欠款 . M2=M+R %月还款额 . sum_R=sum(R) %总利息 . sum_Amount=M*number_of_periods+P*rate*number_of_periods %还款总额 . M=M-zeros(1,number_of_periods) . data=[Amount’,R’,debt’,M’-R’,M2’]%月初所欠金额 利息额 月末所欠金额 偿还本金 月末付款 . [n,m]=size(data) . result= cell(n+1,m) . result(1,:)={‘月初所欠金额’,’利息额’,’月末所欠金额’,’偿还本金’,’月末付款’} . result(2:end,:) = num2cell(data) . xlswrite(‘data.xlsx’,result,’等本等息还款方式’)%输出excel . fprintf(‘sum_R=%f’,sum_R) . fprintf(‘sum_Amount=%f’,sum_Amount) . elseif command==3 . %先息后本还款方式 . M=0 %月还本金 . for i=1:number_of_periods-1 . Amount(i+1)=Amount(i)-M %月初金额 . end . R=Amount*rate %月底的利息 . debt=Amount+R %月底欠款 . M3=R %月还款额 . sum_R=sum(R) %总利息 . M4=debt . sum_Amount=P+sum_R %还款总额 . last_number_of_periods_debt=P+P*rate %最后一个月还款金额 . M=M-zeros(1,number_of_periods) . data=[Amount’,R’,debt’,M’,M3’]%月初所欠金额 利息额 月末所欠金额 偿还利息 月末付款 . [n,m]=size(data) . result= cell(n+1,m) . result(1,:)={‘月初所欠金额’,’利息额’,’月末所欠金额’,’偿还本金’,’月末付款利息’} . result(2:end,:) = num2cell(data) . xlswrite(‘data.xlsx’,result,’先息后本还款方式’)%输出excel . fprintf(‘sum_R=%f’,sum_R) . fprintf(‘sum_Amount=%f’,sum_Amount) . end . 表 3部分银行2020年一月贷款利率表 . 银行 短期贷款 中长期贷款 个人住房公积金贷款 贴现         .   | 六个月（含） | 六个月至一年（含） | 一至三年（含） | 三至五年（含） | 五年以上 | 五年以下（含） | 五年以上 |   | . 央行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 工商银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 农业银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 建设银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 中国银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 交通银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 | 以再贴现利率为下限加点确定 | . 招商银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 中信银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 光大银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 | 以再贴现利率为下限加点确定 | . 浦发银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 深圳发展银行 | 5.6 | 6 | 6.15 | 6.4 | 6.55 | 4 | 4.5 | 以再贴现利率为下限加点确定 | . 平安银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 广发银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 | 以再贴现利率为下限加点确定 | . 华夏银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 民生银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 兴业银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 东亚银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 北京银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 中国邮政储蓄银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 德州银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 盛京银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 贵阳银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 丹东银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 哈尔滨银行 | 4.6 | 4.6 | 5 | 5 | 5.15 | 2.75 | 3.25 |   | . 洛阳银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 富滇银行 | 4.35 | 4.35 | 4.75 | 4.75 | 4.9 | 2.75 | 3.25 |   | . 吉林银行 | 4.6 | 4.6 | 5 | 5 | 5.15 | 2.75 | 3.25 |   | . 以上数据来源于银行信息港[7] .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/05/12/%E5%B0%8F%E9%A2%9D%E8%B4%B7%E6%AC%BE%E7%9A%84%E5%88%92%E7%AE%97%E9%97%AE%E9%A2%98(Matlab%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1).html",
            "relUrl": "/2021/05/12/%E5%B0%8F%E9%A2%9D%E8%B4%B7%E6%AC%BE%E7%9A%84%E5%88%92%E7%AE%97%E9%97%AE%E9%A2%98(Matlab%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1).html",
            "date": " • May 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "2021新型冠状病毒（COVID-19/2019-nCoV）疫情分析",
            "content": "新型冠状病毒（COVID-19/2019-nCoV）疫情分析 . spiritLHL . . 重要说明 . 帮同一个选修课的学妹码的结课作业，这是我个人完善后的版本(她的还有很多错漏) . 分析文档：完成度：代码质量 3:5:2 . 其中分析文档是指你数据分析的过程中，对各问题分析的思路、对结果的解释、说明(要求言简意赅，不要为写而写) . ps:你自己写的代码远胜一切之代笔，无关美丑，只问今日比昨日更长进！加油！ . 温馨提示： . 疫情尚肆虐，请积极防护，保护自己 . 预祝各位取得好成绩 . 由于数据过多，查看数据尽量使用head()或tail()，以免程序长时间无响应 . ======================= . 本项目数据来源于丁香园。本项目主要目的是通过对疫情历史数据的分析研究，以更好的了解疫情与疫情的发展态势，为抗击疫情之决策提供数据支持。 . 一. 提出问题 . 从全国范围，你所在省市，国外疫情等三个方面主要研究以下几个问题： . （一）全国累计确诊/疑似/治愈/死亡情况随时间变化趋势如何？ . （二）你所在的省市情况如何？ . （三）全球疫情总体态势如何？ . （四）结合你的分析结果，对未来半年的疫情趋势给出你的判断，对个人和社会在抗击疫情方面有何建议？ . 二. 理解数据 . 原始数据集：AreaInfo.csv，导入相关包及读取数据，并赋值为 areas . #导入需要的数据库和文件 import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.pyplot import MultipleLocator areas=pd.read_csv(r&#39;data/AreaInfo.csv&#39;) plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;] plt.rcParams[&#39;axes.unicode_minus&#39;] = False . r_hex = &#39;#dc2624&#39; # red, RGB = 220,38,36 dt_hex = &#39;#2b4750&#39; # dark teal, RGB = 43,71,80 tl_hex = &#39;#45a0a2&#39; # teal, RGB = 69,160,162 r1_hex = &#39;#e87a59&#39; # red, RGB = 232,122,89 tl1_hex = &#39;#7dcaa9&#39; # teal, RGB = 125,202,169 g_hex = &#39;#649E7D&#39; # green, RGB = 100,158,125 o_hex = &#39;#dc8018&#39; # orange, RGB = 220,128,24 tn_hex = &#39;#C89F91&#39; # tan, RGB = 200,159,145 g50_hex = &#39;#6c6d6c&#39; # grey-50, RGB = 108,109,108 bg_hex = &#39;#4f6268&#39; # blue grey, RGB = 79,98,104 g25_hex = &#39;#c7cccf&#39; # grey-25, RGB = 199,204,207 . 查看与统计数据，以对数据有一个大致了解 . #数据过多，查看前几行 areas.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 0 亚洲 | Asia | 中国 | China | 澳门 | Macau | 820000 | 47 | 9.0 | 46 | 0 | 2021-01-22 23:40:08 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 24632468 | 0.0 | 10845438 | 410378 | 2021-01-22 23:40:08 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 8699814 | 0.0 | 7580741 | 214228 | 2021-01-22 23:40:08 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 欧洲 | Europe | 比利时 | Belgium | 比利时 | Belgium | 961001 | 686827 | 0.0 | 19239 | 20620 | 2021-01-22 23:40:08 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 3677352 | 0.0 | 3081536 | 68412 | 2021-01-22 23:40:08 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 相关字段含义介绍： . 小提示： . 国外数据的provinceName并非是省名，而是用其国家名标注，即数据不再细分到省。 . 中国数据的provinceName中也有’中国’这样的记录，代表当日全国各省之合计。善用之，对全国情况进行分析时就方便多了。 . continentName介绍了哪些大洲参与统计；中国数据中有的给出了省名，有的是用“中国”标注，代表当日全国各省之合计；国外数据的provinceName并非是省名，而是用其国家名标注，即数据不再细分到省 province_suspectedCount一栏中有过多的缺失值，需填补或舍弃；数据中没有详细给到城市数据。 . 三. 数据清洗 . （一）基本数据处理 . 数据清洗主要包括：选取子集，缺失数据处理、数据格式转换、异常值数据处理等。 . 提示：因数据皆赖各国上报，情势危杂之际，难免瞒报漏报，故存在较多缺失值，可以将其补全或舍弃，参见”Pandas之缺失值的处理.ipynb” . 国内疫情数据选取（最终选取的数据命名为china） . 选取国内疫情数据 . | 对于更新时间(updateTime)列，需将其转换为日期类型并提取出年-月-日，并查看处理结果。(提示：dt.date) . | 因数据每天按小时更新，一天之内有很多重复数据，请去重并只保留一天之内最新的数据。 . | 提示：df.drop_duplicates(subset=[‘provinceName’, ‘updateTime’], keep=’first’, inplace=False) . 其中df是你选择的国内疫情数据的DataFrame . 去除不在此次研究范围内的列,只留下[‘continentName’,’countryName’,’provinceName’,’province_confirmedCount’,’province_suspectedCount’,’province_curedCount’,’province_deadCount’,’updateTime’]这几列，并以’updateTime’为行索引。 | 提示：两种方法都可以：(1)选取这几列 或 (2)去除其余的列 . # 此处给出代码，后面省市数据和全球数据的获取与此大同小异 china = areas.loc[areas.countryName==&#39;中国&#39;,:].copy() china[&#39;updateTime&#39;] = pd.to_datetime(china.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date china = china.drop_duplicates(subset=[&#39;provinceName&#39;, &#39;updateTime&#39;], keep=&#39;first&#39;, inplace=False) # 将&quot;字符类型的日期列(Index)&quot;转为&quot;时间戳索引(DatetimeIndex)&quot; china[&#39;updateTime&#39;] = pd.to_datetime(china[&#39;updateTime&#39;]) china.set_index(&#39;updateTime&#39;,inplace=True) china = china[[&#39;continentName&#39;,&#39;countryName&#39;,&#39;provinceName&#39;,&#39;province_confirmedCount&#39;,&#39;province_suspectedCount&#39;,&#39;province_curedCount&#39;,&#39;province_deadCount&#39;]] china = china[china.provinceName==&#39;中国&#39;] china.head(2) . continentName countryName provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount . updateTime . 2021-01-22 亚洲 | 中国 | 中国 | 99667 | 0.0 | 92275 | 4810 | . 2021-01-21 亚洲 | 中国 | 中国 | 99513 | 0.0 | 92198 | 4809 | . china.index . DatetimeIndex([&#39;2021-01-22&#39;, &#39;2021-01-21&#39;, &#39;2021-01-20&#39;, &#39;2021-01-19&#39;, &#39;2021-01-18&#39;, &#39;2021-01-17&#39;, &#39;2021-01-16&#39;, &#39;2021-01-15&#39;, &#39;2021-01-14&#39;, &#39;2021-01-13&#39;, ... &#39;2020-03-24&#39;, &#39;2020-03-23&#39;, &#39;2020-03-22&#39;, &#39;2020-03-21&#39;, &#39;2020-03-20&#39;, &#39;2020-03-19&#39;, &#39;2020-03-18&#39;, &#39;2020-03-17&#39;, &#39;2020-03-16&#39;, &#39;2020-03-15&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;updateTime&#39;, length=305, freq=None) . 查看数据信息，是否有缺失数据/数据类型是否正确。若有缺失值，可以将其补全或舍弃，参见“Pandas之缺失值的处理.ipynb” . #有些城市不是每天上报，如果只统计那天上报的，那些不上报的就会被忽略，数据就会有错误,查看缺失值 #china.info() china.province_suspectedCount[china.province_suspectedCount.isnull()] = china.province_suspectedCount.dropna().mode().values china.head() . continentName countryName provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount . updateTime . 2021-01-22 亚洲 | 中国 | 中国 | 99667 | 0.0 | 92275 | 4810 | . 2021-01-21 亚洲 | 中国 | 中国 | 99513 | 0.0 | 92198 | 4809 | . 2021-01-20 亚洲 | 中国 | 中国 | 99285 | 0.0 | 92130 | 4808 | . 2021-01-19 亚洲 | 中国 | 中国 | 99094 | 0.0 | 92071 | 4806 | . 2021-01-18 亚洲 | 中国 | 中国 | 98922 | 0.0 | 91994 | 4805 | . 你所在省市疫情数据选取（最终选取的数据命名为myhome） . 此步也可在后面用到的再做 . 选取所在省市疫情数据(细化到市；若是直辖市，细化到区) . | 对于更新时间(updateTime)列，需将其转换为日期类型并提取出年-月-日，并查看处理结果。(提示：dt.date) . | 因数据每天按小时更新，一天之内有很多重复数据，请去重并只保留一天之内最新的数据，并以’updateTime’为行索引。 . | 提示：df.drop_duplicates(subset=[‘cityName’, ‘updateTime’], keep=’first’, inplace=False) . 去除不在此次研究范围内的列 | 提示：df.drop([‘continentName’,’continentEnglishName’,’countryName’,’countryEnglishName’,’provinceEnglishName’, ‘province_zipCode’,’cityEnglishName’,’updateTime’,’city_zipCode’],axis=1,inplace=True) . 其中df是你选择的省市疫情数据的DataFrame . #首先选取相应内容，后转换为日期类型并提取出年-月-日，去重 myhome=areas.loc[areas.provinceName==&#39;河北省&#39;,:].copy() myhome[&#39;updateTime&#39;] = pd.to_datetime(myhome.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date myhome.drop_duplicates(subset=[&#39;provinceName&#39;, &#39;updateTime&#39;], keep=&#39;first&#39;, inplace=True) # 将&quot;字符类型的日期列(Index)&quot;转为&quot;时间戳索引(DatetimeIndex)&quot; myhome[&#39;updateTime&#39;]=pd.to_datetime(myhome[&#39;updateTime&#39;]) myhome.set_index(&#39;updateTime&#39;,inplace=True) #去除不在此次研究范围内的列 myhome.drop([&#39;continentName&#39;,&#39;continentEnglishName&#39;,&#39;countryName&#39;,&#39;countryEnglishName&#39;,&#39;provinceEnglishName&#39;,&#39;province_zipCode&#39;,&#39;cityEnglishName&#39;,&#39;city_zipCode&#39;],axis=1,inplace=True) myhome.head(2) . provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount cityName city_confirmedCount city_suspectedCount city_curedCount city_deadCount . updateTime . 2021-01-22 河北省 | 1252 | 0.0 | 405 | 7 | 石家庄 | 843.0 | 0.0 | 54.0 | 1.0 | . 2021-01-21 河北省 | 1245 | 0.0 | 395 | 7 | 石家庄 | 842.0 | 0.0 | 54.0 | 1.0 | . 查看数据信息，是否有缺失数据/数据类型是否正确。若有缺失值，可以将其补全或舍弃，参见“Pandas之缺失值的处理.ipynb” . #查看缺失值 #myhome.info() myhome.province_suspectedCount[myhome.province_suspectedCount.isnull()] = myhome.province_suspectedCount.dropna().mode().values myhome.tail() . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy This is separate from the ipykernel package so we can avoid doing imports until . provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount cityName city_confirmedCount city_suspectedCount city_curedCount city_deadCount . updateTime . 2020-01-27 河北省 | 18 | 0.0 | 0 | 1 | 石家庄 | 7.0 | 0.0 | 0.0 | 0.0 | . 2020-01-26 河北省 | 13 | 0.0 | 0 | 1 | 石家庄 | 5.0 | 0.0 | 0.0 | 0.0 | . 2020-01-25 河北省 | 8 | 0.0 | 0 | 1 | 石家庄 | 4.0 | 0.0 | 0.0 | 0.0 | . 2020-01-24 河北省 | 2 | 0.0 | 0 | 1 | 石家庄 | 1.0 | 0.0 | 0.0 | 0.0 | . 2020-01-22 河北省 | 1 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | . 全球疫情数据选取（最终选取的数据命名为world） . 此步也可在后面用到的再做 . 选取国外疫情数据 | 提示：选取国外疫情数据（countryName!=’中国’） . 对于更新时间(updateTime)列，需将其转换为日期类型并提取出年-月-日，并查看处理结果。(提示：dt.date) . | 因数据每天按小时更新，一天之内有很多重复数据，请去重并只保留一天之内最新的数据。 . | 提示：df.drop_duplicates(subset=[‘provinceName’, ‘updateTime’], keep=’first’, inplace=False) . 其中df是你选择的国内疫情数据的DataFrame . 去除不在此次研究范围内的列,只留下[‘continentName’,’countryName’,’provinceName’,’province_confirmedCount’,’province_suspectedCount’,’province_curedCount’,’province_deadCount’,’updateTime’]这几列，并以’updateTime’为行索引。 | 提示：两种方法都可以：(1)选取这几列 或 (2)去除其余的列 . 得到全球数据 | 提示：用 concat 函数将前面的china与国外数据按「轴」连接得到全球数据。 . world=areas.loc[areas.countryName!=&#39;中国&#39;,:].copy() world[&#39;updateTime&#39;] = pd.to_datetime(world.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date world.drop_duplicates(subset=[&#39;provinceName&#39;, &#39;updateTime&#39;], keep=&#39;first&#39;, inplace=False) # 将&quot;字符类型的日期列(Index)&quot;转为&quot;时间戳索引(DatetimeIndex)&quot; world[&#39;updateTime&#39;]=pd.to_datetime(world[&#39;updateTime&#39;]) world.set_index(&#39;updateTime&#39;,inplace=True) #去除不在此次研究范围内的列 #world.drop([&#39;continentName&#39;,&#39;countryName&#39;,&#39;provinceName&#39;,&#39;province_confirmedCount&#39;,&#39;province_suspectedCount&#39;,&#39;province_curedCount&#39;,&#39;province_deadCount&#39;],axis=1,inplace=True) #更改索引，按轴1链接 world = world.reset_index() temp = china.copy() temp = temp.reset_index() pd.concat([world,temp], axis=1) . updateTime continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount ... city_curedCount city_deadCount updateTime continentName countryName provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount . 0 2021-01-22 | 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 24632468 | 0.0 | ... | NaN | NaN | 2021-01-22 | 亚洲 | 中国 | 中国 | 99667.0 | 0.0 | 92275.0 | 4810.0 | . 1 2021-01-22 | 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 8699814 | 0.0 | ... | NaN | NaN | 2021-01-21 | 亚洲 | 中国 | 中国 | 99513.0 | 0.0 | 92198.0 | 4809.0 | . 2 2021-01-22 | 欧洲 | Europe | 比利时 | Belgium | 比利时 | Belgium | 961001 | 686827 | 0.0 | ... | NaN | NaN | 2021-01-20 | 亚洲 | 中国 | 中国 | 99285.0 | 0.0 | 92130.0 | 4808.0 | . 3 2021-01-22 | 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 3677352 | 0.0 | ... | NaN | NaN | 2021-01-19 | 亚洲 | 中国 | 中国 | 99094.0 | 0.0 | 92071.0 | 4806.0 | . 4 2021-01-22 | 欧洲 | Europe | 塞尔维亚 | Republic of Serbia | 塞尔维亚 | Republic of Serbia | 965013 | 436121 | 0.0 | ... | NaN | NaN | 2021-01-18 | 亚洲 | 中国 | 中国 | 98922.0 | 0.0 | 91994.0 | 4805.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 301542 2020-01-27 | NaN | NaN | 马来西亚 | Malaysia | 马来西亚 | Malaysia | 952007 | 3 | 0.0 | ... | NaN | NaN | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301543 2020-01-27 | NaN | NaN | 法国 | France | 法国 | France | 961002 | 3 | 0.0 | ... | NaN | NaN | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301544 2020-01-27 | NaN | NaN | 越南 | Vietnam | 越南 | Vietnam | 952011 | 2 | 0.0 | ... | NaN | NaN | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301545 2020-01-27 | NaN | NaN | 尼泊尔 | Nepal | 尼泊尔 | Nepal | 953005 | 1 | 0.0 | ... | NaN | NaN | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301546 2020-01-27 | NaN | NaN | 加拿大 | Canada | 加拿大 | Canada | 971001 | 1 | 0.0 | ... | NaN | NaN | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301547 rows × 27 columns . 查看数据信息，是否有缺失数据/数据类型是否正确。 . 提示：因数据皆赖各国上报，情势危杂之际，难免瞒报漏报，故存在较多缺失值，可以将其补全或舍弃，参见“Pandas之缺失值的处理.ipynb” . #因数据皆赖各国上报，情势危杂之际，难免瞒报漏报，故存在较多缺失值 #world.info() world.head() . updateTime continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 0 2021-01-22 | 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 24632468 | 0.0 | 10845438 | 410378 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 2021-01-22 | 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 8699814 | 0.0 | 7580741 | 214228 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 2021-01-22 | 欧洲 | Europe | 比利时 | Belgium | 比利时 | Belgium | 961001 | 686827 | 0.0 | 19239 | 20620 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 2021-01-22 | 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 3677352 | 0.0 | 3081536 | 68412 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 2021-01-22 | 欧洲 | Europe | 塞尔维亚 | Republic of Serbia | 塞尔维亚 | Republic of Serbia | 965013 | 436121 | 0.0 | 50185 | 5263 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 四. 数据分析及可视化 . 在进行数据分析及可视化时，依据每个问题选取所需变量并新建DataFrame再进行分析和可视化展示，这样数据不易乱且条理更清晰。 . 基础分析 . 基础分析，只允许使用numpy、pandas和matplotlib库。 . 可以在一张图上多个坐标系展示也可以在多张图上展示 . 请根据分析目的选择图形的类型(折线图、饼图、直方图和散点图等等)，实在没有主意可以到百度疫情地图或其他疫情分析的站点激发激发灵感。 . （一）全国累计确诊/治愈/死亡情况随时间变化趋势如何？ . china.index . DatetimeIndex([&#39;2021-01-22&#39;, &#39;2021-01-21&#39;, &#39;2021-01-20&#39;, &#39;2021-01-19&#39;, &#39;2021-01-18&#39;, &#39;2021-01-17&#39;, &#39;2021-01-16&#39;, &#39;2021-01-15&#39;, &#39;2021-01-14&#39;, &#39;2021-01-13&#39;, ... &#39;2020-03-24&#39;, &#39;2020-03-23&#39;, &#39;2020-03-22&#39;, &#39;2020-03-21&#39;, &#39;2020-03-20&#39;, &#39;2020-03-19&#39;, &#39;2020-03-18&#39;, &#39;2020-03-17&#39;, &#39;2020-03-16&#39;, &#39;2020-03-15&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;updateTime&#39;, length=305, freq=None) . #首先整合每天全国累计确诊/治愈/死亡情况做成新的列表 list_a=china[&#39;province_confirmedCount&#39;] #遍历时间将其改为字符串形式 list_updatetime=[] for i in china.index: list_updatetime.append(str(i)[0:11]) updatetime_a=pd.DataFrame(list_a,index=list_updatetime) updatetime_a.index.name=&#39;updatetime&#39; updatetime_a.columns=[&#39;province_confirmedCount&#39;] updatetime_a.head() . province_confirmedCount . updatetime . 2021-01-22 99667 | . 2021-01-21 99513 | . 2021-01-20 99285 | . 2021-01-19 99094 | . 2021-01-18 98922 | . #画折线图表示 fig, axes = plt.subplots(1,1,figsize=(16, 4)) x=updatetime_a.index y=updatetime_a.values plot=axes.plot(x,y,color=dt_hex,linewidth=2,linestyle=&#39;-&#39;,label=&#39;province_confirmedCount&#39;) axes.set_xticks(range(0,len(x),25)) plt.xlabel(&#39;日期&#39;,fontsize=10) plt.ylabel(&#39;人数&#39;,fontsize=10) axes.legend(loc=0,frameon=True) plt.show() #重复以上步骤，绘制治愈/死亡的折线图 list_b=china[&#39;province_curedCount&#39;] #遍历时间将其改为字符串形式 list_updatetime=[] for i in china.index: list_updatetime.append(str(i)[0:11]) updatetime_b=pd.DataFrame(list_b,index=list_updatetime) updatetime_b.index.name=&#39;updatetime&#39; updatetime_b.columns=[&#39;province_curedCount&#39;] updatetime_b.head() #画折线图表示 fig, axes = plt.subplots(1,1,figsize=(16, 4)) x=updatetime_b.index y=updatetime_b.values plot=axes.plot(x,y,color=dt_hex,linewidth=2,linestyle=&#39;-&#39;,label=&#39;province_curedCount&#39;) axes.set_xticks(range(0,len(x),25)) plt.xlabel(&#39;日期&#39;,fontsize=10) plt.ylabel(&#39;人数&#39;,fontsize=10) axes.legend(loc=0,frameon=True) plt.show() #绘制死亡人数图 list_c=china[&#39;province_deadCount&#39;] #遍历时间将其改为字符串形式 list_updatetime=[] for i in china.index: list_updatetime.append(str(i)[0:11]) updatetime_c=pd.DataFrame(list_a,index=list_updatetime) updatetime_c.index.name=&#39;updatetime&#39; updatetime_c.columns=[&#39;province_deadCount&#39;] updatetime_c.head() #画折线图表示 fig, axes = plt.subplots(1,1,figsize=(16, 4)) x=updatetime_c.index y=updatetime_c.values plot=axes.plot(x,y,color=dt_hex,linewidth=2,linestyle=&#39;-&#39;,label=&#39;province_deadCount&#39;) axes.set_xticks(range(0,len(x),25)) plt.xlabel(&#39;日期&#39;,fontsize=10) plt.ylabel(&#39;人数&#39;,fontsize=10) axes.legend(loc=0,frameon=True) plt.show() #分析：确诊与死亡人数的折线图显示出人数在逐渐增加，增速有加快的趋势；治愈人数虽然也是再增加，但是增速逐渐变慢 . . . . （二）你所在的省市情况如何？ . myhome . provinceName province_confirmedCount province_suspectedCount province_curedCount province_deadCount cityName city_confirmedCount city_suspectedCount city_curedCount city_deadCount . updateTime . 2021-01-22 河北省 | 1252 | 0.0 | 405 | 7 | 石家庄 | 843.0 | 0.0 | 54.0 | 1.0 | . 2021-01-21 河北省 | 1245 | 0.0 | 395 | 7 | 石家庄 | 842.0 | 0.0 | 54.0 | 1.0 | . 2021-01-20 河北省 | 1222 | 0.0 | 384 | 7 | 石家庄 | 813.0 | 0.0 | 45.0 | 1.0 | . 2021-01-19 河北省 | 1198 | 0.0 | 383 | 7 | 石家庄 | 801.0 | 0.0 | 45.0 | 1.0 | . 2021-01-18 河北省 | 1171 | 0.0 | 379 | 7 | 石家庄 | 774.0 | 0.0 | 41.0 | 1.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2020-01-27 河北省 | 18 | 0.0 | 0 | 1 | 石家庄 | 7.0 | 0.0 | 0.0 | 0.0 | . 2020-01-26 河北省 | 13 | 0.0 | 0 | 1 | 石家庄 | 5.0 | 0.0 | 0.0 | 0.0 | . 2020-01-25 河北省 | 8 | 0.0 | 0 | 1 | 石家庄 | 4.0 | 0.0 | 0.0 | 0.0 | . 2020-01-24 河北省 | 2 | 0.0 | 0 | 1 | 石家庄 | 1.0 | 0.0 | 0.0 | 0.0 | . 2020-01-22 河北省 | 1 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | . 134 rows × 10 columns . plt.figure( figsize=(20,10), dpi=80) list_updatetime=[] for i in myhome.index: list_updatetime.append(str(i)[0:11]) x = list_updatetime y1=myhome[&#39;province_confirmedCount&#39;] y2=myhome[&#39;province_curedCount&#39;] y3=myhome[&#39;province_deadCount&#39;] plt.plot(x,y1,color=r_hex,label=&#39;province_confirmedCount&#39;) plt.plot(x,y2,color=tl_hex,label=&#39;province_curedCount&#39;) plt.plot(x,y3,color=g_hex,label=&#39;province_deadCount&#39;) x_major_locator = MultipleLocator(12) ax = plt.gca() ax.xaxis.set_major_locator(x_major_locator) plt.legend(loc=0,frameon=True) plt.show() . . （三）全球疫情态势如何？ . 全球 TOP10 国家的疫情情况如何？ . | 各大洲情况对比？ . | 选一个你感兴趣的大洲，分析各国疫情之间的联系、分布、对比和构成情况。 . | 提示：注意数据透视、分组和整合知识的运用 . world . updateTime continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 0 2021-01-22 | 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 24632468 | 0.0 | 10845438 | 410378 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 2021-01-22 | 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 8699814 | 0.0 | 7580741 | 214228 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 2021-01-22 | 欧洲 | Europe | 比利时 | Belgium | 比利时 | Belgium | 961001 | 686827 | 0.0 | 19239 | 20620 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 2021-01-22 | 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 3677352 | 0.0 | 3081536 | 68412 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 2021-01-22 | 欧洲 | Europe | 塞尔维亚 | Republic of Serbia | 塞尔维亚 | Republic of Serbia | 965013 | 436121 | 0.0 | 50185 | 5263 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 301542 2020-01-27 | NaN | NaN | 马来西亚 | Malaysia | 马来西亚 | Malaysia | 952007 | 3 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301543 2020-01-27 | NaN | NaN | 法国 | France | 法国 | France | 961002 | 3 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301544 2020-01-27 | NaN | NaN | 越南 | Vietnam | 越南 | Vietnam | 952011 | 2 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301545 2020-01-27 | NaN | NaN | 尼泊尔 | Nepal | 尼泊尔 | Nepal | 953005 | 1 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301546 2020-01-27 | NaN | NaN | 加拿大 | Canada | 加拿大 | Canada | 971001 | 1 | 0.0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 301547 rows × 19 columns . country = list(set(world[&#39;provinceEnglishName&#39;])) date_y = [] for dt in world.loc[world[&#39;provinceEnglishName&#39;] == country[0]][&#39;updateTime&#39;]: date_y.append(str(dt)) date_y.sort() for c in country: world.loc[world[&#39;provinceEnglishName&#39;] == c].sort_values(by = &#39;updateTime&#39;) world.dropna(subset=[&#39;provinceEnglishName&#39;],inplace=True) world.updateTime = pd.to_datetime(world.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date world_confirmed = world.loc[world[&#39;provinceEnglishName&#39;] == world.head(15)[&#39;provinceEnglishName&#39;][0]].pivot_table(index=&#39;updateTime&#39;, columns=&#39;provinceEnglishName&#39;, values=&#39;province_confirmedCount&#39;,aggfunc=np.mean) for i in world.head(15)[&#39;provinceEnglishName&#39;][1:]: draft_c = world.loc[world[&#39;provinceEnglishName&#39;] == i].pivot_table(index=&#39;updateTime&#39;, columns=&#39;provinceEnglishName&#39;, values=&#39;province_confirmedCount&#39;,aggfunc=np.mean) world_confirmed = pd.merge(world_confirmed,draft_c,on=&#39;updateTime&#39;, how=&#39;outer&#39;,sort=True) world_confirmed.fillna(0,inplace=True,limit = 1) world_confirmed.fillna(method=&quot;ffill&quot;,inplace=True) world_confirmed fig = plt.figure(figsize=(16,10)) plt.plot(world_confirmed) plt.legend(world_confirmed.columns) plt.title(&#39;前15个国家累计确诊人数&#39;,fontsize=20) plt.xlabel(&#39;日期&#39;,fontsize=20) plt.ylabel(&#39;人数/百万&#39;,fontsize=20); plt.show() . . （四）结合你的分析结果，对未来半年的疫情趋势给出你的判断，对个人和社会在抗击疫情方面有何建议？ . . 附加分析(选做，但做的出彩会加分哦) . 附加分析，所使用的库不限，比如可以使用seaborn、pyecharts等库。 . 童鞋们，自由发挥吧！！(实在没有idea，到百度疫情地图或其他疫情分析的站点激发激发灵感。) . 比如，这样滴… . . 或者，这样滴… . . 或者，这样滴… . . 少侠，等你来战！ . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2021/05/12/Cov2019-Analysis.html",
            "relUrl": "/markdown/2021/05/12/Cov2019-Analysis.html",
            "date": " • May 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "某区域流体数据处理(只会写操作，不知道具体意义)",
            "content": "帮舍友写的，具体数据集在最后，具体操作意义不知道，我只是按照舍友要求写的。 . import numpy as np import pandas as pd data = pd.read_excel(r&#39;C: Users 祈LHL Desktop data.xlsx&#39;) . data.head() . cellnumber x-coordinate y-coordinate z-coordinate density z-velocity relative-z-velocity x-coordinate.1 y-coordinate z-face-area boundary-cell-dist boundary-normal-dist . 0 1 | -12.597898 | -2.404495 | -6.320497 | 1.226 | -22.205814 | -22.205814 | -12.597899 | -2.404528 | -0.006824 | 1 | 0.010276 | . 1 2 | -12.597898 | -2.321485 | -6.320487 | 1.226 | -23.532957 | -23.532957 | -12.597899 | -2.321584 | -0.006824 | 1 | 0.020553 | . 2 3 | -12.515688 | -2.404495 | -6.320500 | 1.226 | -23.167622 | -23.167622 | -12.515688 | -2.404528 | -0.006824 | 1 | 0.020636 | . 3 4 | -12.515688 | -2.321485 | -6.320500 | 1.226 | -24.882029 | -24.882029 | -12.515688 | -2.321584 | -0.006824 | 1 | 0.051111 | . 4 5 | -12.433477 | -2.404495 | -6.320500 | 1.226 | -23.488083 | -23.488083 | -12.433478 | -2.404528 | -0.006824 | 1 | 0.020719 | . y = data.sort_values(by=&quot;y-coordinate&quot; , ascending=False) . step = 4.892/6 i = 0 y_list = [] section = [] #y6 x3 . while i &lt; 6: step_y = float(&quot;%.8f&quot;%(i*step)) a_y = step_y-2.446 y_min = y.loc[y[&#39;y-coordinate&#39;] &gt;= a_y] i +=1 step_y = float(&quot;%.8f&quot;%(i*step)) b_y = step_y-2.446 y_max = y_min.loc[y_min[&#39;y-coordinate&#39;] &lt; b_y] y_list.append(y_max) section_y = (a_y,b_y) section.append(section_y) #section[5] . j = 0 step = 1.562/3 x_list = [] section_x_list = [] section_y_list = [] . while j &lt;= 5: temp = y_list[j] m = 0 while m &lt;= 2: step_x = float(&quot;%.8f&quot;%(m*step)) a_x = step_x-12.639 x_min = temp.loc[temp[&#39;x-coordinate&#39;] &gt;= a_x] m +=1 step_x = float(&quot;%.8f&quot;%(m*step)) b_x = step_x-12.639 x_max = x_min.loc[temp[&#39;x-coordinate&#39;] &lt; b_x] x_list.append(x_max) section_x = (a_x,b_x) section_x_list.append(section_x) section_y_list.append(section[j]) j += 1 #18个块 . section_list = [] Q_list = [] i = 0 . while i &lt;= 17: temp_l = x_list[i] Q = (temp_l[&quot;density&quot;]*temp_l[&quot;z-velocity&quot;]*temp_l[&quot;z-face-area&quot;]).sum() i +=1 Q_list.append(Q) . section_x_list . [(-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077), (-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077), (-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077), (-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077), (-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077), (-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077)] . section_y_list . [(-2.446, -1.63066667), (-2.446, -1.63066667), (-2.446, -1.63066667), (-1.63066667, -0.8153333300000001), (-1.63066667, -0.8153333300000001), (-1.63066667, -0.8153333300000001), (-0.8153333300000001, 0.0), (-0.8153333300000001, 0.0), (-0.8153333300000001, 0.0), (0.0, 0.8153333299999996), (0.0, 0.8153333299999996), (0.0, 0.8153333299999996), (0.8153333299999996, 1.6306666699999997), (0.8153333299999996, 1.6306666699999997), (0.8153333299999996, 1.6306666699999997), (1.6306666699999997, 2.446), (1.6306666699999997, 2.446), (1.6306666699999997, 2.446)] . . index = [] i = 0 while i &lt;= 2: index.append(section_x_list[i]) i+=1 index . [(-12.639, -12.118333329999999), (-12.118333329999999, -11.597666669999999), (-11.597666669999999, -11.077)] . cols = [] i = 0 while i &lt;= 17: cols.append(section_y_list[i]) i+=3 cols . [(-2.446, -1.63066667), (-1.63066667, -0.8153333300000001), (-0.8153333300000001, 0.0), (0.0, 0.8153333299999996), (0.8153333299999996, 1.6306666699999997), (1.6306666699999997, 2.446)] . j = 0 data = {} while j &lt;=5: col = cols[j] data[col]= 1 j += 1 data . {(-2.446, -1.63066667): 1, (-1.63066667, -0.8153333300000001): 1, (-0.8153333300000001, 0.0): 1, (0.0, 0.8153333299999996): 1, (0.8153333299999996, 1.6306666699999997): 1, (1.6306666699999997, 2.446): 1} . print(section_x_list[0]) . (-12.639, -12.118333329999999) . print(section_y_list[0]) . (-2.446, -1.63066667) . print(Q_list[0]) . 12.427282344087539 . Q_list . [12.427282344087539, 12.86438295520224, 8.104732674789329, 14.059159859218617, 14.0170078290342, 6.50613023081204, 13.851341644545903, 14.102576555137208, 6.549793869809068, 13.873905539737082, 14.100577509379482, 6.539991338980014, 14.030126072372612, 13.966730831575635, 6.467075694188603, 11.644887356127308, 12.004108151505823, 7.422577844039829] . temp_list = Q_list.copy() r = 0 l = 0 for i in data: content = [] for j in range(3): content.append(Q_list[l]) l+=1 data[i] = content data . {(-2.446, -1.63066667): [12.427282344087539, 12.86438295520224, 8.104732674789329], (-1.63066667, -0.8153333300000001): [14.059159859218617, 14.0170078290342, 6.50613023081204], (-0.8153333300000001, 0.0): [13.851341644545903, 14.102576555137208, 6.549793869809068], (0.0, 0.8153333299999996): [13.873905539737082, 14.100577509379482, 6.539991338980014], (0.8153333299999996, 1.6306666699999997): [14.030126072372612, 13.966730831575635, 6.467075694188603], (1.6306666699999997, 2.446): [11.644887356127308, 12.004108151505823, 7.422577844039829]} . df = pd.DataFrame(data=data, index=index) df . -2.446000 -1.630667 -0.815333 0.000000 0.815333 1.630667 . -1.630667 -0.815333 0.000000 0.815333 1.630667 2.446000 . (-12.639, -12.118333329999999) 12.427282 | 14.059160 | 13.851342 | 13.873906 | 14.030126 | 11.644887 | . (-12.118333329999999, -11.597666669999999) 12.864383 | 14.017008 | 14.102577 | 14.100578 | 13.966731 | 12.004108 | . (-11.597666669999999, -11.077) 8.104733 | 6.506130 | 6.549794 | 6.539991 | 6.467076 | 7.422578 | . 相关资料：数据集链接点此下载 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/04/16/liutishujuchuli.html",
            "relUrl": "/2021/04/16/liutishujuchuli.html",
            "date": " • Apr 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Python新线程使用",
            "content": "创建并使用多线程 . print(&#39;主线程执行代码&#39;) # 从 threading 库中导入Thread类 from threading import Thread from time import sleep # 定义一个函数，作为新线程执行的入口函数 def threadFunc(arg1,arg2): print(&#39;子线程 开始&#39;) print(f&#39;线程函数参数是：{arg1}, {arg2}&#39;) sleep(5) print(&#39;子线程 结束&#39;) # 创建 Thread 类的实例对象， 并且指定新线程的入口函数，此时并没有执行 thread = Thread(target=threadFunc, args=(&#39;参数1&#39;, &#39;参数2&#39;) ) #target=threadFunc对应执行的函数threadFunc #args=(&#39;参数1&#39;, &#39;参数2&#39;)这样新进程添加参数 # 执行start 方法，就会创建新线程， # 并且新线程会去执行入口函数里面的代码。 # 这时候这个进程有两个线程了。↓ thread.start() # 主线程的代码执行 子线程对象的join方法， # 就会等待子线程结束，才继续执行下面的代码 thread.join() print(&#39;主线程结束&#39;) . 运行该程序，解释器执行到下面代码时 . thread = Thread(target=threadFunc, args=(&#39;参数1&#39;, &#39;参数2&#39;) ) . 创建了一个Thread实例对象，其中，Thread类的初始化参数 有两个 . target参数 是指定新线程的 入口函数， 新线程创建后就会 执行该入口函数里面的代码， . args 指定了 传给 入口函数threadFunc 的参数。 线程入口函数 参数，必须放在一个元组里面，里面的元素依次作为入口函数的参数。 . 注意，上面的代码只是创建了一个Thread实例对象， 但这时，新的线程还没有创建。 . 要创建线程，必须要调用 Thread 实例对象的 start方法 。也就是执行完下面代码的时候 . thread.start() . 新的线程才创建成功，并开始执行 入口函数threadFunc 里面的代码。 . 有的时候， 一个线程需要等待其它的线程结束，比如需要根据其他线程运行结束后的结果进行处理。 . 这时可以使用 Thread对象的 join 方法 . thread.join() . 如果一个线程A的代码调用了 对应线程B的Thread对象的 join 方法，线程A就会停止继续执行代码，等待线程B结束。 线程B结束后，线程A才继续执行后续的代码。 . 所以主线程在执行上面的代码时，就暂停在此处， 一直要等到 新线程执行完毕，退出后，才会继续执行后续的代码。 python #错误示例！！！！ thread = Thread(target=threadFunc(&#39;参数1&#39;, &#39;参数2&#39;)) . ↑如果这样写无法创建新线程并执行，这样target传入不是函数，传入的是运行结果(null)，而且是在主线程运行完了，并不是在子线程里运行。 . 共享数据的访问控制 . 做多线程开发，经常遇到这样的情况：多个线程里面的代码需要访问同一个公共的数据对象。 . 这个公共的数据对象可以是任何类型， 比如一个列表、字典、或者自定义类的对象。 . 有的时候，程序需要防止线程的代码同时操作公共数据对象。否则，就有可能导致数据的访问互相冲突影响。 . 请看一个例子。 . 我们用一个简单的程序模拟一个银行系统，用户可以往自己的帐号上存钱。 . 对应代码如下： . from threading import Thread from time import sleep bank = { &#39;byhy&#39; : 0 } # 定义一个函数，作为新线程执行的入口函数 def deposit(theadidx,amount): balance = bank[&#39;byhy&#39;] # 执行一些任务，耗费了0.1秒 sleep(0.1) bank[&#39;byhy&#39;] = balance + amount print(f&#39;子线程 {theadidx} 结束&#39;) theadlist = [] for idx in range(10): thread = Thread(target = deposit, args = (idx,1) ) thread.start() # 把线程对象都存储到 threadlist中 theadlist.append(thread) for thread in theadlist: thread.join() print(&#39;主线程结束&#39;) print(f&#39;最后我们的账号余额为 {bank[&quot;byhy&quot;]}&#39;) . 上面的代码中，一起执行 . 开始的时候， 该帐号的余额为0，随后我们启动了10个线程， 每个线程都deposit函数，往帐号byhy上存1元钱。 . 可以预期，执行完程序后，该帐号的余额应该为 10。 . 然而，我们运行程序后，发现结果如下 . 子线程 0 结束 子线程 3 结束 子线程 2 结束 子线程 4 结束 子线程 1 结束 子线程 7 结束 子线程 5 结束 子线程 9 结束 子线程 6 结束 子线程 8 结束 主线程结束 . 最后我们的账号余额为 1 为什么是 1 呢？ 而不是 10 呢？ . 如果在我们程序代码中，只有一个线程，如下所示 . from time import sleep bank = { &#39;byhy&#39; : 0 } # 定义一个函数，作为新线程执行的入口函数 def deposit(theadidx,amount): balance = bank[&#39;byhy&#39;] # 执行一些任务，耗费了0.1秒 sleep(0.1) bank[&#39;byhy&#39;] = balance + amount for idx in range(10): deposit (idx,1) print(f&#39;最后我们的账号余额为 {bank[&quot;byhy&quot;]}&#39;) . 代码都是串行执行的。不存在多线程同时访问bank对象的问题，运行结果一切都是正常的。 . 现在我们程序代码中，有多个线程，并且在这个几个线程中都会去调用deposit，就有可能同时操作这个bank对象，就有可能出一个线程覆盖另外一个线程的结果的问题。 . 这时，可以使用threading库里面的锁对象Lock去保护。 . 我们修改多线程代码，如下： . from threading import Thread,Lock from time import sleep bank = { &#39;byhy&#39; : 0 } bankLock = Lock() # 定义一个函数，作为新线程执行的入口函数 def deposit(theadidx,amount): # 操作共享数据前，申请获取锁 bankLock.acquire() balance = bank[&#39;byhy&#39;] # 执行一些任务，耗费了0.1秒 sleep(0.1) bank[&#39;byhy&#39;] = balance + amount print(f&#39;子线程 {theadidx} 结束&#39;) # 操作完共享数据后，申请释放锁 bankLock.release() theadlist = [] for idx in range(10): thread = Thread(target = deposit, args = (idx,1) ) thread.start() # 把线程对象都存储到 threadlist中 theadlist.append(thread) for thread in theadlist: thread.join() print(&#39;主线程结束&#39;) print(f&#39;最后我们的账号余额为 {bank[&quot;byhy&quot;]}&#39;) . 执行一下，结果如下 . 子线程 0 结束 子线程 1 结束 子线程 2 结束 子线程 3 结束 子线程 4 结束 子线程 5 结束 子线程 6 结束 子线程 7 结束 子线程 8 结束 子线程 9 结束 主线程结束 最后我们的账号余额为 10 . 正确了。 . 每个线程在操作共享数据对象之前，都应该申请获取操作权，也就是调用该共享数据对象对应的锁对象的acquire方法。 如果线程A执行如下代码，调用acquire方法的时候， python bankLock.acquire() . 别的线程B已经申请到了这个锁，并且还没有释放，那么线程A的代码就在此处等待线程B释放锁，不去执行后面的代码。 . 直到线程B执行了锁的release方法释放了这个锁，线程A才可以获取这个锁，就可以执行下面的代码了。 . 如果这时线程B又执行这个锁的acquire方法，就需要等待线程A执行该锁对象的release方法释放锁，否则也会等待，不去执行后面的代码。 . daemon线程 . from threading import Thread from time import sleep def threadFunc(): sleep(2) print(&#39;子线程 结束&#39;) thread = Thread(target=threadFunc) thread.start() print(&#39;主线程结束&#39;) . 可以发现，主线程先结束，要过个2秒钟，等子线程运行完，整个程序才会结束退出。 . 因为： . Python程序中当所有的 非daemon线程 结束了，整个程序才会结束 主线程是非daemon线程，启动的子线程缺省也是非daemon线程线程。 . 所以，要等到主线程和子线程都结束，程序才会结束。 . 我们可以在创建线程的时候，设置daemon参数值为True，如下 . from threading import Thread from time import sleep def threadFunc(): sleep(2) print(&#39;子线程 结束&#39;) thread = Thread(target=threadFunc, daemon=True # 设置新线程为daemon线程 ) thread.start() print(&#39;主线程结束&#39;) . 再次运行，可以发现，只要主线程结束了，整个程序就结束了。因为只有主线程是非daemon线程。 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/08/31/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%BA%BF%E7%A8%8B(%E9%80%9A%E7%94%A8).html",
            "relUrl": "/markdown/2020/08/31/%E5%88%9B%E5%BB%BA%E6%96%B0%E7%BA%BF%E7%A8%8B(%E9%80%9A%E7%94%A8).html",
            "date": " • Aug 31, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Matlab02(矩阵运算)",
            "content": "通过下标引用矩阵元素 . A(3,2)表示A矩阵第3行第2列的元素。 . 如若超出限制行列维数，自动扩展，未赋值的默认为0 . 通过序号来引用矩阵元素 . A(3)等同于A(1,2) . A(i,j)的序号为(j-1)×m+i . . . . . ps:A(:)可以将矩阵A的每一列元素堆叠起来，成为一个列向量。 . 运算 . 数值运算是矩阵运算的特殊形式 . .点运算是矩阵各个元素对应作运算 . 判断运算： . == 等于 . ~= 不等于 . 当参与比较的量是两个同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。 . 当参与比较的一个是标量，而另一个 是矩阵时，则把标量与矩阵的每一个元素按标量 关系运算规则逐个比较，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。 . 逻辑运算： . . 在算术运算、关系运算和逻辑运算中，算术运算的优先级最高，逻辑运算优先级最低，但逻辑非运算是单目运算，它的优先级比双目运算要高。 . ps:双目运算是有两个数参与运算。单目运算是只有一个数参与运算。a&amp;b是双目运算。~a是单目运算 . 若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。 . 若参与逻辑运算的一个是标量，一个是矩阵，那么将在标量与矩阵中的每个元素之间按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。 . 字符串的表示 . 字符串是用单引号括起来的字符序列 . 字符串占一行，可通过(:)索引，类似Python切片操作，但区间是前包后闭 . 若字符串包含单引号，用两个单引号表示一个单引号 . . 实战： . . 字符串的执行 . . . . . . 矩阵处理 . 1.通用的特殊矩阵 . . . 2.魔方矩阵 . . 3.范德蒙矩阵 . . 4.希尔伯特矩阵 . . . 5.伴随矩阵 . . . 6.帕斯卡矩阵 . . . 7.函数 . . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/07/02/Matlab02.html",
            "relUrl": "/markdown/2020/07/02/Matlab02.html",
            "date": " • Jul 2, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Matlab01(基础命令及函数)",
            "content": "基础命令 . 1.打开文件夹 . 命令行窗口输入 . cd 文件夹名 . 这里推荐先在文件管理器先创建后打开 . . 2.赋值变量会在工作区显示 . 可在命令行窗口输入whos 或 who 可以查看变量属性和具体参数 . . 3.清空数据 . clear . . 4.设置文件搜索路径 . . . 5.数字类型转换 . class()函数可得数字类型 . class(数字) . 整型转换 . int8() #转换成有符号的8位整型 . uint8() #转换成无符号的8位整型 . 浮点型转换 . 数值数据默认为双精度型，可使用 . single函数：single(数字)转换成单精度型 . double函数：double(数字)转换成双精度型 . 复型 . a+bi或a+bj . real函数：取复型实部数据 . image函数：取复型虚部数据 . format命令格式 . format long %输出长格式 format %输出短格式 format rat %输出有理数格式 . 这个不影响数据存储，只是表达方式不同 . ps:%是注释符号，按ctrl+R注释一行，ctrl+T取消一行注释 . . 6.常见函数 . 三角函数及取整函数 . . . . . 实战及其他函数 . . rem(除数,被除数)函数取余数 . . isprime(n)函数判断n是否为素数，当n是素数时返回1，否则返回0 . find()函数找寻数组中的序列号 . . . 7.预定义变量 . . . . 简单矩阵的建立 . 1.直接输入法 . A=[1,2,3;4,5,6;7,8,9] . . 2.小矩阵拼接成大矩阵 . A=[1,2,3;4,5,6;7,8,9] B=[-1,-2,3;-4,5,-6;-7,-8,-9] C=[A,B;B,A] . 效果图： . . . 3.用实部矩阵和虚部矩阵构成复数矩阵 . B=[1,2,3;4,5,6] C=[6,7,8;9,10,11] A=B+i*C . 效果图： . . . 冒号表达式 . . . 结构矩阵和单元矩阵 . . . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/07/01/Matlab01.html",
            "relUrl": "/markdown/2020/07/01/Matlab01.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "2019新型冠状病毒（COVID-19/2019-nCoV）疫情分析",
            "content": "&#37325;&#35201;&#35828;&#26126; . 分析文档：完成度：代码质量 3:5:2 . 其中分析文档是指你数据分析的过程中，对各问题分析的思路、对结果的解释、说明(要求言简意赅，不要为写而写) . ps:你自己写的代码胜过一切的代笔，无关美丑，只问今日比昨日更长进！加油！ . 由于数据过多，查看数据尽量使用head()或tail()，以免程序长时间无响应 . ======================= . 本项目数据来源于丁香园。本项目主要目的是通过对疫情历史数据的分析研究，以更好的了解疫情与疫情的发展态势，为抗击疫情之决策提供数据支持。 . &#19968;. &#25552;&#20986;&#38382;&#39064; . 从全国范围，你所在省市，国外疫情等三个方面主要研究以下几个问题： . （一）全国累计确诊/疑似/治愈/死亡情况随时间变化趋势如何？ . （二）全国新增确诊/疑似/治愈/死亡情况随时间变化趋势如何？ . （三）全国新增境外输入随时间变化趋势如何？ . （四）你所在的省市情况如何？ . （五）国外疫情态势如何？ . （六）结合你的分析结果，对个人和社会在抗击疫情方面有何建议？ . &#20108;. &#29702;&#35299;&#25968;&#25454; . 原始数据集：AreaInfo.csv，导入相关包及读取数据： . r_hex = &#39;#dc2624&#39; # red, RGB = 220,38,36 dt_hex = &#39;#2b4750&#39; # dark teal, RGB = 43,71,80 tl_hex = &#39;#45a0a2&#39; # teal, RGB = 69,160,162 r1_hex = &#39;#e87a59&#39; # red, RGB = 232,122,89 tl1_hex = &#39;#7dcaa9&#39; # teal, RGB = 125,202,169 g_hex = &#39;#649E7D&#39; # green, RGB = 100,158,125 o_hex = &#39;#dc8018&#39; # orange, RGB = 220,128,24 tn_hex = &#39;#C89F91&#39; # tan, RGB = 200,159,145 g50_hex = &#39;#6c6d6c&#39; # grey-50, RGB = 108,109,108 bg_hex = &#39;#4f6268&#39; # blue grey, RGB = 79,98,104 g25_hex = &#39;#c7cccf&#39; # grey-25, RGB = 199,204,207 . import numpy as np import pandas as pd import matplotlib,re import matplotlib.pyplot as plt from matplotlib.pyplot import MultipleLocator data = pd.read_csv(r&#39;data/AreaInfo.csv&#39;) . 查看与统计数据，以对数据有一个大致了解 . data.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 0 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 2306247 | 0.0 | 640198 | 120351 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 1106470 | 0.0 | 549386 | 51271 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 欧洲 | Europe | 英国 | United Kingdom | 英国 | United Kingdom | 961007 | 305289 | 0.0 | 539 | 42647 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 592280 | 0.0 | 344416 | 8206 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 南美洲 | South America | 智利 | Chile | 智利 | Chile | 973004 | 246963 | 0.0 | 44946 | 4502 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . &#19977;. &#25968;&#25454;&#28165;&#27927; . &#65288;&#19968;&#65289;&#22522;&#26412;&#25968;&#25454;&#22788;&#29702; . 数据清洗主要包括：选取子集，缺失数据处理、数据格式转换、异常值数据处理等。 . &#22269;&#20869;&#30123;&#24773;&#25968;&#25454;&#36873;&#21462;&#65288;&#26368;&#32456;&#36873;&#21462;&#30340;&#25968;&#25454;&#21629;&#21517;&#20026;china&#65289; . 选取国内疫情数据 . | 对于更新时间(updateTime)列，需将其转换为日期类型并提取出年-月-日，并查看处理结果。(提示：dt.date) . | 因数据每天按小时更新，一天之内有很多重复数据，请去重并只保留一天之内最新的数据。 . | 提示：df.drop_duplicates(subset=[&#39;provinceName&#39;, &#39;updateTime&#39;], keep=&#39;first&#39;, inplace=False) . 其中df是你选择的国内疫情数据的DataFrame . 分析：选取countryName一列中值为中国的行组成CHINA。 . CHINA = data.loc[data[&#39;countryName&#39;] == &#39;中国&#39;] CHINA.dropna(subset=[&#39;cityName&#39;], how=&#39;any&#39;, inplace=True) #CHINA . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . 分析：取出含所有中国城市的列表 . cities = list(set(CHINA[&#39;cityName&#39;])) . 分析：遍历取出每一个城市的子dataframe，然后用sort对updateTime进行时间排序 . for city in cities: CHINA.loc[data[&#39;cityName&#39;] == city].sort_values(by = &#39;updateTime&#39;) . 分析：去除空值所在行 . CHINA.dropna(subset=[&#39;cityName&#39;],inplace=True) #CHINA.loc[CHINA[&#39;cityName&#39;] == &#39;秦皇岛&#39;].tail(20) . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &#34;&#34;&#34;Entry point for launching an IPython kernel. . 分析：将CHINA中的updateTime列进行格式化处理 . CHINA.updateTime = pd.to_datetime(CHINA.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date #CHINA.loc[data[&#39;cityName&#39;] == &#39;秦皇岛&#39;].tail(15) . D: Anaconda envs python32 lib site-packages pandas core generic.py:5303: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self[name] = value . CHINA.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 136 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 境外输入 | NaN | 0.0 | 72.0 | 0.0 | 65.0 | 0.0 | . 137 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 西安 | Xi&#39;an | 610100.0 | 120.0 | 0.0 | 117.0 | 3.0 | . 138 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 安康 | Ankang | 610900.0 | 26.0 | 0.0 | 26.0 | 0.0 | . 139 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 汉中 | Hanzhong | 610700.0 | 26.0 | 0.0 | 26.0 | 0.0 | . 140 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 咸阳 | Xianyang | 610400.0 | 17.0 | 0.0 | 17.0 | 0.0 | . 分析：每日数据的去重只保留第一个数据，因为前面已经对时间进行排序，第一个数据即为当天最新数据 分析：考虑到合并dataframe需要用到concat，需要创建一个初始china . real = CHINA.loc[data[&#39;cityName&#39;] == cities[1]] real.drop_duplicates(subset=&#39;updateTime&#39;, keep=&#39;first&#39;, inplace=True) china = real . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . 分析：遍历每个城市dataframe进行每日数据的去重，否则会出现相同日期只保留一个城市的数据的情况 . for city in cities[2:]: real_data = CHINA.loc[data[&#39;cityName&#39;] == city] real_data.drop_duplicates(subset=&#39;updateTime&#39;, keep=&#39;first&#39;, inplace=True) china = pd.concat([real_data, china],sort=False) . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy This is separate from the ipykernel package so we can avoid doing imports until . 查看数据信息，是否有缺失数据/数据类型是否正确。 . 提示：若不会处理缺失值，可以将其舍弃 . 分析：有的城市不是每日都上报的，如果某日只统计上报的那些城市，那些存在患者却不上报的城市就会被忽略，数据就失真了，需要补全所有城市每日的数据，即便不上报的城市也要每日记录数据统计，所以要进行插值处理补全部分数据，处理方法详见数据透视与分析 . china.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 32812 entries, 96106 to 208267 Data columns (total 19 columns): # Column Non-Null Count Dtype -- -- 0 continentName 32812 non-null object 1 continentEnglishName 32812 non-null object 2 countryName 32812 non-null object 3 countryEnglishName 32812 non-null object 4 provinceName 32812 non-null object 5 provinceEnglishName 32812 non-null object 6 province_zipCode 32812 non-null int64 7 province_confirmedCount 32812 non-null int64 8 province_suspectedCount 32812 non-null float64 9 province_curedCount 32812 non-null int64 10 province_deadCount 32812 non-null int64 11 updateTime 32812 non-null object 12 cityName 32812 non-null object 13 cityEnglishName 31968 non-null object 14 city_zipCode 32502 non-null float64 15 city_confirmedCount 32812 non-null float64 16 city_suspectedCount 32812 non-null float64 17 city_curedCount 32812 non-null float64 18 city_deadCount 32812 non-null float64 dtypes: float64(6), int64(4), object(9) memory usage: 5.0+ MB . china.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 96106 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 254 | 0.0 | 252 | 2 | 2020-04-02 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 125120 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 254 | 0.0 | 250 | 2 | 2020-03-20 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 128762 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 253 | 0.0 | 250 | 2 | 2020-03-18 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 130607 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 253 | 0.0 | 248 | 2 | 2020-03-17 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 131428 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 252 | 0.0 | 248 | 2 | 2020-03-16 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . &#20320;&#25152;&#22312;&#30465;&#24066;&#30123;&#24773;&#25968;&#25454;&#36873;&#21462;&#65288;&#26368;&#32456;&#36873;&#21462;&#30340;&#25968;&#25454;&#21629;&#21517;&#20026;myhome&#65289; . 此步也可在后面用到的再做 . myhome = china.loc[data[&#39;provinceName&#39;] == &#39;广东省&#39;] myhome.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 205259 亚洲 | Asia | 中国 | China | 广东省 | Guangdong | 440000 | 277 | 0.0 | 5 | 0 | 2020-01-29 | 外地来粤人员 | NaN | NaN | 5.0 | 0.0 | 0.0 | 0.0 | . 206335 亚洲 | Asia | 中国 | China | 广东省 | Guangdong | 440000 | 207 | 0.0 | 4 | 0 | 2020-01-28 | 河源市 | NaN | NaN | 1.0 | 0.0 | 0.0 | 0.0 | . 205239 亚洲 | Asia | 中国 | China | 广东省 | Guangdong | 440000 | 277 | 0.0 | 5 | 0 | 2020-01-29 | 外地来穗人员 | NaN | NaN | 5.0 | 0.0 | 0.0 | 0.0 | . 252 亚洲 | Asia | 中国 | China | 广东省 | Guangdong | 440000 | 1634 | 11.0 | 1619 | 8 | 2020-06-23 | 潮州 | Chaozhou | 445100.0 | 6.0 | 0.0 | 6.0 | 0.0 | . 2655 亚洲 | Asia | 中国 | China | 广东省 | Guangdong | 440000 | 1634 | 11.0 | 1614 | 8 | 2020-06-21 | 潮州 | Chaozhou | 445100.0 | 6.0 | 0.0 | 6.0 | 0.0 | . &#22269;&#22806;&#30123;&#24773;&#25968;&#25454;&#36873;&#21462;&#65288;&#26368;&#32456;&#36873;&#21462;&#30340;&#25968;&#25454;&#21629;&#21517;&#20026;world&#65289; . 此步也可在后面用到的再做 . world = data.loc[data[&#39;countryName&#39;] != &#39;中国&#39;] world.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 0 北美洲 | North America | 美国 | United States of America | 美国 | United States of America | 971002 | 2306247 | 0.0 | 640198 | 120351 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 南美洲 | South America | 巴西 | Brazil | 巴西 | Brazil | 973003 | 1106470 | 0.0 | 549386 | 51271 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 欧洲 | Europe | 英国 | United Kingdom | 英国 | United Kingdom | 961007 | 305289 | 0.0 | 539 | 42647 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 欧洲 | Europe | 俄罗斯 | Russia | 俄罗斯 | Russia | 964006 | 592280 | 0.0 | 344416 | 8206 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 南美洲 | South America | 智利 | Chile | 智利 | Chile | 973004 | 246963 | 0.0 | 44946 | 4502 | 2020-06-23 10:01:45 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 数据透视与分析 . 分析：对china进行插值处理补全部分数据 . china.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 96106 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 254 | 0.0 | 252 | 2 | 2020-04-02 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 125120 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 254 | 0.0 | 250 | 2 | 2020-03-20 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 128762 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 253 | 0.0 | 250 | 2 | 2020-03-18 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 130607 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 253 | 0.0 | 248 | 2 | 2020-03-17 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 131428 亚洲 | Asia | 中国 | China | 广西壮族自治区 | Guangxi | 450000 | 252 | 0.0 | 248 | 2 | 2020-03-16 | 贵港 | Guigang | 450800.0 | 8.0 | 0.0 | 8.0 | 0.0 | . 分析：先创建省份列表和日期列表，并初始化一个draft . province = list(set(china[&#39;provinceName&#39;]))#每个省份 #p_city = list(set(china[china[&#39;provinceName&#39;] == province[0]][&#39;cityName&#39;]))#每个省份的城市 date_0 = [] for dt in china.loc[china[&#39;provinceName&#39;] == province[0]][&#39;updateTime&#39;]: date_0.append(str(dt)) date_0 = list(set(date_0)) date_0.sort() start = china.loc[china[&#39;provinceName&#39;] == province[0]][&#39;updateTime&#39;].min() end = china.loc[china[&#39;provinceName&#39;] == province[0]][&#39;updateTime&#39;].max() dates = pd.date_range(start=str(start), end=str(end)) aid_frame = pd.DataFrame({&#39;updateTime&#39;: dates,&#39;provinceName&#39;:[province[0]]*len(dates)}) aid_frame.updateTime = pd.to_datetime(aid_frame.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date #draft = pd.merge(china.loc[china[&#39;provinceName&#39;] == province[1]], aid_frame, on=&#39;updateTime&#39;, how=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) draft = pd.concat([china.loc[china[&#39;provinceName&#39;] == province[0]], aid_frame], join=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) draft.province_confirmedCount.fillna(method=&quot;ffill&quot;,inplace=True) draft.province_suspectedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft.province_curedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft.province_deadCount.fillna(method=&quot;ffill&quot;, inplace=True) . 分析：补全部分时间，取前日的数据进行插值，因为有的省份从4月末开始陆续就不再有新增病患，不再上报，所以这些省份的数据只能补全到4月末，往后的数据逐渐失去真实性 . 分析：同时进行日期格式化 . for p in range(1,len(province)): date_d = [] for dt in china.loc[china[&#39;provinceName&#39;] == province[p]][&#39;updateTime&#39;]: date_d.append(dt) date_d = list(set(date_d)) date_d.sort() start = china.loc[china[&#39;provinceName&#39;] == province[p]][&#39;updateTime&#39;].min() end = china.loc[china[&#39;provinceName&#39;] == province[p]][&#39;updateTime&#39;].max() dates = pd.date_range(start=start, end=end) aid_frame = pd.DataFrame({&#39;updateTime&#39;: dates,&#39;provinceName&#39;:[province[p]]*len(dates)}) aid_frame.updateTime = pd.to_datetime(aid_frame.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date X = china.loc[china[&#39;provinceName&#39;] == province[p]] X.reset_index(drop= True) Y = aid_frame Y.reset_index(drop= True) draft_d = pd.concat([X,Y], join=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) draft = pd.concat([draft,draft_d]) draft.province_confirmedCount.fillna(method=&quot;ffill&quot;,inplace=True) draft.province_suspectedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft.province_curedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft.province_deadCount.fillna(method=&quot;ffill&quot;, inplace=True) #draft[&#39;updateTime&#39;] = draft[&#39;updateTime&#39;].strftime(&#39;%Y-%m-%d&#39;) #draft[&#39;updateTime&#39;] = pd.to_datetime(draft[&#39;updateTime&#39;],format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date . china = draft . china.head() . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 208226 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 14.0 | 0.0 | 0.0 | 0.0 | 2020-01-26 | 外地来津 | NaN | NaN | 2.0 | 0.0 | 0.0 | 0.0 | . 208224 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 14.0 | 0.0 | 0.0 | 0.0 | 2020-01-26 | 河北区 | Hebei District | 120105.0 | 5.0 | 0.0 | 0.0 | 0.0 | . 208228 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 14.0 | 0.0 | 0.0 | 0.0 | 2020-01-26 | 和平区 | Heping District | 120101.0 | 1.0 | 0.0 | 0.0 | 0.0 | . 208227 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 14.0 | 0.0 | 0.0 | 0.0 | 2020-01-26 | 滨海新区 | Binhai New Area | 120116.0 | 1.0 | 0.0 | 0.0 | 0.0 | . 208230 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 14.0 | 0.0 | 0.0 | 0.0 | 2020-01-26 | 西青区 | Xiqing District | 120111.0 | 1.0 | 0.0 | 0.0 | 0.0 | . &#22235;. &#25968;&#25454;&#20998;&#26512;&#21450;&#21487;&#35270;&#21270; . 在进行数据分析及可视化时，依据每个问题选取所需变量并新建DataFrame再进行分析和可视化展示，这样数据不易乱且条理更清晰。 . &#22522;&#30784;&#20998;&#26512; . 基础分析，只允许使用numpy、pandas和matplotlib库。 . 可以在一张图上多个坐标系展示也可以在多张图上展示 . 请根据分析目的选择图形的类型(折线图、饼图、直方图和散点图等等)，实在没有主意可以到百度疫情地图或其他疫情分析的站点激发激发灵感。 . &#65288;&#19968;&#65289;&#20840;&#22269;&#32047;&#35745;&#30830;&#35786;/&#30097;&#20284;/&#27835;&#24840;/&#27515;&#20129;&#24773;&#20917;&#38543;&#26102;&#38388;&#21464;&#21270;&#36235;&#21183;&#22914;&#20309;&#65311; . 分析：要获得全国累计情况随时间变化趋势，首先需要整合每日全国累计确诊情况做成date_confirmed . 分析：要整合每日全国累计确诊情况，首先得提取每个省份每日当天最新累计确诊人数，省份数据求和后形成dataframe， for循环拼接到date_confirmed中 . date = list(set(china[&#39;updateTime&#39;])) date.sort() date . [datetime.date(2020, 1, 24), datetime.date(2020, 1, 25), datetime.date(2020, 1, 26), datetime.date(2020, 1, 27), datetime.date(2020, 1, 28), datetime.date(2020, 1, 29), datetime.date(2020, 1, 30), datetime.date(2020, 1, 31), datetime.date(2020, 2, 1), datetime.date(2020, 2, 2), datetime.date(2020, 2, 3), datetime.date(2020, 2, 4), datetime.date(2020, 2, 5), datetime.date(2020, 2, 6), datetime.date(2020, 2, 7), datetime.date(2020, 2, 8), datetime.date(2020, 2, 9), datetime.date(2020, 2, 10), datetime.date(2020, 2, 11), datetime.date(2020, 2, 12), datetime.date(2020, 2, 13), datetime.date(2020, 2, 14), datetime.date(2020, 2, 15), datetime.date(2020, 2, 16), datetime.date(2020, 2, 17), datetime.date(2020, 2, 18), datetime.date(2020, 2, 19), datetime.date(2020, 2, 20), datetime.date(2020, 2, 21), datetime.date(2020, 2, 22), datetime.date(2020, 2, 23), datetime.date(2020, 2, 24), datetime.date(2020, 2, 25), datetime.date(2020, 2, 26), datetime.date(2020, 2, 27), datetime.date(2020, 2, 28), datetime.date(2020, 2, 29), datetime.date(2020, 3, 1), datetime.date(2020, 3, 2), datetime.date(2020, 3, 3), datetime.date(2020, 3, 4), datetime.date(2020, 3, 5), datetime.date(2020, 3, 6), datetime.date(2020, 3, 7), datetime.date(2020, 3, 8), datetime.date(2020, 3, 9), datetime.date(2020, 3, 10), datetime.date(2020, 3, 11), datetime.date(2020, 3, 12), datetime.date(2020, 3, 13), datetime.date(2020, 3, 14), datetime.date(2020, 3, 15), datetime.date(2020, 3, 16), datetime.date(2020, 3, 17), datetime.date(2020, 3, 18), datetime.date(2020, 3, 19), datetime.date(2020, 3, 20), datetime.date(2020, 3, 21), datetime.date(2020, 3, 22), datetime.date(2020, 3, 23), datetime.date(2020, 3, 24), datetime.date(2020, 3, 25), datetime.date(2020, 3, 26), datetime.date(2020, 3, 27), datetime.date(2020, 3, 28), datetime.date(2020, 3, 29), datetime.date(2020, 3, 30), datetime.date(2020, 3, 31), datetime.date(2020, 4, 1), datetime.date(2020, 4, 2), datetime.date(2020, 4, 3), datetime.date(2020, 4, 4), datetime.date(2020, 4, 5), datetime.date(2020, 4, 6), datetime.date(2020, 4, 7), datetime.date(2020, 4, 8), datetime.date(2020, 4, 9), datetime.date(2020, 4, 10), datetime.date(2020, 4, 11), datetime.date(2020, 4, 12), datetime.date(2020, 4, 13), datetime.date(2020, 4, 14), datetime.date(2020, 4, 15), datetime.date(2020, 4, 16), datetime.date(2020, 4, 17), datetime.date(2020, 4, 18), datetime.date(2020, 4, 19), datetime.date(2020, 4, 20), datetime.date(2020, 4, 21), datetime.date(2020, 4, 22), datetime.date(2020, 4, 23), datetime.date(2020, 4, 24), datetime.date(2020, 4, 25), datetime.date(2020, 4, 26), datetime.date(2020, 4, 27), datetime.date(2020, 4, 28), datetime.date(2020, 4, 29), datetime.date(2020, 4, 30), datetime.date(2020, 5, 1), datetime.date(2020, 5, 2), datetime.date(2020, 5, 3), datetime.date(2020, 5, 4), datetime.date(2020, 5, 5), datetime.date(2020, 5, 6), datetime.date(2020, 5, 7), datetime.date(2020, 5, 8), datetime.date(2020, 5, 9), datetime.date(2020, 5, 10), datetime.date(2020, 5, 11), datetime.date(2020, 5, 12), datetime.date(2020, 5, 13), datetime.date(2020, 5, 14), datetime.date(2020, 5, 15), datetime.date(2020, 5, 16), datetime.date(2020, 5, 17), datetime.date(2020, 5, 18), datetime.date(2020, 5, 19), datetime.date(2020, 5, 20), datetime.date(2020, 5, 21), datetime.date(2020, 5, 22), datetime.date(2020, 5, 23), datetime.date(2020, 5, 24), datetime.date(2020, 5, 25), datetime.date(2020, 5, 26), datetime.date(2020, 5, 27), datetime.date(2020, 5, 28), datetime.date(2020, 5, 29), datetime.date(2020, 5, 30), datetime.date(2020, 5, 31), datetime.date(2020, 6, 1), datetime.date(2020, 6, 2), datetime.date(2020, 6, 3), datetime.date(2020, 6, 4), datetime.date(2020, 6, 5), datetime.date(2020, 6, 6), datetime.date(2020, 6, 7), datetime.date(2020, 6, 8), datetime.date(2020, 6, 9), datetime.date(2020, 6, 10), datetime.date(2020, 6, 11), datetime.date(2020, 6, 12), datetime.date(2020, 6, 13), datetime.date(2020, 6, 14), datetime.date(2020, 6, 15), datetime.date(2020, 6, 16), datetime.date(2020, 6, 17), datetime.date(2020, 6, 18), datetime.date(2020, 6, 19), datetime.date(2020, 6, 20), datetime.date(2020, 6, 21), datetime.date(2020, 6, 22), datetime.date(2020, 6, 23)] . china = china.set_index(&#39;provinceName&#39;) china = china.reset_index() . 分析：循环遍历省份和日期获得每个省份每日累计确诊，因为需要拼接，先初始化一个date_confirmed . list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_confirmedCount&#39;])#该日每省的累计确诊人数 except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_confirmed = pd.DataFrame(list_d,index=list_e) date_confirmed.index.name=&quot;date&quot; date_confirmed.columns=[&quot;China_confirmedCount&quot;] date_confirmed . China_confirmedCount . date . 2020-01-24 1956.0 | . 分析：遍历每个省份拼接每日的总确诊人数的dataframe . l = 0 for i in date[3:]: list_p = [] list_d = [] list_e = [] l +=1 for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[l]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_confirmedCount&#39;])#该日每省的累计确诊人数 except: continue #con_0 = china.loc[china[&#39;updateTime&#39;] == date[0]].loc[china[&#39;provinceName&#39;] == &#39;河北省&#39;].loc[[0]].iloc[0] #list_p.append(con_0[&#39;province_confirmedCount&#39;])#该日每省的累计确诊人数 list_d.append(sum(list_p)) list_e.append(str(date[l])) confirmed = pd.DataFrame(list_d, index=list_e) confirmed.index.name=&quot;date&quot; confirmed.columns=[&quot;China_confirmedCount&quot;] date_confirmed = pd.concat([date_confirmed,confirmed],sort=False) date_confirmed . China_confirmedCount . date . 2020-01-24 1956.0 | . 2020-01-25 2253.0 | . 2020-01-26 1956.0 | . 2020-01-27 2825.0 | . 2020-01-28 4589.0 | . ... ... | . 2020-06-17 8106.0 | . 2020-06-18 6862.0 | . 2020-06-19 6894.0 | . 2020-06-20 6921.0 | . 2020-06-21 6157.0 | . 150 rows × 1 columns . 分析：去除空值和不全的值 . date_confirmed.dropna(subset=[&#39;China_confirmedCount&#39;],inplace=True) date_confirmed.tail(20) . China_confirmedCount . date . 2020-06-02 78782.0 | . 2020-06-03 78780.0 | . 2020-06-04 76903.0 | . 2020-06-05 76908.0 | . 2020-06-06 8777.0 | . 2020-06-07 8782.0 | . 2020-06-08 8628.0 | . 2020-06-09 8634.0 | . 2020-06-10 8638.0 | . 2020-06-11 8649.0 | . 2020-06-12 8658.0 | . 2020-06-13 8665.0 | . 2020-06-14 8733.0 | . 2020-06-15 8772.0 | . 2020-06-16 8055.0 | . 2020-06-17 8106.0 | . 2020-06-18 6862.0 | . 2020-06-19 6894.0 | . 2020-06-20 6921.0 | . 2020-06-21 6157.0 | . 分析：数据从4月末开始到5月末就因为缺失过多省份的数据(部分省份从4月末至今再也没有新增病患)而失真，自2020-06-06起完全失去真实性，所以我删除了2020-06-06往后的数据 . date_confirmed = date_confirmed.drop([&#39;2020-06-06&#39;,&#39;2020-06-07&#39;,&#39;2020-06-08&#39;,&#39;2020-06-09&#39;,&#39;2020-06-10&#39;,&#39;2020-06-11&#39;,&#39;2020-06-12&#39;,&#39;2020-06-13&#39;,&#39;2020-06-14&#39;, &#39;2020-06-15&#39;,&#39;2020-06-16&#39;,&#39;2020-06-19&#39;,&#39;2020-06-18&#39;,&#39;2020-06-20&#39;,&#39;2020-06-17&#39;,&#39;2020-06-21&#39;]) . 分析：构造拼接函数 . def data_frame(self,china,element): l = 0 for i in date[3:]: list_p = [] list_d = [] list_e = [] l +=1 for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[l]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[element]) except: continue #con_0 = china.loc[china[&#39;updateTime&#39;] == date[0]].loc[china[&#39;provinceName&#39;] == &#39;河北省&#39;].loc[[0]].iloc[0] #list_p.append(con_0[&#39;province_confirmedCount&#39;]) list_d.append(sum(list_p)) list_e.append(str(date[l])) link = pd.DataFrame(list_d, index=list_e) link.index.name=&quot;date&quot; link.columns=[&quot;China&quot;] self = pd.concat([self,link],sort=False) self.dropna(subset=[&#39;China&#39;],inplace=True) self = self.drop([&#39;2020-06-06&#39;,&#39;2020-06-07&#39;,&#39;2020-06-08&#39;,&#39;2020-06-09&#39;,&#39;2020-06-10&#39;,&#39;2020-06-11&#39;,&#39;2020-06-12&#39;,&#39;2020-06-13&#39;,&#39;2020-06-14&#39;, &#39;2020-06-15&#39;,&#39;2020-06-16&#39;,&#39;2020-06-19&#39;,&#39;2020-06-18&#39;,&#39;2020-06-20&#39;,&#39;2020-06-17&#39;,&#39;2020-06-21&#39;]) return self . 分析：初始化各个变量 . list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_curedCount&#39;]) except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_cured = pd.DataFrame(list_d, index=list_e) date_cured.index.name=&quot;date&quot; date_cured.columns=[&quot;China&quot;] #累计死亡人数 date_dead list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_deadCount&#39;]) except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_dead = pd.DataFrame(list_d, index=list_e) date_dead.index.name=&quot;date&quot; date_dead.columns=[&quot;China&quot;] . plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;] #更改字体,否则无法显示汉字 fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = date_confirmed.index y = date_confirmed.values ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_title(&#39;累计确诊患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.set_xticks( range(0,len(x),30)) . [&lt;matplotlib.axis.XTick at 0x255520e4908&gt;, &lt;matplotlib.axis.XTick at 0x255520e49e8&gt;, &lt;matplotlib.axis.XTick at 0x255520af048&gt;, &lt;matplotlib.axis.XTick at 0x2555216b0b8&gt;, &lt;matplotlib.axis.XTick at 0x2555216b4e0&gt;] . date_cured = data_frame(date_cured,china,&#39;province_curedCount&#39;) fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = date_cured.index y = date_cured.values ax.set_title(&#39;累计治愈患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_xticks( range(0,len(x),30)) . [&lt;matplotlib.axis.XTick at 0x25550ef60f0&gt;, &lt;matplotlib.axis.XTick at 0x255521cd0b8&gt;, &lt;matplotlib.axis.XTick at 0x255521b7780&gt;, &lt;matplotlib.axis.XTick at 0x2555208ffd0&gt;, &lt;matplotlib.axis.XTick at 0x2555208f0f0&gt;] . 分析：累计疑似无法通过补全数据得到 . date_dead = data_frame(date_dead,china,&#39;province_deadCount&#39;) fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = date_dead.index y = date_dead.values ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) x_major_locator=MultipleLocator(12) ax=plt.gca() ax.set_title(&#39;累计死亡患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.xaxis.set_major_locator(x_major_locator) ax.set_xticks( range(0,len(x),30)) . [&lt;matplotlib.axis.XTick at 0x255521fda90&gt;, &lt;matplotlib.axis.XTick at 0x255521fda58&gt;, &lt;matplotlib.axis.XTick at 0x25552a51550&gt;, &lt;matplotlib.axis.XTick at 0x25552a75470&gt;, &lt;matplotlib.axis.XTick at 0x25552a75908&gt;] . 分析：疫情自1月初开始爆发，到2月末开始减缓增速，到4月末趋于平缓。治愈人数自2月初开始大幅增加，到3月末趋于平缓，死亡人数自1月末开始增加，到2月末趋于平缓，到4月末因为统计因素死亡人数飙升后趋于平缓。 分析总结：确诊人数数据和治愈数据从4月末开始到5月末就因为缺失过多省份的数据(部分省份至今再也没有新增病患)导致失真，其他数据尽量通过补全,越靠近尾部数据越失真。死亡数据补全较为成功，几乎没有错漏。 . &#65288;&#20108;&#65289;&#20840;&#22269;&#26032;&#22686;&#30830;&#35786;/&#30097;&#20284;/&#27835;&#24840;/&#27515;&#20129;&#24773;&#20917;&#38543;&#26102;&#38388;&#21464;&#21270;&#36235;&#21183;&#22914;&#20309;&#65311; . 分析：新增确诊/治愈/死亡的数据需要对china进行运算，每省每日进行diff差值运算 . 分析：首先初始化各个数据，然后仿照上面的拼接函数，作适用于该题的拼接函数 . list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_confirmedCount&#39;])#该日每省的累计确诊人数 except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_new_confirmed = pd.DataFrame(list_d,index=list_e) date_new_confirmed.index.name=&quot;date&quot; date_new_confirmed.columns=[&quot;China&quot;] date_new_confirmed #新增治愈人数 date_new_curedCount list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_curedCount&#39;]) except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_new_cured = pd.DataFrame(list_d, index=list_e) date_new_cured.index.name=&quot;date&quot; date_new_cured.columns=[&quot;China&quot;] #新增死亡人数 date_new_dead list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[2]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;province_deadCount&#39;]) except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_new_dead = pd.DataFrame(list_d, index=list_e) date_new_dead.index.name=&quot;date&quot; date_new_dead.columns=[&quot;China&quot;] . 分析：构造拼接函数 . def data_new_frame(self,china,element): l = 0 for i in date[3:]: list_p = [] list_d = [] list_e = [] l +=1 for p in range(0,32): try: con_0 = china.loc[china[&#39;updateTime&#39;] == date[l]].loc[china[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[element]) except: continue #con_0 = china.loc[china[&#39;updateTime&#39;] == date[0]].loc[china[&#39;provinceName&#39;] == &#39;河北省&#39;].loc[[0]].iloc[0] #list_p.append(con_0[&#39;province_confirmedCount&#39;]) list_d.append(sum(list_p)) list_e.append(str(date[l])) link = pd.DataFrame(list_d, index=list_e) link.index.name=&quot;date&quot; link.columns=[&quot;China&quot;] self = pd.concat([self,link],sort=False) self.dropna(subset=[&#39;China&#39;],inplace=True) return self . 分析：数据补全以及去除含缺失省份的数据 . d = data_new_frame(date_new_confirmed,china,&#39;province_confirmedCount&#39;) for i in range(len(d)): dr = [] for a,b in zip(range(0,len(d)-1),range(1,len(d)-2)): if d.iloc[b].iloc[0] &lt; d.iloc[a].iloc[0]: dr.append(d.iloc[b].iloc[0]) d = d[~d[&#39;China&#39;].isin(dr)] . 分析：做差值运算 . d[&#39;China&#39;] = d[&#39;China&#39;].diff() . 分析：去除两个含缺失省份的日期 . d.drop([&#39;2020-06-20&#39;,&#39;2020-06-21&#39;],inplace=True) . 分析：作折线图表现时间趋势 . fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = d.index y = d.values ax.set_title(&#39;新增确诊患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_xticks( range(0,len(x),10)) . [&lt;matplotlib.axis.XTick at 0x25552a9c898&gt;, &lt;matplotlib.axis.XTick at 0x25552a9c860&gt;, &lt;matplotlib.axis.XTick at 0x25552ab7550&gt;, &lt;matplotlib.axis.XTick at 0x25552ad50f0&gt;, &lt;matplotlib.axis.XTick at 0x25552ad5518&gt;, &lt;matplotlib.axis.XTick at 0x25552ad59b0&gt;, &lt;matplotlib.axis.XTick at 0x25552ad5e48&gt;, &lt;matplotlib.axis.XTick at 0x25552adc320&gt;] . 分析：使用初始化数据构造date_new_cured的dataframe，然后作折线图表现时间趋势 . cu = data_new_frame(date_new_cured,china,&#39;province_curedCount&#39;) for i in range(len(cu)): dr = [] for a,b in zip(range(0,len(cu)-1),range(1,len(cu)-2)): if cu.iloc[b].iloc[0] &lt; cu.iloc[a].iloc[0]: dr.append(cu.iloc[b].iloc[0]) cu = cu[~cu[&#39;China&#39;].isin(dr)] cu[&#39;China&#39;] = cu[&#39;China&#39;].diff() cu.drop([&#39;2020-06-20&#39;,&#39;2020-06-21&#39;],inplace=True) #新增治愈患者 date_new_cured fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = cu.index y = cu.values ax.set_title(&#39;新增治愈患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_xticks( range(0,len(x),10)) . [&lt;matplotlib.axis.XTick at 0x25552b13b00&gt;, &lt;matplotlib.axis.XTick at 0x25552b13ac8&gt;, &lt;matplotlib.axis.XTick at 0x25552b137b8&gt;, &lt;matplotlib.axis.XTick at 0x25552b3f470&gt;, &lt;matplotlib.axis.XTick at 0x25552b3f908&gt;, &lt;matplotlib.axis.XTick at 0x25552b3fda0&gt;, &lt;matplotlib.axis.XTick at 0x25552b47278&gt;] . 分析：使用初始化数据构造date_new_dead的dataframe，然后作折线图表现时间趋势 . de = data_new_frame( date_new_dead,china,&#39;province_deadCount&#39;) for i in range(len(de)): dr = [] for a,b in zip(range(0,len(de)-1),range(1,len(de)-2)): if de.iloc[b].iloc[0] &lt; de.iloc[a].iloc[0]: dr.append(de.iloc[b].iloc[0]) de = de[~de[&#39;China&#39;].isin(dr)] de[&#39;China&#39;] = de[&#39;China&#39;].diff() de.drop([&#39;2020-06-21&#39;],inplace=True) #新增死亡患者 date_new_dead fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = de.index y = de.values ax.set_title(&#39;新增死亡患者&#39;,fontdict={ &#39;color&#39;:&#39;black&#39;, &#39;size&#39;:24 }) ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_xticks( range(0,len(x),10)) . [&lt;matplotlib.axis.XTick at 0x25553bdfd30&gt;, &lt;matplotlib.axis.XTick at 0x25553bdfcf8&gt;, &lt;matplotlib.axis.XTick at 0x25553c01f60&gt;, &lt;matplotlib.axis.XTick at 0x25553c146a0&gt;, &lt;matplotlib.axis.XTick at 0x25553c14b38&gt;, &lt;matplotlib.axis.XTick at 0x25553c14d68&gt;, &lt;matplotlib.axis.XTick at 0x25553c1b4a8&gt;, &lt;matplotlib.axis.XTick at 0x25553c1b940&gt;, &lt;matplotlib.axis.XTick at 0x25553c1bdd8&gt;] . 分析：新增患者自1月末开始增加，到2月14日前后到达顶点，后增数下降，趋于平缓。 分析：新增治愈患者自1月末开始增加，到3月02日前后达到顶峰，后增数下降，从4月初开始趋于平缓。 分析：新增死亡患者自1月末开始增加，到2月达到高峰，自3月初开始增数平缓，到4月17日前后因为统计因素飙升后回落。 . &#65288;&#19977;&#65289;&#20840;&#22269;&#26032;&#22686;&#22659;&#22806;&#36755;&#20837;&#38543;&#26102;&#38388;&#21464;&#21270;&#36235;&#21183;&#22914;&#20309;&#65311; . 分析：新增境外输入数据需要对CHINA进行运算，逐日相减。 . 分析：先从CHINA取出境外输入的数据，然后补全时间序列并作差。 . imported = CHINA.loc[CHINA[&#39;cityName&#39;] == &#39;境外输入&#39;] imported.updateTime = pd.to_datetime(imported.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date imported . D: Anaconda envs python32 lib site-packages pandas core generic.py:5303: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self[name] = value . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 136 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 317 | 1.0 | 307 | 3 | 2020-06-23 | 境外输入 | NaN | 0.0 | 72.0 | 0.0 | 65.0 | 0.0 | . 150 亚洲 | Asia | 中国 | China | 江苏省 | Jiangsu | 320000 | 654 | 3.0 | 653 | 0 | 2020-06-23 | 境外输入 | NaN | 0.0 | 23.0 | 0.0 | 22.0 | 0.0 | . 201 亚洲 | Asia | 中国 | China | 北京市 | Beijing | 110000 | 843 | 164.0 | 584 | 9 | 2020-06-23 | 境外输入 | NaN | 0.0 | 174.0 | 3.0 | 173.0 | 0.0 | . 214 亚洲 | Asia | 中国 | China | 河北省 | Hebei | 130000 | 346 | 0.0 | 323 | 6 | 2020-06-23 | 境外输入 | NaN | 0.0 | 10.0 | 0.0 | 10.0 | 0.0 | . 218 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000 | 198 | 48.0 | 192 | 3 | 2020-06-23 | 境外输入 | NaN | 0.0 | 61.0 | 0.0 | 59.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 115420 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000 | 250 | 1.0 | 240 | 3 | 2020-03-25 | 境外输入 | NaN | 0.0 | 5.0 | 1.0 | 0.0 | 0.0 | . 115956 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000 | 145 | 0.0 | 133 | 3 | 2020-03-24 | 境外输入 | NaN | 0.0 | 9.0 | 0.0 | 0.0 | 0.0 | . 116164 亚洲 | Asia | 中国 | China | 甘肃省 | Gansu | 620000 | 136 | 0.0 | 119 | 2 | 2020-03-24 | 境外输入 | NaN | 0.0 | 45.0 | 0.0 | 30.0 | 0.0 | . 117171 亚洲 | Asia | 中国 | China | 上海市 | Shanghai | 310000 | 414 | 0.0 | 330 | 4 | 2020-03-24 | 境外输入 | NaN | 0.0 | 75.0 | 0.0 | 3.0 | 0.0 | . 117597 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000 | 142 | 0.0 | 133 | 3 | 2020-03-24 | 境外输入 | NaN | 0.0 | 6.0 | 0.0 | 0.0 | 0.0 | . 607 rows × 19 columns . 分析：补全省份缺失时间的数据 . for i in range(0,len(province)): list_j_d = [] date_b = [] for dt in imported.loc[imported[&#39;provinceName&#39;] == province[i]][&#39;updateTime&#39;]: date_b.append(str(dt)) list_j_d = list(set(date_b)) list_j_d.sort() #imported.loc[imported[&#39;provinceName&#39;] == province[3]] try: start = imported.loc[imported[&#39;provinceName&#39;] == province[i]][&#39;updateTime&#39;].min() end = imported.loc[imported[&#39;provinceName&#39;] == province[i]][&#39;updateTime&#39;].max() dates_b = pd.date_range(start=str(start), end=str(end)) aid_frame_b = pd.DataFrame({&#39;updateTime&#39;: dates_b,&#39;provinceName&#39;:[province[i]]*len(dates_b)}) aid_frame_b.updateTime = pd.to_datetime(aid_frame_b.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date #draft = pd.merge(china.loc[china[&#39;provinceName&#39;] == province[1]], aid_frame, on=&#39;updateTime&#39;, how=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) draft_b = pd.concat([imported.loc[imported[&#39;provinceName&#39;] == province[i]], aid_frame_b], join=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) draft_b.city_confirmedCount.fillna(method=&quot;ffill&quot;,inplace=True) draft_b.city_suspectedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft_b.city_curedCount.fillna(method=&quot;ffill&quot;, inplace=True) draft_b.city_deadCount.fillna(method=&quot;ffill&quot;, inplace=True) draft_b.loc[draft_b[&#39;provinceName&#39;] == province[i]].fillna(0,inplace=True,limit = 1) draft_b.loc[draft_b[&#39;provinceName&#39;] == province[i]].loc[:,&#39;city_confirmedCount&#39;:&#39;city_deadCount&#39;] = draft_b.loc[draft_b[&#39;provinceName&#39;] == province[i]].loc[:,&#39;city_confirmedCount&#39;:&#39;city_deadCount&#39;].diff() draft_b.dropna(subset=[&#39;city_confirmedCount&#39;,&#39;city_suspectedCount&#39;,&#39;city_curedCount&#39;,&#39;city_deadCount&#39;],inplace=True) imported = pd.concat([imported,draft_b], join=&#39;outer&#39;).sort_values(&#39;updateTime&#39;) except: continue imported . continentName continentEnglishName countryName countryEnglishName provinceName provinceEnglishName province_zipCode province_confirmedCount province_suspectedCount province_curedCount province_deadCount updateTime cityName cityEnglishName city_zipCode city_confirmedCount city_suspectedCount city_curedCount city_deadCount . 115956 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 145.0 | 0.0 | 133.0 | 3.0 | 2020-03-24 | 境外输入 | NaN | 0.0 | 9.0 | 0.0 | 0.0 | 0.0 | . 0 NaN | NaN | NaN | NaN | 甘肃省 | NaN | NaN | NaN | NaN | NaN | NaN | 2020-03-24 | NaN | NaN | NaN | 45.0 | 0.0 | 30.0 | 0.0 | . 117597 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 142.0 | 0.0 | 133.0 | 3.0 | 2020-03-24 | 境外输入 | NaN | 0.0 | 6.0 | 0.0 | 0.0 | 0.0 | . 117597 亚洲 | Asia | 中国 | China | 天津市 | Tianjin | 120000.0 | 142.0 | 0.0 | 133.0 | 3.0 | 2020-03-24 | 境外输入 | NaN | 0.0 | 6.0 | 0.0 | 0.0 | 0.0 | . 116164 亚洲 | Asia | 中国 | China | 甘肃省 | Gansu | 620000.0 | 136.0 | 0.0 | 119.0 | 2.0 | 2020-03-24 | 境外输入 | NaN | 0.0 | 45.0 | 0.0 | 30.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 150 亚洲 | Asia | 中国 | China | 江苏省 | Jiangsu | 320000.0 | 654.0 | 3.0 | 653.0 | 0.0 | 2020-06-23 | 境外输入 | NaN | 0.0 | 23.0 | 0.0 | 22.0 | 0.0 | . 136 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000.0 | 317.0 | 1.0 | 307.0 | 3.0 | 2020-06-23 | 境外输入 | NaN | 0.0 | 72.0 | 0.0 | 65.0 | 0.0 | . 91 NaN | NaN | NaN | NaN | 天津市 | NaN | NaN | NaN | NaN | NaN | NaN | 2020-06-23 | NaN | NaN | NaN | 61.0 | 0.0 | 59.0 | 0.0 | . 136 亚洲 | Asia | 中国 | China | 陕西省 | Shaanxi | 610000.0 | 317.0 | 1.0 | 307.0 | 3.0 | 2020-06-23 | 境外输入 | NaN | 0.0 | 72.0 | 0.0 | 65.0 | 0.0 | . 201 亚洲 | Asia | 中国 | China | 北京市 | Beijing | 110000.0 | 843.0 | 164.0 | 584.0 | 9.0 | 2020-06-23 | 境外输入 | NaN | 0.0 | 174.0 | 3.0 | 173.0 | 0.0 | . 2524 rows × 19 columns . 分析：作copy()防止数据处理失误使得原数据丢失 . draft_i = imported.copy() . 分析：初始化一个省份数据，保证这个方法可行 . real_s = imported.loc[imported[&#39;provinceName&#39;] == province[0]] real_s.drop_duplicates(subset=&#39;updateTime&#39;, keep=&#39;first&#39;, inplace=True) draft_i = real_s for p in province: real_data = imported.loc[imported[&#39;provinceName&#39;] == p] real_data.drop_duplicates(subset=&#39;updateTime&#39;, keep=&#39;first&#39;, inplace=True) #imported = pd.concat([real_data, china],sort=False) draft_i = pd.concat([real_data,draft_i],sort=False) . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:2: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:6: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy . 分析：确认方法无误，对余下省份进行相同的处理 . imported = draft_i . imported = imported.set_index(&#39;provinceName&#39;) imported = imported.reset_index() . 分析：进行各个省份的数据合并。 . list_p = [] list_d = [] list_e = [] for p in range(0,32): try: con_0 = imported.loc[imported[&#39;updateTime&#39;] == date[2]].loc[imported[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;city_confirmedCount&#39;])#该日每省的累计确诊人数 except: continue list_d.append(sum(list_p)) list_e.append(str(date[0])) date_new_foreign_confirmed = pd.DataFrame(list_d,index=list_e) date_new_foreign_confirmed.index.name=&quot;date&quot; date_new_foreign_confirmed.columns=[&quot;imported_confirmedCount&quot;] date_new_foreign_confirmed . imported_confirmedCount . date . 2020-01-24 0 | . l = 0 for i in date[3:]: list_p = [] list_d = [] list_e = [] l +=1 for p in range(0,32): try: con_0 = imported.loc[imported[&#39;updateTime&#39;] == date[l]].loc[imported[&#39;provinceName&#39;] == province[p]].iloc[[0]].iloc[0] list_p.append(con_0[&#39;city_confirmedCount&#39;])#该日每省的累计确诊人数 except: continue #con_0 = imported.loc[imported[&#39;updateTime&#39;] == date[0]].loc[imported[&#39;provinceName&#39;] == &#39;河北省&#39;].loc[[0]].iloc[0] #list_p.append(con_0[&#39;city_confirmedCount&#39;])#该日每省的累计确诊人数 list_d.append(sum(list_p)) list_e.append(str(date[l])) confirmed = pd.DataFrame(list_d, index=list_e) confirmed.index.name=&quot;date&quot; confirmed.columns=[&quot;imported_confirmedCount&quot;] date_new_foreign_confirmed = pd.concat([date_new_foreign_confirmed,confirmed],sort=False) date_new_foreign_confirmed . imported_confirmedCount . date . 2020-01-24 0.0 | . 2020-01-25 0.0 | . 2020-01-26 0.0 | . 2020-01-27 0.0 | . 2020-01-28 0.0 | . ... ... | . 2020-06-17 848.0 | . 2020-06-18 800.0 | . 2020-06-19 800.0 | . 2020-06-20 802.0 | . 2020-06-21 775.0 | . 150 rows × 1 columns . fig = plt.figure( figsize=(16,4), dpi=100) ax = fig.add_subplot(1,1,1) x = date_new_foreign_confirmed.index y = date_new_foreign_confirmed.values plot = ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;date_new_foreign_confirmed&#39; ) ax.set_xticks( range(0,len(x),10)) plt.xlabel(&#39;日期&#39;,fontsize=20) plt.ylabel(&#39;人数&#39;,fontsize=20) plt.title(&#39;COVID-19——新增境外输入&#39;,fontsize=30) ax.legend( loc=0, frameon=True ) . &lt;matplotlib.legend.Legend at 0x25553ca5f28&gt; . 分析总结：境外输入病例自3月末开始激增，到5月初增速趋于平缓，到6月初开始增速减缓。 . &#65288;&#22235;&#65289;&#20320;&#25152;&#22312;&#30340;&#30465;&#24066;&#24773;&#20917;&#22914;&#20309;&#65311; . 分析：首先取出广东省的所有时间序列,转换成string类型,然后进行排序 . m_dates = list(set(myhome[&#39;updateTime&#39;])) aid_d = m_dates.copy() for d in aid_d: a = str(d) m_dates.remove(d) m_dates.append(a) m_dates.sort() . myhome = myhome.set_index(&#39;provinceName&#39;) myhome = myhome.reset_index() . 分析：遍历我的城市对应的省份的时间构建对应的dataframe . list_g = [] for i in range(0,len(m_dates)): try: con_m = myhome.loc[myhome[&#39;updateTime&#39;] == date[i]].loc[myhome[&#39;cityName&#39;] == &#39;茂名&#39;].iloc[[0]].iloc[0] list_g.append(con_m[&#39;province_confirmedCount&#39;]) except: list_g.append(0) continue g_date_confirmed = pd.DataFrame(list_g, index=m_dates) g_date_confirmed.index.name=&quot;date&quot; g_date_confirmed.columns=[&quot;g_confirmed&quot;] g_date_confirmed=g_date_confirmed[~g_date_confirmed[&#39;g_confirmed&#39;].isin([0])] #广东省累计治愈人数 list_g = [] for i in range(0,len(m_dates)): try: con_m = myhome.loc[myhome[&#39;updateTime&#39;] == date[i]].loc[myhome[&#39;cityName&#39;] == &#39;茂名&#39;].iloc[[0]].iloc[0] list_g.append(con_m[&#39;province_curedCount&#39;]) except: list_g.append(0) continue g_date_cured = pd.DataFrame(list_g, index=m_dates) g_date_cured.index.name=&quot;date&quot; g_date_cured.columns=[&quot;g_cured&quot;] g_date_cured=g_date_cured[~g_date_cured[&#39;g_cured&#39;].isin([0])] #广东省累计死亡人数 list_g = [] for i in range(0,len(m_dates)): try: con_m = myhome.loc[myhome[&#39;updateTime&#39;] == date[i]].loc[myhome[&#39;cityName&#39;] == &#39;茂名&#39;].iloc[[0]].iloc[0] list_g.append(con_m[&#39;province_deadCount&#39;]) except: list_g.append(0) continue g_date_dead = pd.DataFrame(list_g, index=m_dates) g_date_dead.index.name=&quot;date&quot; g_date_dead.columns=[&quot;g_dead&quot;] g_date_dead=g_date_dead[~g_date_dead[&#39;g_dead&#39;].isin([0])] . 分析：作折线图表现疫情随时间变化趋势 . plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;] x= g_date_confirmed.index y1 = g_date_confirmed.values y2 = g_date_cured.values y3 = g_date_dead #font_manager = font_manager.FontProperties(fname = &#39;C:/Windows/Fonts/simsun.ttc&#39;,size = 18) plt.figure(figsize=(20,10),dpi = 80) plt.plot(x,y1,color = r_hex,label = &#39;confirmed&#39;) plt.plot(x,y2,color = g_hex,label = &#39;cured&#39;) x_major_locator=MultipleLocator(12) ax=plt.gca() ax.xaxis.set_major_locator(x_major_locator) plt.title(&#39;COVID-19 —— 广东省&#39;,fontsize=30) plt.xlabel(&#39;日期&#39;,fontsize=20) plt.ylabel(&#39;人数&#39;,fontsize=20) plt.legend(loc=1, bbox_to_anchor=(1.00,0.90), bbox_transform=ax.transAxes) . &lt;matplotlib.legend.Legend at 0x25553d02a90&gt; . plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;] fig = plt.figure( figsize=(16,4), dpi=100) ax = fig.add_subplot(1,1,1) x = g_date_dead.index y = g_date_dead.values plot = ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;dead&#39; ) ax.set_xticks( range(0,len(x),10)) plt.xlabel(&#39;日期&#39;,fontsize=20) plt.ylabel(&#39;人数&#39;,fontsize=20) plt.title(&#39;COVID-19——广东省&#39;,fontsize=30) ax.legend( loc=0, frameon=True ) . &lt;matplotlib.legend.Legend at 0x25553d94940&gt; . 分析：广东省的数据补全很成功，真实性高。 分析：从折线图来看，广东省自1月末起感染人数激增，直到2月中旬趋于平缓，3月初开始由于检测普及以及统计因素，短期确诊患者人数小幅度增加。广东省自2月初开始治愈人数激增，直到6月初开始因为新增感染人数趋于平缓，所以治愈人数趋于平缓。广东省自3月初开始不再有新增死亡患者。 . &#65288;&#20116;&#65289;&#22269;&#22806;&#30123;&#24773;&#24577;&#21183;&#22914;&#20309;&#65311; . 分析：数据去除空值 . world.dropna(axis=1, how=&#39;any&#39;, inplace=True) #world.set_index(&#39;updateTime&#39;) . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &#34;&#34;&#34;Entry point for launching an IPython kernel. . 分析：创建国家列表country，创建日期列表date_y . country = list(set(world[&#39;provinceName&#39;])) date_y = [] for dt in world.loc[world[&#39;provinceName&#39;] == country[0]][&#39;updateTime&#39;]: date_y.append(str(dt)) date_y = list(set(date_0)) date_y.sort() . 分析：遍历国家列表对world中的updateTime进行处理并去重。 . for c in country: world.loc[world[&#39;provinceName&#39;] == c].sort_values(by = &#39;updateTime&#39;) world.dropna(subset=[&#39;provinceName&#39;],inplace=True) world.updateTime = pd.to_datetime(world.updateTime,format=&quot;%Y-%m-%d&quot;,errors=&#39;coerce&#39;).dt.date . D: Anaconda envs python32 lib site-packages ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy This is separate from the ipykernel package so we can avoid doing imports until D: Anaconda envs python32 lib site-packages pandas core generic.py:5303: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy self[name] = value . 分析：取前15个国家的province_confirmedCount透视构成world_confirmed，并进行数据补全处理 . world_confirmed = world.loc[world[&#39;provinceName&#39;] == world.head(15)[&#39;provinceName&#39;][0]].pivot_table(index=&#39;updateTime&#39;, columns=&#39;provinceName&#39;, values=&#39;province_confirmedCount&#39;,aggfunc=np.mean) for i in world.head(15)[&#39;provinceName&#39;][1:]: draft_c = world.loc[world[&#39;provinceName&#39;] == i].pivot_table(index=&#39;updateTime&#39;, columns=&#39;provinceName&#39;, values=&#39;province_confirmedCount&#39;,aggfunc=np.mean) world_confirmed = pd.merge(world_confirmed,draft_c,on=&#39;updateTime&#39;, how=&#39;outer&#39;,sort=True) world_confirmed.fillna(0,inplace=True,limit = 1) world_confirmed.fillna(method=&quot;ffill&quot;,inplace=True) world_confirmed . provinceName 美国 巴西 英国 俄罗斯 智利 印度 巴基斯坦 秘鲁 西班牙 孟加拉国 法国 沙特阿拉伯 瑞典 南非 厄瓜多尔 . updateTime . 2020-01-27 5.000000e+00 | 0.00 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.00 | 0.00 | 3.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | . 2020-01-29 0.000000e+00 | 0.00 | 0.000000 | 0.0 | 0.0 | 0.000000 | 0.000000 | 0.000000 | 0.00 | 0.00 | 4.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | . 2020-01-30 0.000000e+00 | 0.00 | 0.000000 | 0.0 | 0.0 | 1.000000 | 0.000000 | 0.000000 | 0.00 | 0.00 | 5.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | . 2020-01-31 6.000000e+00 | 0.00 | 2.000000 | 2.0 | 0.0 | 1.000000 | 0.000000 | 0.000000 | 0.00 | 0.00 | 0.000000 | 0.000000 | 0.000000 | 0.0 | 0.000000 | . 2020-02-01 6.000000e+00 | 0.00 | 2.000000 | 2.0 | 0.0 | 1.000000 | 0.000000 | 0.000000 | 4.00 | 0.00 | 5.500000 | 0.000000 | 1.000000 | 0.0 | 0.000000 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2020-06-19 2.184912e+06 | 976906.50 | 300469.000000 | 563084.0 | 225103.0 | 371474.666667 | 162935.600000 | 243518.000000 | 245268.00 | 102292.00 | 158641.000000 | 145991.000000 | 55672.750000 | 83020.5 | 48256.400000 | . 2020-06-20 2.221982e+06 | 1038568.00 | 302138.750000 | 573007.5 | 231393.0 | 390209.333333 | 169464.666667 | 247925.000000 | 245665.75 | 105535.00 | 159452.000000 | 151277.250000 | 56201.500000 | 87715.0 | 49519.666667 | . 2020-06-21 2.253118e+06 | 1068977.25 | 303284.428571 | 579160.0 | 236748.0 | 399451.714286 | 174346.222222 | 251338.000000 | 245938.00 | 109657.75 | 160093.000000 | 154715.714286 | 56360.000000 | 92681.0 | 49731.000000 | . 2020-06-22 2.279603e+06 | 1084312.25 | 304331.000000 | 587720.0 | 243276.6 | 416389.400000 | 179148.750000 | 254336.333333 | 246272.00 | 112306.00 | 160336.428571 | 158177.500000 | 57346.000000 | 96377.8 | 50092.600000 | . 2020-06-23 2.299650e+06 | 1106470.00 | 305289.000000 | 592280.0 | 246963.0 | 425282.000000 | 182562.666667 | 257447.000000 | 246504.00 | 115786.00 | 160750.000000 | 161005.000000 | 59060.666667 | 101590.0 | 50487.666667 | . 144 rows × 15 columns . 分析：作前15个国家的疫情随时间变动表 . fig = plt.figure(figsize=(16,10)) plt.plot(world_confirmed) plt.legend(world_confirmed.columns) plt.title(&#39;前15个国家累计确诊人数&#39;,fontsize=20) plt.xlabel(&#39;日期&#39;,fontsize=20) plt.ylabel(&#39;人数/百万&#39;,fontsize=20); . 分析：国外数据的补全较为成功，有一定的真实性。 分析：国外新冠确诊人数自3月末开始激增，排名前四的国家的疫情没有受到控制的趋势，国外疫情的趋势为确诊人数继续激增。 . &#65288;&#20845;&#65289;&#32467;&#21512;&#20320;&#30340;&#20998;&#26512;&#32467;&#26524;&#65292;&#23545;&#20010;&#20154;&#21644;&#31038;&#20250;&#22312;&#25239;&#20987;&#30123;&#24773;&#26041;&#38754;&#26377;&#20309;&#24314;&#35758;&#65311; . 从国内疫情折线图来看，从4月末开始疫情趋于平缓，相反，国外疫情从4月初开始爆发，至今没有看到平缓的趋势。 从境外输入案例来看，我们需要谨防境外输入病例，遏制国内新冠再次传播，一切都不能放松警惕。 对于个人，我们要避免到人员密集的区域，外出一定要戴好口罩，回家要做全面的消毒。 对于社会，在交通发达区域和人员密集区域，需要普及病毒检测和场所消毒措施，切断病毒的传播途径，维护我国疫情防控的成果。 . &#38468;&#21152;&#20998;&#26512;(&#36873;&#20570;&#65292;&#20294;&#20570;&#30340;&#20986;&#24425;&#20250;&#21152;&#20998;&#21734;) . 附加分析，所使用的库不限，比如可以使用seaborn、pyecharts等库。 . 童鞋们，自由发挥吧！！ .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2020/07/01/Cov2019Analysis.html",
            "relUrl": "/2020/07/01/Cov2019Analysis.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Matplotlib",
            "content": "前言 . 本篇鸣谢 马川-燕大 的增删整理， 王圣元 ——原创文章，与原文不同之处包含我的学习记录。 . 匹配Jupyter Notebook的ipynb文档链接下载地址在资源页面里 . 0 引言 . Matplotlib 是 Python 中最基本的可视化工具，官网里 (https://matplotlib.org/) 好资料无数，可多多参考。 . 本章采用以下思路来讲解： . 第一部分介绍 matplotlib 中的绘图逻辑，图包含的重要元素和他们之间的层级 (hierarchy) . 第二部分只关注折线图 (line chart)，但是一步步从最初的烂图完善到最终的美图。这样可以把一种类型的图中的性质吃透，类比到其他类型的图一点也不难。 . 第三部分从画图的四大目的出发，即分布、联系、比较和构成，介绍了相对应的直方图 (historgram chart)，散点图 (scatter chart)，折线图 (line chart) 和饼状图 (pie chart)。这章偏向于用合适的图来实现不同的目的，没有在如何完善图的方面上下功夫，但在最后一节提到了如何画出使信息更有效的表达的图。 . 提纲： . . 和 NumPy, SciPy, Pandas 一样，要用 Matplotlib，首先引用其库。 . import matplotlib . 下面代码就是给 matplotlib 起了个别名 mpl，由于用 matplotlib.plot 比较多，也给它起了个别名 plt。 . import matplotlib as mpl import matplotlib.pyplot as plt %matplotlib inline . 而 %matplotlib inline 就是在 Jupyter notebook 里面内嵌画图的， . 在画图中，个人偏好百度 Echarts 里面的一组颜色，因此将其 hex 颜色代码定义出来留在后面用。其中红色的 r_hex 和深青色的 dt_hex 是大爱。 . r_hex = &#39;#dc2624&#39; # red, RGB = 220,38,36 dt_hex = &#39;#2b4750&#39; # dark teal, RGB = 43,71,80 tl_hex = &#39;#45a0a2&#39; # teal, RGB = 69,160,162 r1_hex = &#39;#e87a59&#39; # red, RGB = 232,122,89 tl1_hex = &#39;#7dcaa9&#39; # teal, RGB = 125,202,169 g_hex = &#39;#649E7D&#39; # green, RGB = 100,158,125 o_hex = &#39;#dc8018&#39; # orange, RGB = 220,128,24 tn_hex = &#39;#C89F91&#39; # tan, RGB = 200,159,145 g50_hex = &#39;#6c6d6c&#39; # grey-50, RGB = 108,109,108 bg_hex = &#39;#4f6268&#39; # blue grey, RGB = 79,98,104 g25_hex = &#39;#c7cccf&#39; # grey-25, RGB = 199,204,207 . Hex Color RGB . r_hex = ‘#dc2624’ | # red | RGB = 220,38,36 | . dt_hex = ‘#2b4750’ | # dark teal | RGB = 43,71,80 | . tl_hex = ‘#45a0a2’ | # teal | RGB = 69,160,162 | . r1_hex = ‘#e87a59’ | # red | RGB = 232,122,89 | . tl1_hex = ‘#7dcaa9’ | # teal | RGB = 125,202,169 | . g_hex = ‘#649E7D’ | # green | RGB = 100,158,125 | . o_hex = ‘#dc8018’ | # orange | RGB = 220,128,24 | . tn_hex = ‘#C89F91’ | # tan | RGB = 200,159,145 | . g50_hex = ‘#6c6d6c’ | # grey-50 | RGB = 108,109,108 | . bg_hex = ‘#4f6268’ | # blue grey | RGB = 79,98,104 | . g25_hex = ‘#c7cccf’ | # grey-25 | RGB = 199,204,207 | . . 1 Matplotlib结构 . 1.1 概览 . Matplotlib 是一个巨无霸，乍一看无从下手，只能分解之后各点击破。总体来说，它包含两类元素： . 基础 (primitives) 类：线 (line), 点 (marker), 文字 (text), 图例 (legend), 网格 (grid), 标题 (title), 图片 (image) 等。 . | 容器 (containers) 类：图 (figure), 坐标系 (axes), 坐标轴 (axis) 和刻度 (tick) . | . 基础类元素是程序员想画出的标准对象，而容器类元素是基础类元素的寄居处，它们也有层级结构。 . 图 → 坐标系 → 坐标轴 → 刻度 . . 由上图看出： . 图包含着坐标系 (多个) . | 坐标系由坐标轴组成 (横轴 xAxis 和纵轴 yAxis) . | 坐标轴上面有刻度 (主刻度 MajorTicks 和副刻度 MinorTicks) . | . Python 中万物皆对象，Matplotlib 里这些元素也都是对象。下面代码打印出坐标系、坐标轴和刻度。 . fig = plt.figure() ax = fig.add_subplot(1,1,1) plt.show() xax = ax.xaxis yax = ax.yaxis print( &#39;fig.axes:&#39;, fig.axes, &#39; n&#39;) print( &#39;ax.xaxis:&#39;, xax ) print( &#39;ax.yaxis:&#39;, yax, &#39; n&#39; ) print( &#39;ax.xaxis.majorTicks:&#39;, xax.majorTicks, &#39; n&#39; ) print( &#39;ax.yaxis.majorTicks:&#39;, yax.majorTicks, &#39; n&#39;) print( &#39;ax.xaxis.minorTicks:&#39;, xax.minorTicks ) print( &#39;ax.yaxis.minorTicks:&#39;, yax.minorTicks ) . . fig.axes: [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x000001C7E5D332B0&gt;] ax.xaxis: XAxis(54.0,36.0) ax.yaxis: YAxis(54.0,36.0) ax.xaxis.majorTicks: [&lt;matplotlib.axis.XTick object at 0x000001C7E5D54898&gt;, &lt;matplotlib.axis.XTick object at 0x000001C7E5D54860&gt;, &lt;matplotlib.axis.XTick object at 0x000001C7F8DB6B38&gt;, &lt;matplotlib.axis.XTick object at 0x000001C7F8DB6D30&gt;, &lt;matplotlib.axis.XTick object at 0x000001C7F8DCC470&gt;, &lt;matplotlib.axis.XTick object at 0x000001C7F8DCC908&gt;] ax.yaxis.majorTicks: [&lt;matplotlib.axis.YTick object at 0x000001C7E5D685C0&gt;, &lt;matplotlib.axis.YTick object at 0x000001C7E5D54F60&gt;, &lt;matplotlib.axis.YTick object at 0x000001C7F8DCCC88&gt;, &lt;matplotlib.axis.YTick object at 0x000001C7F8DCC8D0&gt;, &lt;matplotlib.axis.YTick object at 0x000001C7F8DD34E0&gt;, &lt;matplotlib.axis.YTick object at 0x000001C7F8DD3668&gt;] ax.xaxis.minorTicks: [&lt;matplotlib.axis.XTick object at 0x000001C7F8DA16A0&gt;] ax.yaxis.minorTicks: [&lt;matplotlib.axis.YTick object at 0x000001C7F8DAA940&gt;] . 从打印结果可看出坐标系、坐标轴和刻度都是对象。细看一下发现 xaxis 和 yaxis 上面都有 6 个主刻度 (majorTicks)。 . 此外，由坐标系和坐标轴指向同一个图 (侧面验证了图、坐标系和坐标轴的层级性)。 . print( &#39;axes.figure:&#39;, ax.figure ) print( &#39;xaxis.figure:&#39;, xax.figure ) print( &#39;yaxis.figure:&#39;, yax.figure ) . axes.figure: Figure(432x288) xaxis.figure: Figure(432x288) yaxis.figure: Figure(432x288) . 创造完以上四个容器元素后，可在上面添加各种基础元素，比如： . 在坐标轴和刻度上添加标签 . | 在坐标系中添加线、点、网格、图例和文字 . | 在图中添加图例 . | . 如下图所示： . . 接下来四节分别介绍四大容器，首先从「图」开始。 . 1.2 图 . 图是整个层级的顶部。 . 在图中可以添加基本元素「文字」。 . plt.figure() plt.text( 0.5, 0.5, &#39;Figure&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=0.5 ) plt.xticks([]), plt.yticks([]) plt.show() . . 用 plt.text() 函数，其参数解释如下： . 第一、二个参数是指横轴和纵轴坐标 . | 第三个参数字符是指要显示的内容 . | ha, va 是横向和纵向位置 . | size 设置字体大小 . | alpha 设置字体透明度 (0.5 是半透明) . | . 在图中可以添加基本元素「图片」。 . import numpy as np from PIL import Image plt.figure() plt.xticks([]), plt.yticks([]) im = np.array(Image.open(&#39;images/小白.jpg&#39;)) #im = plt.imread(&#39;images/小白.jpg&#39;) # Mc: 这种方式打开也可以 plt.imshow(im) plt.show() . . 用 Image.open() 将图片转成像素存在 ndarray 中，再用 plt.imshow() 展示。 . 在图中可以添加基本元素「折线」。 . plt.figure() plt.plot( [0,1],[0,1] ) plt.show() . . plt.plot() 函数是用来画折线图的，前两个参数分别是 x 和 y，该函数会在第二节细讲。 . 当我们每次说画东西，看起来是在图 (Figure) 里面进行的，实际上是在坐标系 (Axes) 里面进行的。一幅图中可以有多个坐标系，因此在坐标系里画东西更方便 (有些设置使用起来也更灵活)。 . 下面来看看层级中排名第二的「坐标系」。 . 1.3 坐标系 &amp; 子图 . 一幅图 (Figure) 中可以有多个坐标系 (Axes)，那不是说一幅图中有多幅子图 (Subplot)，因此坐标系和子图是不是同样的概念？ . 在绝大多数情况下是的，两者有一点细微差别： . 子图在母图中的网格结构一定是规则的 . | 坐标系在母图中的网格结构可以是不规则的 . | . 由此可见，子图是坐标系的一个特例，来我们先研究特例。 . 子图 . 把图想成矩阵，那么子图就是矩阵中的元素，因此可像定义矩阵那样定义子图 - (子图行数、子图列数、第几个子图)。 . subplot(rows, columns, i-th plots) . 文字解释起来有些晦涩，看代码和图就好懂了。 . 1×2 子图 plt.subplot(2,1,1) plt.xticks([]),plt.yticks([])#隐藏坐标 plt.text(0.5, 0.5, &#39;subplot(2,1,1)&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.subplot(2,1,2) plt.xticks([]), plt.yticks([]) plt.text( 0.5, 0.5, &#39;subplot(2,1,2)&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.show() . . 这两个子图类似于一个列向量 . subplot(2,1,1) 是第一幅 . | subplot(2,1,2) 是第二幅 . | . 声明完子图后，下面所有代码就只在这幅子图上生效，直到声明下一幅子图。 . 2×1 子图 plt.subplot(1,2,1) plt.xticks([]),plt.yticks([]) plt.text(0.5, 0.5, &#39;subplot(1,2,1)&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.subplot(1,2,2) plt.xticks([]), plt.yticks([]) plt.text( 0.5, 0.5, &#39;subplot(1,2,2)&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.show() . . 这两个子图类似于一个行向量 . subplot(1,2,1) 是第一幅 . | subplot(1,2,2) 是第二幅 . | . 创建包含subplot网格的figure是一个非常常见的任务，matplotlib有一个更为方便的方法plt.subplots，它可以创建一个新的Figure，并返回一个含有已创建的subplot对象的NumPy数组。这是非常实用的，因为可以轻松地对axes数组进行索引，就好像是一个二维数组一样，例如axes[0,1]。你还可以通过sharex和sharey指定subplot应该具有相同的X轴或Y轴。在比较相同范围的数据时，这也是非常实用的，否则，matplotlib会自动缩放各图表的界限。 . 2×2 子图 fig, axes = plt.subplots(nrows=2, ncols=2) # 可以轻松地对axes数组进行索引，就好像是一个二维数组一样 # axes[0,0].set( xticks=[], yticks=[] ) # s = &#39;My subplot&#39; # axes[0,0].text( 0.5, 0.3, s, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) for i,ax in enumerate(axes.flat): #也可以axes.flatten()打平. flat将数组转换为1-D的迭代器,可以用for访问数组每一个元素;而flatten将数组的副本转换为一维(1-D)，并返回 ax.set( xticks=[], yticks=[] ) s = &#39;subplot(2,2,&#39; + str(i) + &#39;)&#39; ax.text( 0.5, 0.5, s, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.show() . . 这次我们用过坐标系来生成子图 (子图是坐标系的特例嘛)，第 1 行 . fig, axes = plt.subplots(nrows=2, ncols=2) . 得到的 axes 是一个 2×2 的对象。在第 8行的 for 循环中用 axes.flat 将其打平，然后在每个 ax 上生成子图。 . 坐标系 . 坐标系比子图更通用，有两种生成方式 . 用 gridspec 包加上 subplot() | . gridspec用于生成一个标准的虚拟网格，后面可以对它进行切片处理生成不规则的图 . 用 plt.axes() | . 不规则网格 import matplotlib.gridspec as gridspec G = gridspec.GridSpec(3,3)#三行三列 ax1 = plt.subplot(G[0,:]) plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;Axes 1&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) ax2 = plt.subplot(G[1,:-1])#只有序号为1的行 plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;Axes 2&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) ax3 = plt.subplot(G[1:,-1])#序号为1以后的行 1: plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;Axes 3&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) ax4 = plt.subplot(G[-1,0]) plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;Axes 4&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) ax5 = plt.subplot(G[-1,-2]) plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;Axes 5&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.show() . . 第 2 行将整幅图分成 3×3 份赋值给 G，第 4, 8, 12, 16, 20 行分别用 . plt.subplot(G[]) . 生成五个坐标系。G[] 里面的切片和 Numpy 数组用法一样： . G[0, :] = 图的第一行 (Axes 1) . | G[1, :-1] = 图的第二行，第二三列 (Axes 2) . | G[1:, -1] = 图的第二三行，第三列 (Axes 3) . | G[-1, 0] = 图的第三行，第一列 (Axes 4) . | G[-1, -2] = 图的第三行，第二列 (Axes 5) . | . 大图套小图 plt.axes([0.1,0.1,0.8,0.8]) plt.xticks([]),plt.yticks([]) plt.text( 0.6, 0.6, &#39;axes([0.1,0.1,0.8,0.8])&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) plt.axes([0.2,0.2,0.3,0.3]) plt.xticks([]),plt.yticks([]) plt.text( 0.5, 0.5, &#39;axes([0.2,0.2,0.3,0.3])&#39;, ha=&#39;center&#39;, va=&#39;center&#39;, size=20, alpha=.5 ) . Text(0.5, 0.5, &#39;axes([0.2,0.2,0.3,0.3])&#39;) . . 第 1 和 5 行分别用 . plt.axes([l,b,w,h]) . 其中 [l, b, w, h] 可以定义坐标系 . l 代表坐标系左边到 Figure 左边的水平距离 . | b 代表坐标系底边到 Figure 底边的垂直距离 . | w 代表坐标系的宽度 . | h 代表坐标系的高度 . | . 如果 l, b, w, h 都小于 1，那它们是标准化 (normalized) 后的距离。比如 Figure 底边长度为 10， 坐标系底边到它的垂直距离是 2，那么 b = 2/10 = 0.2。 . 重叠图 plt.axes([0.1,0.1,0.5,0.5]) plt.xticks([]),plt.yticks([]) plt.text( 0.1, 0.1, &#39;axes([0.1,0.1,0.5,0.5])&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, size=16, alpha=.5 ) plt.axes([0.2,0.2,0.5,0.5]) plt.xticks([]),plt.yticks([]) plt.text( 0.1, 0.1, &#39;axes([0.2,0.2,0.5,0.5])&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, size=16, alpha=.5 ) plt.axes([0.3,0.3,0.5,0.5]) plt.xticks([]),plt.yticks([]) plt.text( 0.1, 0.1, &#39;axes([0.3,0.3,0.5,0.5])&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, size=16, alpha=.5 ) plt.axes([0.4,0.4,0.5,0.5]) plt.xticks([]),plt.yticks([]) plt.text( 0.1, 0.1, &#39;axes([0.4,0.4,0.5,0.5])&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, size=16, alpha=.5 ) plt.show() . . 不解释，懂了 [l, b, w, h] 的意思这幅重叠图应该知道怎么生成了。 . 在本小节最后，总结一下两种生成单个坐标系的方法 (生成多个坐标系可以类推)。 . 两种生成坐标系的推荐代码 . 代码 1 同时生成图和坐标系 fig,ax = plt.subplots() ax.set( xticks=[0.2,0.4,0.6],yticks=[0.2,0.4] ) s = &#39;style 1 n nfig, ax = plt.subplots() nax.plot()&#39; ax.text( 0.5, 0.5, s, ha=&#39;center&#39;, va=&#39;center&#39;, size=16, alpha=.5 ); . . 代码 2 先生成图，再添加坐标系 fig = plt.figure()#初始化图 ax = fig.add_subplot(1,1,1) ax.set( xticks=[],yticks=[] ) s = &#39;style 2 n nfig, ax = plt.subplots() nax = fig.add_subplot(1,1,1) nax.plot()&#39; ax.text( 0.5, 0.5, s, ha=&#39;center&#39;, va=&#39;center&#39;, size=16, alpha=.5 ); . . 超级细心的读者可能会发现，上面所有的图都看不到坐标轴和刻度啊，是的，我是故意这样做的，在深度研究坐标系和子图时，剔除不必要的信息，用的是以下代码 (将刻度设为空集 [])： . plt.xticks([]), plt.yticks([]) . 或 . ax.set( xticks=[], yticks=[] ) . 现在是时候来看看层级中排名第三的「坐标轴」。 . 1.4 坐标轴 . 一个坐标系 (Axes)，通常是二维，有两条坐标轴 (Axis)： . 横轴：XAxis . | 纵轴：YAxis . | . 每个坐标轴都包含两个元素 . 容器类元素「刻度」，该对象里还包含刻度本身和刻度标签 . | 基础类元素「标签」，该对象包含的是坐标轴标签 . | . 「刻度」和「标签」都是对象，下面代码通过改变它们一些属性值来进行可视化。 . fig,ax = plt.subplots() ax.set_xlabel(&#39;Label on x-axis&#39;) ax.set_ylabel(&#39;Label on y-axis&#39;) for label in ax.xaxis.get_ticklabels():#设定刻度标签 #label is a Text instance label.set_color( dt_hex )#设定颜色 label.set_rotation(45)#设定字体逆时针旋转角度 label.set_fontsize(20)#设定字体大小 for line in ax.yaxis.get_ticklines():#设定对象的刻度本身 (即一条短线) #line is a Line2D instance line.set_color( r_hex ) line.set_markersize(500) line.set_markeredgewidth(30) plt.show() . . 第 2 和 3 行打印出 x 轴和 y 轴的标签。 . 第 5 到 9 行处理「刻度」对象里的刻度标签，将它颜色设定为深青色，字体大小为 20，旋转度 45 度。 . 第 11 到 15 行处理「标签」对象的刻度本身 (即一条短线)，将它颜色设定为红色，标记长度和宽度为 500 和 30 (夸张了些，但就为大家看清楚这条代表刻度的短线！)。 . 万物皆对象，坐标轴也不例外，下面代码打印出 x 轴的标签、刻度位置点、刻度标签、刻度线，刻度标签位置、主刻度。 . print( ax.xaxis.get_label() )#x 轴的标签 print( ax.xaxis.get_ticklocs() )#x 轴的刻度位置点 print( ax.xaxis.get_ticklabels() )#x 轴的刻度标签 print( ax.xaxis.get_ticklines() )#x 刻度线 print( ax.xaxis.get_ticks_position() )#x 轴的刻度标签位置 print( ax.xaxis.get_major_ticks() )#x 轴的主刻度 . Text(0.5,17.2,&#39;Label on x-axis&#39;) [0. 0.2 0.4 0.6 0.8 1. ] &lt;a list of 6 Text major ticklabel objects&gt; &lt;a list of 12 Line2D ticklines objects&gt; bottom [&lt;matplotlib.axis.XTick object at 0x000000000A5DDCF8&gt;, &lt;matplotlib.axis.XTick object at 0x00000000087E5A58&gt;, &lt;matplotlib.axis.XTick object at 0x0000000009C97F28&gt;, &lt;matplotlib.axis.XTick object at 0x000000000A5FA6A0&gt;, &lt;matplotlib.axis.XTick object at 0x000000000A5FACF8&gt;, &lt;matplotlib.axis.XTick object at 0x000000000A600390&gt;] . 问题：其他都好懂，比如 6 个刻度标签，但为什么有 12 条刻度线？不应该是 6 条吗？ . get_ticklines 返回12个对象是因为将左侧(tick1line)与右侧(tick2line)的tickline都返回了，如果右侧的label也是开启的，get_ticklabels也会返回12个。 . 下面来看看层级中排名第四也是最后的「刻度」。 . 1.5 刻度 . 刻度 (Tick) 其实在坐标轴那节已经讲过了，它核心内容就是 . 一条短线 (刻度本身) . | 一串字符 (刻度标签) . | . 1.6 基础元素 . 目前，我们已经介绍四个最重要的容器以及它们之间的层级 . Figure → Axes → Axis → Ticks . 图 → 坐标系 → 坐标轴 → 刻度 . 但要画出一幅有内容的图，还需要在容器里添加基础元素比如线 (line), 点 (marker), 文字 (text), 图例 (legend), 网格 (grid), 标题 (title), 图片 (image) 等，具体来说 . 画一条线，用 plt.plot() 或 ax.plot() . | 画个记号，用 plt.scatter() 或 ax.scatter() . | 添加文字，用 plt.text() 或 ax.text() . | 添加图例，用 plt.legend() 或 ax.legend() . | 添加图片，用 plt.imshow() 或 ax.imshow() . | . 最后用 Matplotlib 官网的图来总结所有元素。 . . 现在你基本理解了 Matplotlib 里面的绘图逻辑和元素，下两节分别从不同维度 (深度和广度) 研究如何画图： . 第二节只研究一种类型的图「折线图」，但从头到尾不断根据需求添加元素完善它。深度研究做到完美！ . | 第三节研究四种类型的图 (展示数据的分布、联系、对比和组成)，却没在美感上下功夫，广度研究满足目的！ . | . 但读完后两节后，你应该可以在各种类型的图上做到完美。 . 2 画美感图 . 本节记录着老板让斯蒂文绘图不断提需求直到把他逼疯的一段对话。 . . 2.1 画第一幅图 . . 首先用 pd.read_csv 函数从存好的 S&amp;P500.csv，截屏如下： . . 该函数中三个参数代表： . index_col = 0 是说把第一列 Date 当成行标签 (index) . | parse_dates = True 是说把行标签转成 date 对象 . | dayFirst = True 是说日期是 DD/MM/YYYY 这样的格式 . | . import pandas as pd data = pd.read_csv( &#39;data/S&amp;P500.csv&#39;, index_col=0, parse_dates=True, dayfirst=True ) data.head(3).append(data.tail(3)) . Open High Low Close Adj Close Volume . Date . 1950-01-03 16.660000 | 16.660000 | 16.660000 | 16.660000 | 16.660000 | 1260000 | . 1950-01-04 16.850000 | 16.850000 | 16.850000 | 16.850000 | 16.850000 | 1890000 | . 1950-01-05 16.930000 | 16.930000 | 16.930000 | 16.930000 | 16.930000 | 2550000 | . 2019-04-22 2898.780029 | 2909.510010 | 2896.350098 | 2907.969971 | 2907.969971 | 2997950000 | . 2019-04-23 2909.989990 | 2936.310059 | 2908.530029 | 2933.679932 | 2933.679932 | 3635030000 | . 2019-04-24 2934.000000 | 2936.830078 | 2926.050049 | 2927.250000 | 2927.250000 | 3448960000 | . S&amp;P 500 的数据从 1950 年 1 月 3 号开始，老板只需要 2007 年 1 月 1 日到 2010 年 1 月 1 日的数据。做个切片即可，存储成 spx。 . spx = data[[&#39;Adj Close&#39;]].loc[&#39;2007-01-01&#39;:&#39;2010-01-01&#39;] spx.head(3).append(spx.tail(3)) . Adj Close . Date . 2007-01-03 1416.599976 | . 2007-01-04 1418.339966 | . 2007-01-05 1409.709961 | . 2009-12-29 1126.199951 | . 2009-12-30 1126.420044 | . 2009-12-31 1115.099976 | . spx 是个 DataFrame，将它的值一个个画出折线图只需用 plt.plot() 函数，展示在屏幕需用 plt.show()。 . plt.plot( spx.values ) plt.show() . . 在 plot() 函数里面只有变量 y 时 (y = spx.values)，那么自变量就是默认赋值为 range(len(y))。 . 此外我们没有设置图的尺寸，像素、线的颜色宽度、坐标轴的刻度和标签、图例、标题等等，所有设置都用的是 matplotlib 的默认设置。 . 此图虽丑，但也满足了老板的需求，即标准普尔 500 指数在 2007-2010 的走势图。斯蒂文提交给了老板。 . 2.2 图的默认设置 . . 要修改图就必须知道它的属性，用 plt.rcParams 可查看上图的所有默认属性 (非常多的属性值)。 . plt.rcParams . RcParams({&#39;_internal.classic_mode&#39;: False, &#39;agg.path.chunksize&#39;: 0, &#39;animation.avconv_args&#39;: [], &#39;animation.avconv_path&#39;: &#39;avconv&#39;, &#39;animation.bitrate&#39;: -1, &#39;animation.codec&#39;: &#39;h264&#39;, &#39;animation.convert_args&#39;: [], &#39;animation.convert_path&#39;: &#39;convert&#39;, &#39;animation.embed_limit&#39;: 20.0, &#39;animation.ffmpeg_args&#39;: [], &#39;animation.ffmpeg_path&#39;: &#39;ffmpeg&#39;, &#39;animation.frame_format&#39;: &#39;png&#39;, &#39;animation.html&#39;: &#39;none&#39;, &#39;animation.html_args&#39;: [], &#39;animation.mencoder_args&#39;: [], &#39;animation.mencoder_path&#39;: &#39;mencoder&#39;, &#39;animation.writer&#39;: &#39;ffmpeg&#39;, &#39;axes.autolimit_mode&#39;: &#39;data&#39;, &#39;axes.axisbelow&#39;: &#39;line&#39;, &#39;axes.edgecolor&#39;: &#39;k&#39;, &#39;axes.facecolor&#39;: &#39;w&#39;, &#39;axes.formatter.limits&#39;: [-7, 7], &#39;axes.formatter.min_exponent&#39;: 0, &#39;axes.formatter.offset_threshold&#39;: 4, &#39;axes.formatter.use_locale&#39;: False, &#39;axes.formatter.use_mathtext&#39;: False, &#39;axes.formatter.useoffset&#39;: True, &#39;axes.grid&#39;: False, &#39;axes.grid.axis&#39;: &#39;both&#39;, &#39;axes.grid.which&#39;: &#39;major&#39;, &#39;axes.hold&#39;: None, &#39;axes.labelcolor&#39;: &#39;k&#39;, &#39;axes.labelpad&#39;: 4.0, &#39;axes.labelsize&#39;: &#39;medium&#39;, &#39;axes.labelweight&#39;: &#39;normal&#39;, &#39;axes.linewidth&#39;: 0.8, &#39;axes.prop_cycle&#39;: cycler(&#39;color&#39;, [&#39;#1f77b4&#39;, &#39;#ff7f0e&#39;, &#39;#2ca02c&#39;, &#39;#d62728&#39;, &#39;#9467bd&#39;, &#39;#8c564b&#39;, &#39;#e377c2&#39;, &#39;#7f7f7f&#39;, &#39;#bcbd22&#39;, &#39;#17becf&#39;]), &#39;axes.spines.bottom&#39;: True, &#39;axes.spines.left&#39;: True, &#39;axes.spines.right&#39;: True, &#39;axes.spines.top&#39;: True, &#39;axes.titlepad&#39;: 6.0, &#39;axes.titlesize&#39;: &#39;large&#39;, &#39;axes.titleweight&#39;: &#39;normal&#39;, &#39;axes.unicode_minus&#39;: True, &#39;axes.xmargin&#39;: 0.05, &#39;axes.ymargin&#39;: 0.05, &#39;axes3d.grid&#39;: True, &#39;backend&#39;: &#39;module://ipykernel.pylab.backend_inline&#39;, &#39;backend.qt4&#39;: &#39;PyQt4&#39;, &#39;backend.qt5&#39;: &#39;PyQt5&#39;, &#39;backend_fallback&#39;: True, &#39;boxplot.bootstrap&#39;: None, &#39;boxplot.boxprops.color&#39;: &#39;k&#39;, &#39;boxplot.boxprops.linestyle&#39;: &#39;-&#39;, &#39;boxplot.boxprops.linewidth&#39;: 1.0, &#39;boxplot.capprops.color&#39;: &#39;k&#39;, &#39;boxplot.capprops.linestyle&#39;: &#39;-&#39;, &#39;boxplot.capprops.linewidth&#39;: 1.0, &#39;boxplot.flierprops.color&#39;: &#39;k&#39;, &#39;boxplot.flierprops.linestyle&#39;: &#39;none&#39;, &#39;boxplot.flierprops.linewidth&#39;: 1.0, &#39;boxplot.flierprops.marker&#39;: &#39;o&#39;, &#39;boxplot.flierprops.markeredgecolor&#39;: &#39;k&#39;, &#39;boxplot.flierprops.markerfacecolor&#39;: &#39;none&#39;, &#39;boxplot.flierprops.markersize&#39;: 6.0, &#39;boxplot.meanline&#39;: False, &#39;boxplot.meanprops.color&#39;: &#39;C2&#39;, &#39;boxplot.meanprops.linestyle&#39;: &#39;--&#39;, &#39;boxplot.meanprops.linewidth&#39;: 1.0, &#39;boxplot.meanprops.marker&#39;: &#39;^&#39;, &#39;boxplot.meanprops.markeredgecolor&#39;: &#39;C2&#39;, &#39;boxplot.meanprops.markerfacecolor&#39;: &#39;C2&#39;, &#39;boxplot.meanprops.markersize&#39;: 6.0, &#39;boxplot.medianprops.color&#39;: &#39;C1&#39;, &#39;boxplot.medianprops.linestyle&#39;: &#39;-&#39;, &#39;boxplot.medianprops.linewidth&#39;: 1.0, &#39;boxplot.notch&#39;: False, &#39;boxplot.patchartist&#39;: False, &#39;boxplot.showbox&#39;: True, &#39;boxplot.showcaps&#39;: True, &#39;boxplot.showfliers&#39;: True, &#39;boxplot.showmeans&#39;: False, &#39;boxplot.vertical&#39;: True, &#39;boxplot.whiskerprops.color&#39;: &#39;k&#39;, &#39;boxplot.whiskerprops.linestyle&#39;: &#39;-&#39;, &#39;boxplot.whiskerprops.linewidth&#39;: 1.0, &#39;boxplot.whiskers&#39;: 1.5, &#39;contour.corner_mask&#39;: True, &#39;contour.negative_linestyle&#39;: &#39;dashed&#39;, &#39;datapath&#39;: &#39;G: ProgramData Anaconda3 lib site-packages matplotlib mpl-data&#39;, &#39;date.autoformatter.day&#39;: &#39;%Y-%m-%d&#39;, &#39;date.autoformatter.hour&#39;: &#39;%m-%d %H&#39;, &#39;date.autoformatter.microsecond&#39;: &#39;%M:%S.%f&#39;, &#39;date.autoformatter.minute&#39;: &#39;%d %H:%M&#39;, &#39;date.autoformatter.month&#39;: &#39;%Y-%m&#39;, &#39;date.autoformatter.second&#39;: &#39;%H:%M:%S&#39;, &#39;date.autoformatter.year&#39;: &#39;%Y&#39;, &#39;docstring.hardcopy&#39;: False, &#39;errorbar.capsize&#39;: 0.0, &#39;examples.directory&#39;: &#39;&#39;, &#39;figure.autolayout&#39;: False, &#39;figure.dpi&#39;: 72.0, &#39;figure.edgecolor&#39;: (1, 1, 1, 0), &#39;figure.facecolor&#39;: (1, 1, 1, 0), &#39;figure.figsize&#39;: [6.0, 4.0], &#39;figure.frameon&#39;: True, &#39;figure.max_open_warning&#39;: 20, &#39;figure.subplot.bottom&#39;: 0.125, &#39;figure.subplot.hspace&#39;: 0.2, &#39;figure.subplot.left&#39;: 0.125, &#39;figure.subplot.right&#39;: 0.9, &#39;figure.subplot.top&#39;: 0.88, &#39;figure.subplot.wspace&#39;: 0.2, &#39;figure.titlesize&#39;: &#39;large&#39;, &#39;figure.titleweight&#39;: &#39;normal&#39;, &#39;font.cursive&#39;: [&#39;Apple Chancery&#39;, &#39;Textile&#39;, &#39;Zapf Chancery&#39;, &#39;Sand&#39;, &#39;Script MT&#39;, &#39;Felipa&#39;, &#39;cursive&#39;], &#39;font.family&#39;: [&#39;sans-serif&#39;], &#39;font.fantasy&#39;: [&#39;Comic Sans MS&#39;, &#39;Chicago&#39;, &#39;Charcoal&#39;, &#39;ImpactWestern&#39;, &#39;Humor Sans&#39;, &#39;xkcd&#39;, &#39;fantasy&#39;], &#39;font.monospace&#39;: [&#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Computer Modern Typewriter&#39;, &#39;Andale Mono&#39;, &#39;Nimbus Mono L&#39;, &#39;Courier New&#39;, &#39;Courier&#39;, &#39;Fixed&#39;, &#39;Terminal&#39;, &#39;monospace&#39;], &#39;font.sans-serif&#39;: [&#39;DejaVu Sans&#39;, &#39;Bitstream Vera Sans&#39;, &#39;Computer Modern Sans Serif&#39;, &#39;Lucida Grande&#39;, &#39;Verdana&#39;, &#39;Geneva&#39;, &#39;Lucid&#39;, &#39;Arial&#39;, &#39;Helvetica&#39;, &#39;Avant Garde&#39;, &#39;sans-serif&#39;], &#39;font.serif&#39;: [&#39;DejaVu Serif&#39;, &#39;Bitstream Vera Serif&#39;, &#39;Computer Modern Roman&#39;, &#39;New Century Schoolbook&#39;, &#39;Century Schoolbook L&#39;, &#39;Utopia&#39;, &#39;ITC Bookman&#39;, &#39;Bookman&#39;, &#39;Nimbus Roman No9 L&#39;, &#39;Times New Roman&#39;, &#39;Times&#39;, &#39;Palatino&#39;, &#39;Charter&#39;, &#39;serif&#39;], &#39;font.size&#39;: 10.0, &#39;font.stretch&#39;: &#39;normal&#39;, &#39;font.style&#39;: &#39;normal&#39;, &#39;font.variant&#39;: &#39;normal&#39;, &#39;font.weight&#39;: &#39;normal&#39;, &#39;grid.alpha&#39;: 1.0, &#39;grid.color&#39;: &#39;#b0b0b0&#39;, &#39;grid.linestyle&#39;: &#39;-&#39;, &#39;grid.linewidth&#39;: 0.8, &#39;hatch.color&#39;: &#39;k&#39;, &#39;hatch.linewidth&#39;: 1.0, &#39;hist.bins&#39;: 10, &#39;image.aspect&#39;: &#39;equal&#39;, &#39;image.cmap&#39;: &#39;viridis&#39;, &#39;image.composite_image&#39;: True, &#39;image.interpolation&#39;: &#39;nearest&#39;, &#39;image.lut&#39;: 256, &#39;image.origin&#39;: &#39;upper&#39;, &#39;image.resample&#39;: True, &#39;interactive&#39;: True, &#39;keymap.all_axes&#39;: [&#39;a&#39;], &#39;keymap.back&#39;: [&#39;left&#39;, &#39;c&#39;, &#39;backspace&#39;], &#39;keymap.forward&#39;: [&#39;right&#39;, &#39;v&#39;], &#39;keymap.fullscreen&#39;: [&#39;f&#39;, &#39;ctrl+f&#39;], &#39;keymap.grid&#39;: [&#39;g&#39;], &#39;keymap.grid_minor&#39;: [&#39;G&#39;], &#39;keymap.home&#39;: [&#39;h&#39;, &#39;r&#39;, &#39;home&#39;], &#39;keymap.pan&#39;: [&#39;p&#39;], &#39;keymap.quit&#39;: [&#39;ctrl+w&#39;, &#39;cmd+w&#39;, &#39;q&#39;], &#39;keymap.quit_all&#39;: [&#39;W&#39;, &#39;cmd+W&#39;, &#39;Q&#39;], &#39;keymap.save&#39;: [&#39;s&#39;, &#39;ctrl+s&#39;], &#39;keymap.xscale&#39;: [&#39;k&#39;, &#39;L&#39;], &#39;keymap.yscale&#39;: [&#39;l&#39;], &#39;keymap.zoom&#39;: [&#39;o&#39;], &#39;legend.borderaxespad&#39;: 0.5, &#39;legend.borderpad&#39;: 0.4, &#39;legend.columnspacing&#39;: 2.0, &#39;legend.edgecolor&#39;: &#39;0.8&#39;, &#39;legend.facecolor&#39;: &#39;inherit&#39;, &#39;legend.fancybox&#39;: True, &#39;legend.fontsize&#39;: &#39;medium&#39;, &#39;legend.framealpha&#39;: 0.8, &#39;legend.frameon&#39;: True, &#39;legend.handleheight&#39;: 0.7, &#39;legend.handlelength&#39;: 2.0, &#39;legend.handletextpad&#39;: 0.8, &#39;legend.labelspacing&#39;: 0.5, &#39;legend.loc&#39;: &#39;best&#39;, &#39;legend.markerscale&#39;: 1.0, &#39;legend.numpoints&#39;: 1, &#39;legend.scatterpoints&#39;: 1, &#39;legend.shadow&#39;: False, &#39;lines.antialiased&#39;: True, &#39;lines.color&#39;: &#39;C0&#39;, &#39;lines.dash_capstyle&#39;: &#39;butt&#39;, &#39;lines.dash_joinstyle&#39;: &#39;round&#39;, &#39;lines.dashdot_pattern&#39;: [6.4, 1.6, 1.0, 1.6], &#39;lines.dashed_pattern&#39;: [3.7, 1.6], &#39;lines.dotted_pattern&#39;: [1.0, 1.65], &#39;lines.linestyle&#39;: &#39;-&#39;, &#39;lines.linewidth&#39;: 1.5, &#39;lines.marker&#39;: &#39;None&#39;, &#39;lines.markeredgewidth&#39;: 1.0, &#39;lines.markersize&#39;: 6.0, &#39;lines.scale_dashes&#39;: True, &#39;lines.solid_capstyle&#39;: &#39;projecting&#39;, &#39;lines.solid_joinstyle&#39;: &#39;round&#39;, &#39;markers.fillstyle&#39;: &#39;full&#39;, &#39;mathtext.bf&#39;: &#39;sans:bold&#39;, &#39;mathtext.cal&#39;: &#39;cursive&#39;, &#39;mathtext.default&#39;: &#39;it&#39;, &#39;mathtext.fallback_to_cm&#39;: True, &#39;mathtext.fontset&#39;: &#39;dejavusans&#39;, &#39;mathtext.it&#39;: &#39;sans:italic&#39;, &#39;mathtext.rm&#39;: &#39;sans&#39;, &#39;mathtext.sf&#39;: &#39;sans&#39;, &#39;mathtext.tt&#39;: &#39;monospace&#39;, &#39;nbagg.transparent&#39;: True, &#39;patch.antialiased&#39;: True, &#39;patch.edgecolor&#39;: &#39;k&#39;, &#39;patch.facecolor&#39;: &#39;C0&#39;, &#39;patch.force_edgecolor&#39;: False, &#39;patch.linewidth&#39;: 1.0, &#39;path.effects&#39;: [], &#39;path.simplify&#39;: True, &#39;path.simplify_threshold&#39;: 0.1111111111111111, &#39;path.sketch&#39;: None, &#39;path.snap&#39;: True, &#39;pdf.compression&#39;: 6, &#39;pdf.fonttype&#39;: 3, &#39;pdf.inheritcolor&#39;: False, &#39;pdf.use14corefonts&#39;: False, &#39;pgf.debug&#39;: False, &#39;pgf.preamble&#39;: [], &#39;pgf.rcfonts&#39;: True, &#39;pgf.texsystem&#39;: &#39;xelatex&#39;, &#39;plugins.directory&#39;: &#39;.matplotlib_plugins&#39;, &#39;polaraxes.grid&#39;: True, &#39;ps.distiller.res&#39;: 6000, &#39;ps.fonttype&#39;: 3, &#39;ps.papersize&#39;: &#39;letter&#39;, &#39;ps.useafm&#39;: False, &#39;ps.usedistiller&#39;: False, &#39;savefig.bbox&#39;: None, &#39;savefig.directory&#39;: &#39;~&#39;, &#39;savefig.dpi&#39;: &#39;figure&#39;, &#39;savefig.edgecolor&#39;: &#39;w&#39;, &#39;savefig.facecolor&#39;: &#39;w&#39;, &#39;savefig.format&#39;: &#39;png&#39;, &#39;savefig.frameon&#39;: True, &#39;savefig.jpeg_quality&#39;: 95, &#39;savefig.orientation&#39;: &#39;portrait&#39;, &#39;savefig.pad_inches&#39;: 0.1, &#39;savefig.transparent&#39;: False, &#39;scatter.marker&#39;: &#39;o&#39;, &#39;svg.fonttype&#39;: &#39;path&#39;, &#39;svg.hashsalt&#39;: None, &#39;svg.image_inline&#39;: True, &#39;text.antialiased&#39;: True, &#39;text.color&#39;: &#39;k&#39;, &#39;text.hinting&#39;: &#39;auto&#39;, &#39;text.hinting_factor&#39;: 8, &#39;text.latex.preamble&#39;: [], &#39;text.latex.preview&#39;: False, &#39;text.latex.unicode&#39;: False, &#39;text.usetex&#39;: False, &#39;timezone&#39;: &#39;UTC&#39;, &#39;tk.window_focus&#39;: False, &#39;toolbar&#39;: &#39;toolbar2&#39;, &#39;verbose.fileo&#39;: &#39;sys.stdout&#39;, &#39;verbose.level&#39;: &#39;silent&#39;, &#39;webagg.open_in_browser&#39;: True, &#39;webagg.port&#39;: 8988, &#39;webagg.port_retries&#39;: 50, &#39;xtick.alignment&#39;: &#39;center&#39;, &#39;xtick.bottom&#39;: True, &#39;xtick.color&#39;: &#39;k&#39;, &#39;xtick.direction&#39;: &#39;out&#39;, &#39;xtick.labelsize&#39;: &#39;medium&#39;, &#39;xtick.major.bottom&#39;: True, &#39;xtick.major.pad&#39;: 3.5, &#39;xtick.major.size&#39;: 3.5, &#39;xtick.major.top&#39;: True, &#39;xtick.major.width&#39;: 0.8, &#39;xtick.minor.bottom&#39;: True, &#39;xtick.minor.pad&#39;: 3.4, &#39;xtick.minor.size&#39;: 2.0, &#39;xtick.minor.top&#39;: True, &#39;xtick.minor.visible&#39;: False, &#39;xtick.minor.width&#39;: 0.6, &#39;xtick.top&#39;: False, &#39;ytick.alignment&#39;: &#39;center_baseline&#39;, &#39;ytick.color&#39;: &#39;k&#39;, &#39;ytick.direction&#39;: &#39;out&#39;, &#39;ytick.labelsize&#39;: &#39;medium&#39;, &#39;ytick.left&#39;: True, &#39;ytick.major.left&#39;: True, &#39;ytick.major.pad&#39;: 3.5, &#39;ytick.major.right&#39;: True, &#39;ytick.major.size&#39;: 3.5, &#39;ytick.major.width&#39;: 0.8, &#39;ytick.minor.left&#39;: True, &#39;ytick.minor.pad&#39;: 3.4, &#39;ytick.minor.right&#39;: True, &#39;ytick.minor.size&#39;: 2.0, &#39;ytick.minor.visible&#39;: False, &#39;ytick.minor.width&#39;: 0.6, &#39;ytick.right&#39;: False}) . 看完上面的属性值后，斯蒂文决定在图表尺寸 (figsize)，每英寸像素点 (dpi)，线条颜色 (color)，线条风格 (linestyle)，线条宽度 (linewidth)，横纵轴刻度 (xticks, yticks)，横纵轴边界 (xlim, ylim) 做改进。那就先看看它们的默认属性值是多少。 . print( &#39;figure size:&#39;, plt.rcParams[&#39;figure.figsize&#39;] ) print( &#39;figure dpi:&#39;,plt.rcParams[&#39;figure.dpi&#39;] ) print( &#39;line color:&#39;,plt.rcParams[&#39;lines.color&#39;] ) print( &#39;line style:&#39;,plt.rcParams[&#39;lines.linestyle&#39;] ) print( &#39;line width:&#39;,plt.rcParams[&#39;lines.linewidth&#39;] ) fig = plt.figure() ax = fig.add_subplot(1, 1, 1) ax.plot( spx[&#39;Adj Close&#39;].values ) print( &#39;xticks:&#39;, ax.get_xticks() ) print( &#39;yticks:&#39;, ax.get_yticks() ) print( &#39;xlim:&#39;, ax.get_xlim() ) print( &#39;ylim:&#39;, ax.get_ylim() ) . figure size: [6.0, 4.0] figure dpi: 72.0 line color: C0 line style: - line width: 1.5 xticks: [-100. 0. 100. 200. 300. 400. 500. 600. 700. 800.] yticks: [ 600. 800. 1000. 1200. 1400. 1600. 1800.] xlim: (-37.75, 792.75) ylim: (632.0990292500001, 1609.58102375) . . 将属性值打印结果和图一起看一目了然。现在我们知道这张图大小是 6×4，每英寸像素有 72 个，线颜色 C0 代表是蓝色，风格 - 是连续线，宽度 1.5，等等。 . 斯蒂文现在有个“大胆”的想法，把这些默认属性值显性的在代码出写出来，画出来的跟什么设置都不写生成的图应该是一样的。来验证一下： . #Create a new figure of size 6×4 points, using 72 dots per inch plt.figure( figsize=(6, 4), dpi=72) #Plot using blue color (C0) with a continuous line of width 1.5 (pixels) plt.plot( spx.values, color=&#39;C0&#39;, linewidth=1.5, linestyle=&#39;-&#39;) #Set x ticks plt.xticks( np.linspace(-100,800,10)) #Set y ticks plt.yticks( np.linspace(600,1800,7)) #Set x limits plt.xlim(-37.75, 792.75) #Set y limits plt.ylim(632.0990292500001, 1609.58102375) #Show result on screen plt.show() . . 一模一样！ . . 老板将信将疑。。。 . 2.3 设置尺寸和 DPI . . 用 figsize 和 dpi 一起可以控制图的大小和像素。 . 函数 figsize(w,h) 决定图的宽和高 (单位是英寸)，而属性 dpi 全称 dots per inches，测量每英寸多少像素。两个属性一起用，那么得到的图的像素为 . (wdpi, hdpi) . 套用在下面代码中，我们其实将图的大小设置成 16×6 平方英寸，而像素设置成 (1600, 600)，因为 dpi = 100。 . plt.figure( figsize=(16,6), dpi=100 ) plt.plot( spx.values ) plt.show() . . 运行代码生成大宽屏图！ . 2.4 设置颜色-风格-宽度 . . 在 plt.plot() 用 color，linewidth 和 linestyle 属性一起可以控制折线的颜色 (上面定义的深青色)、宽度 (2 像素) 和风格 (连续线)。 . plt.figure( figsize=(16,6), dpi=100 ) plt.plot( spx.values, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) plt.show() . . 现在线条更明显了，而深青色看起来也比较有品位。 . 2.5 设置边界 . . 下面代码第 2 行在图中 (fig) 添加了一个坐标系 (ax)，然后所有操作都在 ax 里面完成，比如用 . ax.plot() 来画折线 . | ax.set_xlim(), ax_set_ylim() 来设置横轴和纵轴的边界 . | . fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = spx.index y = spx.values ax.plot( x, y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) #ax.set_xlim([&#39;1/1/2007&#39;, &#39;1/1/2010&#39;]) #ax.set_ylim( y.min()*0.8, y.max()*1.2 ); #加分号则不打印y.min()*0.8, y.max()*1.2 . [&lt;matplotlib.lines.Line2D at 0x1c7fc574fd0&gt;] . . 第 3 行的 x 是日期 (回顾 spx 是一个 DataFrame，行标签是日期)。 . 第 6 行将横轴的上下边界设为 2007-01-01 和 2010-01-01，只好是整个时间序列的起始日和终止日。 . 第 7 行将纵轴的上下边界设为 spx 的最小值的 0.8 倍和最大值的 1.2 倍。 . 现在横轴的刻度标签都是日期，比数字刻度带来的信息多；而 spx 图离顶部也有空间，看起来没那么挤。 . 2.6 设置刻度和标签 . . 上图横轴的刻度个数 (老板说日期隔得有点开) 和标签显示 (老板说只有年月) 都是默认设置。为了满足老板的要求，斯蒂文只能手动设置，用以下两个函数： . 先用 ax.set_ticks() 设置出数值刻度 . | 再用 ax.set_xticklabels() 在对应的数值刻度上写标签 . | . fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = spx.index y = spx.values ax.plot( y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39; ) ax.set_xlim(-1, len(x)+1) ax.set_ylim( y.min()*0.8, y.max()*1.2 ) ax.set_xticks( range(0,len(x),40)) ax.set_xticklabels( [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in ax.get_xticks()], rotation=90 ); . . 第 7 行设置横轴的边界，下界是 - 1，上界是 len(x) +1。 . 第 10 行先设置横轴「数值刻度」为 range(0,len(x), 40)，即 0, 40, 80, …. . 第 11 行在这些「数值刻度」上写标签，即格式为 %Y-%m-%d 的日期。由于日期个数比较多，而且日期字符比较长，直接在图中显示出来会相互重叠非常难看。这里调节参数 rotation = 90 使得日期逆时针转了 90 度，看上图效果好多了。 . 现在横轴的刻度标签是带「年-月-日」的日期，而且标签的间隔刚刚好。 . 2.7 添加图例 . . 添加图例 (legend) 非常简单，只需要在 ax.plot() 里多设定一个参数 label，然后用 . ax.legend() . 其中 loc = 0 表示 matplotlib 自动安排一个最好位置显示图例，而 frameon = True 给图例加了外框。 . fig = plt.figure( figsize=(16,6), dpi=100) ax = fig.add_subplot(1,1,1) x = spx.index y = spx.values ax.plot( y, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax.legend( loc=0, frameon=True ) ax.set_xlim(-1, len(x)+1) ax.set_ylim( y.min()*0.8, y.max()*1.2 ) ax.set_xticks( range(0,len(x),40)) ax.set_xticklabels( [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in ax.get_xticks()], rotation=90 ); . . 注意图的右上角多了图例 S&amp;P500。 . 2.8 添加第二幅图 . . 在改进代码之前，先介绍一下 VIX 指数。 . 知识点 . VIX 指数是芝加哥期权交易所 (CBOE) 市场波动率指数的交易代号，常见于衡量 S&amp;P500 指数期权的隐含波动性，通常被称为「恐慌指数」，它是了解市场对未来30天市场波动性预期的一种衡量方法。 . 由其定义可知，S&amp;P500 指数涨时，VIX 跌，而 S&amp;P500 指数暴跌时，VIX 暴涨。 . 和之前一样，首先用 pd.read_csv 函数从存好的 VIX.csv 读取数据存成 DataFrame。 . data = pd.read_csv( &#39;data/VIX.csv&#39;, index_col=0, parse_dates=True, dayfirst=True ) vix = data[[&#39;Adj Close&#39;]].loc[&#39;2007-01-01&#39;:&#39;2010-01-01&#39;] vix.head(3).append(vix.tail(3)) . Adj Close . Date . 2007-01-03 12.040000 | . 2007-01-04 11.510000 | . 2007-01-05 12.140000 | . 2009-12-29 20.010000 | . 2009-12-30 19.959999 | . 2009-12-31 21.680000 | . 添加第二幅图也很简单，用两次 plt.plot() 或者 ax.plot() 即可。这里面用的是 plt 没用 ax，没有特殊原因，在本例中两者可以随意使用，但两者在使用「.methods」时有个小细节不知道大家注意到没有， . plt.xlim . | plt.ylim . | plt.xticks . | ax.set_xlim . | ax.set_ylim . | ax_set_xticks . | . fig = plt.figure( figsize=(16,6), dpi=100) x = spx.index y1 = spx.values y2 = vix.values plt.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) plt.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;VIX&#39; ) plt.legend( loc=0, frameon=True ) plt.xlim(-1, len(x)+1) plt.ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] plt.xticks( x_tick, x_label, rotation=90 ) plt.show() . . 这图怎么成这样？？？VIX 怎么是一条平线？ . 2.9 两个坐标系 &amp; 两幅子图 . . S&amp;P500 的量纲都是千位数，而 VIX 的量刚是两位数，两者放在一起，那可不是 VIX 就像一条水平线一样。两种改进方式： . 用两个坐标系 (two axes) . | 用两幅子图 (two subplots) . | 两个坐标系 fig = plt.figure( figsize=(16,6), dpi=100) ax1 = fig.add_subplot(1,1,1) x = spx.index y1 = spx.values y2 = vix.values ax1.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax1.set_xlim(-1, len(x)+1) ax1.set_ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] ax1.set_xticks( x_tick ) ax1.set_xticklabels( x_label, rotation=90 ) ax1.legend( loc=&#39;upper left&#39;, frameon=True ) #Add a second axes ax2 = ax1.twinx() ax2.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;VIX&#39; ) ax2.legend( loc=&#39;upper right&#39;, frameon=True ); . . 用 ax1 和 ax2 就能实现在两个坐标系上画图，代码核心部分是第 19 行的 . ax2 = ax1.twinx() . 在每个坐标系下画图以及各种设置前面都讲的很清楚了。 . Mc：股市那两条曲线的legend分开放在两侧，怎么看怎么别扭，还是放在一块显示比较好。 . 实现方式有二： . 仅使用一个轴的legend()函数 | 使用figure.legend() | fig = plt.figure( figsize=(16,6), dpi=100) ax1 = fig.add_subplot(1,1,1) x = spx.index y1 = spx.values y2 = vix.values lns1 = ax1.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax1.set_xlim(-1, len(x)+1) ax1.set_ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] ax1.set_xticks( x_tick ) ax1.set_xticklabels( x_label, rotation=90 ) # ax1.legend( loc=&#39;upper left&#39;, frameon=True ) #Add a second axes ax2 = ax1.twinx() lns2 = ax2.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;VIX&#39; ) # ax2.legend( loc=&#39;upper right&#39;, frameon=True ); # 方法一：仅使用一个轴的legend()函数 #lns = lns1+lns2 #labs = [l.get_label() for l in lns] #ax2.legend(lns, labs, loc=0) # 方法二：使用figure.legend() fig.legend(loc=1, bbox_to_anchor=(0.88,1.05), bbox_transform=ax.transAxes) . &lt;matplotlib.legend.Legend at 0x1c7fb007780&gt; . . 两幅子图 . plt.figure( figsize=(16,12), dpi=100) # subplot 1 plt.subplot(2,1,1) x = spx.index y1 = spx.values plt.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) plt.xlim(-1, len(x)+1) plt.ylim( y1.min()*0.8, y1.max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] plt.xticks( x_tick, x_label, rotation=45 ) plt.legend( loc=&#39;upper left&#39;, frameon=True ) # subplot 2 plt.subplot(2,1,2) y2 = vix.values plt.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;VIX&#39; ) plt.xlim(-1, len(x)+1) plt.ylim( y2.min()*0.8, y2.max()*1.2 ) plt.xticks( x_tick, x_label, rotation=45 ) plt.legend( loc=&#39;upper left&#39;, frameon=True ) plt.show() . . 定义 subplot(2,1,1) 和 subplot(2,1,2) 就能实现再两幅子图上画图。 . 在每幅子图上画图以及各种设置前面都讲的很清楚了。 . 这两种方法都可用，但在本例中，S&amp;P500 和 VIX 放在一起 (用两个坐标系) 更能看出它们之间的关系，比如 2008 年 9 月到 2009 年 3 月的金融危机期间，S&amp;P 500 在狂泻和 VIX 在飙升 。 . 2.10 设置标注 . 在金融危机时期，市场发生了 5 件大事，分别是 . 2017-10-11: 牛市顶点 . | 2008-03-12: 贝尔斯登倒闭 . | 2008-09-15: 雷曼兄弟倒闭 . | 2009-01-20: 苏格兰皇家银行股票抛售 . | 2009-04-02: G20 峰会 . | . . 加标注的代码略长，新内容为 . 第 3-7 行的定义危机事件，以元组的列表存储 . | 第 26-34 行的事件标注，用到 annotate() 函数 . | . from datetime import datetime . fig = plt.figure( figsize=(16,6), dpi=100) crisis_data = [(datetime(2007, 10, 11), &#39;Peak of bull market&#39;), (datetime(2008, 3, 12), &#39;Bear Stearns Fails&#39;), (datetime(2008, 9, 15), &#39;Lehman Bankruptcy&#39;), (datetime(2009, 1, 20), &#39;RBS Sell-off&#39;), (datetime(2009, 4, 2), &#39;G20 Summit&#39;)] ax1 = fig.add_subplot(1,1,1) x = spx.index y1 = spx.values y2 = vix.values ax1.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax1.set_xlim(-1, len(x)+1) ax1.set_ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] ax1.set_xticks( x_tick ) ax1.set_xticklabels( x_label, rotation=90 ) ax1.legend( loc=&#39;upper left&#39;, frameon=True ) for date, label in crisis_data: date = date.strftime(&#39;%Y-%m-%d&#39;) xi = x.get_loc(date) yi = spx.asof(date) ax1.scatter( xi, yi, 80, color=r_hex ) ax1.annotate( label, xy=(xi, yi + 60), xytext=(xi, yi+300), arrowprops=dict(facecolor=&#39;black&#39;,headwidth=4,width=1,headlength=6), horizontalalignment=&#39;left&#39;,verticalalignment=&#39;top&#39; ) . verticalalignment：垂直对齐方式 ，参数：[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ] horizontalalignment：水平对齐方式 ，参数：[ ‘center’ | ‘right’ | ‘left’ ] . #Add a second axes ax2 = ax1.twinx() ax2.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;VIX&#39; ) ax2.legend( loc=&#39;upper right&#39;, frameon=True ); . . 从第 26 行开始，用 for 循环读取 crisis_data 里面每个日期 date 和事件 label。 . 第 28 和 29 行是获取每一个 date 在整个日期数组中的索引 xi，以及对应的 spx 值 yi。 . 第 30 行用 scatter() 函数画出一个圆点，标注事件在 spx 折现上的位置。 . 第 31 和 34 行是重头戏，在 annotate() 函数里设置了事件，箭头坐标(距离圆点中心位置)，事件打印的坐标，箭头性质，以及对齐属性。 . 事件的确标注在图上了，但是效果像一坨~。 . 2.11 设置透明度 . . 为了把 VIX 折线弄得透明些，只用设置 ax2.plot() 里的 alpha 参数为 0.3，具体设什么值看你想要多透明，alpha 在 0 和 1 之间，0 是完全透明，1 是完全不透明。 . fig = plt.figure( figsize=(16,6), dpi=100) crisis_data = [(datetime(2007, 10, 11), &#39;Peak of bull market&#39;), (datetime(2008, 3, 12), &#39;Bear Stearns Fails&#39;), (datetime(2008, 9, 15), &#39;Lehman Bankruptcy&#39;), (datetime(2009, 1, 20), &#39;RBS Sell-off&#39;), (datetime(2009, 4, 2), &#39;G20 Summit&#39;)] ax1 = fig.add_subplot(1,1,1) x = spx.index y1 = spx.values y2 = vix.values ax1.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax1.set_xlim(-1, len(x)+1) ax1.set_ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) x_tick = range(0,len(x),40) x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] ax1.set_xticks( x_tick ) ax1.set_xticklabels( x_label, rotation=90 ) ax1.legend( loc=&#39;upper left&#39;, frameon=True ) for date, label in crisis_data: date = date.strftime(&#39;%Y-%m-%d&#39;) xi = x.get_loc(date) yi = spx.asof(date) ax1.scatter( xi, yi, 80, color=r_hex ) ax1.annotate( label, xy=(xi, yi + 60), xytext=(xi, yi+300), arrowprops=dict(facecolor=&#39;black&#39;,headwidth=4,width=1,headlength=6), horizontalalignment=&#39;left&#39;,verticalalignment=&#39;top&#39; ) #Add a second axes ax2 = ax1.twinx() #设置透明度 ax2.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;, label=&#39;VIX&#39;, alpha=0.3 ) ax2.legend( loc=&#39;upper right&#39;, frameon=True ); . . 美如画！雷曼兄弟倒闭 (事件 3) 后 S&amp;P 暴跌最厉害，而同期的 VIX 也飙到天际。在 G20 峰会 (事件 5) 过后，大国领导者一起解决金融危机问题，从那个点开始，S&amp;P500 上涨 VIX 下跌。 . 经济总体平稳！风险总体可控！ . . 2.12 完善细节 . . 既然老板关注这五个事件，而它们发生的日期可能没有落在横轴标签上，那老板不是在图上还是找不到他们发生的具体时间么？把它们加上去怎么样？ . fig = plt.figure( figsize=(16,6), dpi=100) crisis_data = [(datetime(2007, 10, 11), &#39;Peak of bull market&#39;), (datetime(2008, 3, 12), &#39;Bear Stearns Fails&#39;), (datetime(2008, 9, 15), &#39;Lehman Bankruptcy&#39;), (datetime(2009, 1, 20), &#39;RBS Sell-off&#39;), (datetime(2009, 4, 2), &#39;G20 Summit&#39;)] ax1 = fig.add_subplot(1,1,1) x = spx.index y1 = spx.values y2 = vix.values ax1.plot( y1, color=dt_hex, linewidth=2, linestyle=&#39;-&#39;,label=&#39;S&amp;P500&#39; ) ax1.set_xlim(-1, len(x)+1) ax1.set_ylim( np.vstack([y1,y2]).min()*0.8, np.vstack([y1,y2]).max()*1.2 ) ax1.legend( loc=&#39;upper left&#39;, frameon=True ) init_tick = list( range(0,len(x),40) ) impt_tick = [] impt_date = [] for date, label in crisis_data: date = date.strftime(&#39;%Y-%m-%d&#39;) impt_date.append(date) xi = x.get_loc(date) impt_tick.append(xi) yi = spx.asof(date) ax1.scatter( xi, yi, 80, color=r_hex ) ax1.annotate( label, xy=(xi, yi + 60), xytext=(xi, yi+300), arrowprops=dict(facecolor=&#39;black&#39;,headwidth=4,width=1,headlength=6), horizontalalignment=&#39;left&#39;,verticalalignment=&#39;top&#39; ) x_tick = init_tick + impt_tick x_label = [x[i].strftime(&#39;%Y-%m-%d&#39;) for i in x_tick] ax1.set_xticks( x_tick ) ax1.set_xticklabels( x_label, rotation=90 ) for i, label in enumerate(ax1.get_xticklabels()): if i &gt;= len(init_tick): label.set_color(r_hex) label.set_fontweight(&#39;bold&#39;) else: label.set_fontsize(9) #Add a second axes ax2 = ax1.twinx() ax2.plot( y2, color=r_hex, linewidth=2, linestyle=&#39;-&#39;, label=&#39;VIX&#39;, alpha=0.3 ) ax2.legend( loc=&#39;upper right&#39;, frameon=True ); . . 新添加的代码在第 20-22 行和第 43-48 行。主要就是把日期分成两类： . 常规日期标签 init_tick . | 五个事件日期标签 impt_tick . | . . 3 画有效图 . 3.1 概览 . 在做图表设计时候经常面临着怎么选用合适的图表，图表展示的关系分为四大类 (点击下图放大)： . 分布 (distribution) . | 联系 (relationship) . | 比较 (comparison) . | 构成 (composition) . | . 在选用图表前首先要想清楚：你要表达什么样的数据关系。上面的图表分类太过繁多，接下来我们只讨论在量化金融中用的最多的几种类型，即 . 用直方图来展示股票价格和收益的分布 . | 用散点图来展示两支股票之间的联系 . | 用折线图来比较汇率在不同窗口的移动平均线 . | 用饼状图来展示股票组合的构成成分 . | . 首先用 YahooFinancials API 来下载若干资产的一年历史数据 (安装该 API 用 pip install yahoofinancials)： . 在 Anaconda 命令框(开始菜单的搜索框里搜ana,搜索到Anaconda Prompt并打开)里 . pip install yahoofinancials . 起始日：2018-04-29 . | 终止日：2019-04-29 . | 五只股票：英伟达、亚马逊、阿里巴巴、脸书、苹果 . | 三个汇率：欧元美元、美元日元、美元人民币 . | . 下面代码就是从 API 获取数据，股票用的是股票代号 (stock code)，而货币用的该 API 要求的格式，比如「欧元美元」用 EURUSD=X，而不是市场常见的 EURUSD，而「美元日元」用 JPY=X 而不是 USDJPY。 . from yahoofinancials import YahooFinancials . start_date = &#39;2018-04-29&#39; end_date = &#39;2019-04-29&#39; stock_code = [&#39;NVDA&#39;,&#39;AMZN&#39;,&#39;BABA&#39;,&#39;FB&#39;,&#39;AAPL&#39; ] currency_code = [&#39;EURUSD=X&#39;, &#39;JPY=X&#39;, &#39;CNY=X&#39;] . stock =YahooFinancials( stock_code ) currency = YahooFinancials( currency_code ) stock_daily = stock.get_historical_price_data( start_date, end_date, &#39;daily&#39; ) currency_daily = currency.get_historical_price_data( start_date, end_date, &#39;daily&#39; ) . 该 API 返回结果 stock_daily 和 currency_daily 是「字典」格式，样子非常丑陋，感受一下。 . stock_daily . 展开查看 {&#39;AAPL&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {&#39;dividends&#39;: {&#39;2018-05-11&#39;: {&#39;amount&#39;: 0.73, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;}, &#39;2018-08-10&#39;: {&#39;amount&#39;: 0.73, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;}, &#39;2018-11-08&#39;: {&#39;amount&#39;: 0.73, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;}, &#39;2019-02-08&#39;: {&#39;amount&#39;: 0.73, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;}}}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 345479400, &#39;formatted_date&#39;: &#39;1980-12-12&#39;}, &#39;instrumentType&#39;: &#39;EQUITY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 160.24440002441406, &#39;close&#39;: 165.25999450683594, &#39;date&#39;: 1525095000, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 167.25999450683594, &#39;low&#39;: 161.83999633789062, &#39;open&#39;: 162.1300048828125, &#39;volume&#39;: 42427400}, {&#39;adjclose&#39;: 163.96783447265625, &#39;close&#39;: 169.10000610351562, &#39;date&#39;: 1525181400, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 169.1999969482422, &#39;low&#39;: 165.27000427246094, &#39;open&#39;: 166.41000366210938, &#39;volume&#39;: 53569400}, {&#39;adjclose&#39;: 171.21115112304688, &#39;close&#39;: 176.57000732421875, &#39;date&#39;: 1525267800, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 177.75, &#39;low&#39;: 173.8000030517578, &#39;open&#39;: 175.22999572753906, &#39;volume&#39;: 66539400}, {&#39;adjclose&#39;: 171.52142333984375, &#39;close&#39;: 176.88999938964844, &#39;date&#39;: 1525354200, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 177.5, &#39;low&#39;: 174.44000244140625, &#39;open&#39;: 175.8800048828125, &#39;volume&#39;: 34068200}, {&#39;adjclose&#39;: 178.2508087158203, &#39;close&#39;: 183.8300018310547, &#39;date&#39;: 1525440600, &#39;formatted_date&#39;: &#39;2018-05-04&#39;, &#39;high&#39;: 184.25, &#39;low&#39;: 178.1699981689453, &#39;open&#39;: 178.25, &#39;volume&#39;: 56201300}, {&#39;adjclose&#39;: 179.54043579101562, &#39;close&#39;: 185.16000366210938, &#39;date&#39;: 1525699800, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 187.6699981689453, &#39;low&#39;: 184.75, &#39;open&#39;: 185.17999267578125, &#39;volume&#39;: 42451400}, {&#39;adjclose&#39;: 180.40342712402344, &#39;close&#39;: 186.0500030517578, &#39;date&#39;: 1525786200, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 186.22000122070312, &#39;low&#39;: 183.6699981689453, &#39;open&#39;: 184.99000549316406, &#39;volume&#39;: 28402800}, {&#39;adjclose&#39;: 181.67367553710938, &#39;close&#39;: 187.36000061035156, &#39;date&#39;: 1525872600, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 187.39999389648438, &#39;low&#39;: 185.22000122070312, &#39;open&#39;: 186.5500030517578, &#39;volume&#39;: 23211200}, {&#39;adjclose&#39;: 184.27232360839844, &#39;close&#39;: 190.0399932861328, &#39;date&#39;: 1525959000, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 190.3699951171875, &#39;low&#39;: 187.64999389648438, &#39;open&#39;: 187.74000549316406, &#39;volume&#39;: 27989300}, {&#39;adjclose&#39;: 183.5714874267578, &#39;close&#39;: 188.58999633789062, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;, &#39;high&#39;: 190.05999755859375, &#39;low&#39;: 187.4499969482422, &#39;open&#39;: 189.49000549316406, &#39;volume&#39;: 26212200}, {&#39;adjclose&#39;: 183.14320373535156, &#39;close&#39;: 188.14999389648438, &#39;date&#39;: 1526304600, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 189.52999877929688, &#39;low&#39;: 187.86000061035156, &#39;open&#39;: 189.00999450683594, &#39;volume&#39;: 20778800}, {&#39;adjclose&#39;: 181.47872924804688, &#39;close&#39;: 186.44000244140625, &#39;date&#39;: 1526391000, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 187.07000732421875, &#39;low&#39;: 185.10000610351562, &#39;open&#39;: 186.77999877929688, &#39;volume&#39;: 23695200}, {&#39;adjclose&#39;: 183.17237854003906, &#39;close&#39;: 188.17999267578125, &#39;date&#39;: 1526477400, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 188.4600067138672, &#39;low&#39;: 186.0, &#39;open&#39;: 186.07000732421875, &#39;volume&#39;: 19183100}, {&#39;adjclose&#39;: 182.01406860351562, &#39;close&#39;: 186.99000549316406, &#39;date&#39;: 1526563800, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 188.91000366210938, &#39;low&#39;: 186.36000061035156, &#39;open&#39;: 188.0, &#39;volume&#39;: 17294000}, {&#39;adjclose&#39;: 181.35215759277344, &#39;close&#39;: 186.30999755859375, &#39;date&#39;: 1526650200, &#39;formatted_date&#39;: &#39;2018-05-18&#39;, &#39;high&#39;: 187.80999755859375, &#39;low&#39;: 186.1300048828125, &#39;open&#39;: 187.19000244140625, &#39;volume&#39;: 18297700}, {&#39;adjclose&#39;: 182.6370391845703, &#39;close&#39;: 187.6300048828125, &#39;date&#39;: 1526909400, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 189.27000427246094, &#39;low&#39;: 186.91000366210938, &#39;open&#39;: 188.0, &#39;volume&#39;: 18400800}, {&#39;adjclose&#39;: 182.17953491210938, &#39;close&#39;: 187.16000366210938, &#39;date&#39;: 1526995800, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 188.8800048828125, &#39;low&#39;: 186.77999877929688, &#39;open&#39;: 188.3800048828125, &#39;volume&#39;: 15240700}, {&#39;adjclose&#39;: 183.34764099121094, &#39;close&#39;: 188.36000061035156, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 188.5, &#39;low&#39;: 185.75999450683594, &#39;open&#39;: 186.35000610351562, &#39;volume&#39;: 20058400}, {&#39;adjclose&#39;: 183.14320373535156, &#39;close&#39;: 188.14999389648438, &#39;date&#39;: 1527168600, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 188.83999633789062, &#39;low&#39;: 186.2100067138672, &#39;open&#39;: 188.77000427246094, &#39;volume&#39;: 23234000}, {&#39;adjclose&#39;: 183.561767578125, &#39;close&#39;: 188.5800018310547, &#39;date&#39;: 1527255000, &#39;formatted_date&#39;: &#39;2018-05-25&#39;, &#39;high&#39;: 189.64999389648438, &#39;low&#39;: 187.64999389648438, &#39;open&#39;: 188.22999572753906, &#39;volume&#39;: 17461000}, {&#39;adjclose&#39;: 182.89987182617188, &#39;close&#39;: 187.89999389648438, &#39;date&#39;: 1527600600, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 188.75, &#39;low&#39;: 186.8699951171875, &#39;open&#39;: 187.60000610351562, &#39;volume&#39;: 22514100}, {&#39;adjclose&#39;: 182.51051330566406, &#39;close&#39;: 187.5, &#39;date&#39;: 1527687000, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 188.0, &#39;low&#39;: 186.77999877929688, &#39;open&#39;: 187.72000122070312, &#39;volume&#39;: 18690500}, {&#39;adjclose&#39;: 181.89724731445312, &#39;close&#39;: 186.8699951171875, &#39;date&#39;: 1527773400, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 188.22999572753906, &#39;low&#39;: 186.13999938964844, &#39;open&#39;: 187.22000122070312, &#39;volume&#39;: 27482800}, {&#39;adjclose&#39;: 185.1775665283203, &#39;close&#39;: 190.24000549316406, &#39;date&#39;: 1527859800, &#39;formatted_date&#39;: &#39;2018-06-01&#39;, &#39;high&#39;: 190.25999450683594, &#39;low&#39;: 187.75, &#39;open&#39;: 187.99000549316406, &#39;volume&#39;: 23442500}, {&#39;adjclose&#39;: 186.72528076171875, &#39;close&#39;: 191.8300018310547, &#39;date&#39;: 1528119000, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 193.4199981689453, &#39;low&#39;: 191.35000610351562, &#39;open&#39;: 191.63999938964844, &#39;volume&#39;: 26266200}, {&#39;adjclose&#39;: 188.16587829589844, &#39;close&#39;: 193.30999755859375, &#39;date&#39;: 1528205400, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 193.94000244140625, &#39;low&#39;: 192.36000061035156, &#39;open&#39;: 193.07000732421875, &#39;volume&#39;: 21566000}, {&#39;adjclose&#39;: 188.81805419921875, &#39;close&#39;: 193.97999572753906, &#39;date&#39;: 1528291800, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 194.0800018310547, &#39;low&#39;: 191.9199981689453, &#39;open&#39;: 193.6300048828125, &#39;volume&#39;: 20933600}, {&#39;adjclose&#39;: 188.31190490722656, &#39;close&#39;: 193.4600067138672, &#39;date&#39;: 1528378200, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 194.1999969482422, &#39;low&#39;: 192.33999633789062, &#39;open&#39;: 194.13999938964844, &#39;volume&#39;: 21347200}, {&#39;adjclose&#39;: 186.59873962402344, &#39;close&#39;: 191.6999969482422, &#39;date&#39;: 1528464600, &#39;formatted_date&#39;: &#39;2018-06-08&#39;, &#39;high&#39;: 192.0, &#39;low&#39;: 189.77000427246094, &#39;open&#39;: 191.1699981689453, &#39;volume&#39;: 26656800}, {&#39;adjclose&#39;: 186.1412353515625, &#39;close&#39;: 191.22999572753906, &#39;date&#39;: 1528723800, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 191.97000122070312, &#39;low&#39;: 190.2100067138672, &#39;open&#39;: 191.35000610351562, &#39;volume&#39;: 18308500}, {&#39;adjclose&#39;: 187.16329956054688, &#39;close&#39;: 192.27999877929688, &#39;date&#39;: 1528810200, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 192.61000061035156, &#39;low&#39;: 191.14999389648438, &#39;open&#39;: 191.38999938964844, &#39;volume&#39;: 16911100}, {&#39;adjclose&#39;: 185.62533569335938, &#39;close&#39;: 190.6999969482422, &#39;date&#39;: 1528896600, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 192.8800048828125, &#39;low&#39;: 190.44000244140625, &#39;open&#39;: 192.4199981689453, &#39;volume&#39;: 21638400}, {&#39;adjclose&#39;: 185.7227020263672, &#39;close&#39;: 190.8000030517578, &#39;date&#39;: 1528983000, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 191.57000732421875, &#39;low&#39;: 190.22000122070312, &#39;open&#39;: 191.5500030517578, &#39;volume&#39;: 21610100}, {&#39;adjclose&#39;: 183.8148651123047, &#39;close&#39;: 188.83999633789062, &#39;date&#39;: 1529069400, &#39;formatted_date&#39;: &#39;2018-06-15&#39;, &#39;high&#39;: 190.16000366210938, &#39;low&#39;: 188.25999450683594, &#39;open&#39;: 190.02999877929688, &#39;volume&#39;: 61719200}, {&#39;adjclose&#39;: 183.7174835205078, &#39;close&#39;: 188.74000549316406, &#39;date&#39;: 1529328600, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 189.22000122070312, &#39;low&#39;: 187.1999969482422, &#39;open&#39;: 187.8800048828125, &#39;volume&#39;: 18484900}, {&#39;adjclose&#39;: 180.74867248535156, &#39;close&#39;: 185.69000244140625, &#39;date&#39;: 1529415000, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 186.3300018310547, &#39;low&#39;: 183.4499969482422, &#39;open&#39;: 185.13999938964844, &#39;volume&#39;: 33578500}, {&#39;adjclose&#39;: 181.537109375, &#39;close&#39;: 186.5, &#39;date&#39;: 1529501400, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 187.1999969482422, &#39;low&#39;: 185.72999572753906, &#39;open&#39;: 186.35000610351562, &#39;volume&#39;: 20628700}, {&#39;adjclose&#39;: 180.52479553222656, &#39;close&#39;: 185.4600067138672, &#39;date&#39;: 1529587800, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 188.35000610351562, &#39;low&#39;: 184.94000244140625, &#39;open&#39;: 187.25, &#39;volume&#39;: 25711900}, {&#39;adjclose&#39;: 179.99913024902344, &#39;close&#39;: 184.9199981689453, &#39;date&#39;: 1529674200, &#39;formatted_date&#39;: &#39;2018-06-22&#39;, &#39;high&#39;: 186.14999389648438, &#39;low&#39;: 184.6999969482422, &#39;open&#39;: 186.1199951171875, &#39;volume&#39;: 27200400}, {&#39;adjclose&#39;: 177.32232666015625, &#39;close&#39;: 182.1699981689453, &#39;date&#39;: 1529933400, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 184.9199981689453, &#39;low&#39;: 180.72999572753906, &#39;open&#39;: 183.39999389648438, &#39;volume&#39;: 31663100}, {&#39;adjclose&#39;: 179.52218627929688, &#39;close&#39;: 184.42999267578125, &#39;date&#39;: 1530019800, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 186.52999877929688, &#39;low&#39;: 182.5399932861328, &#39;open&#39;: 182.99000549316406, &#39;volume&#39;: 24569200}, {&#39;adjclose&#39;: 179.25936889648438, &#39;close&#39;: 184.16000366210938, &#39;date&#39;: 1530106200, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 187.27999877929688, &#39;low&#39;: 184.02999877929688, &#39;open&#39;: 185.22999572753906, &#39;volume&#39;: 25285300}, {&#39;adjclose&#39;: 180.56373596191406, &#39;close&#39;: 185.5, &#39;date&#39;: 1530192600, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 186.2100067138672, &#39;low&#39;: 183.8000030517578, &#39;open&#39;: 184.10000610351562, &#39;volume&#39;: 17365200}, {&#39;adjclose&#39;: 180.18408203125, &#39;close&#39;: 185.11000061035156, &#39;date&#39;: 1530279000, &#39;formatted_date&#39;: &#39;2018-06-29&#39;, &#39;high&#39;: 187.19000244140625, &#39;low&#39;: 182.91000366210938, &#39;open&#39;: 186.2899932861328, &#39;volume&#39;: 22737700}, {&#39;adjclose&#39;: 182.19900512695312, &#39;close&#39;: 187.17999267578125, &#39;date&#39;: 1530538200, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 187.3000030517578, &#39;low&#39;: 183.4199981689453, &#39;open&#39;: 183.82000732421875, &#39;volume&#39;: 17731300}, {&#39;adjclose&#39;: 179.02577209472656, &#39;close&#39;: 183.9199981689453, &#39;date&#39;: 1530624600, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 187.9499969482422, &#39;low&#39;: 183.5399932861328, &#39;open&#39;: 187.7899932861328, &#39;volume&#39;: 13954800}, {&#39;adjclose&#39;: 180.46636962890625, &#39;close&#39;: 185.39999389648438, &#39;date&#39;: 1530797400, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 186.41000366210938, &#39;low&#39;: 184.27999877929688, &#39;open&#39;: 185.25999450683594, &#39;volume&#39;: 16604200}, {&#39;adjclose&#39;: 182.9679718017578, &#39;close&#39;: 187.97000122070312, &#39;date&#39;: 1530883800, &#39;formatted_date&#39;: &#39;2018-07-06&#39;, &#39;high&#39;: 188.42999267578125, &#39;low&#39;: 185.1999969482422, &#39;open&#39;: 185.4199981689453, &#39;volume&#39;: 17485200}, {&#39;adjclose&#39;: 185.508544921875, &#39;close&#39;: 190.5800018310547, &#39;date&#39;: 1531143000, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 190.67999267578125, &#39;low&#39;: 189.3000030517578, &#39;open&#39;: 189.5, &#39;volume&#39;: 19756600}, {&#39;adjclose&#39;: 185.28469848632812, &#39;close&#39;: 190.35000610351562, &#39;date&#39;: 1531229400, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 191.27999877929688, &#39;low&#39;: 190.17999267578125, &#39;open&#39;: 190.7100067138672, &#39;volume&#39;: 15939100}, {&#39;adjclose&#39;: 182.88038635253906, &#39;close&#39;: 187.8800048828125, &#39;date&#39;: 1531315800, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 189.77999877929688, &#39;low&#39;: 187.61000061035156, &#39;open&#39;: 188.5, &#39;volume&#39;: 18831500}, {&#39;adjclose&#39;: 185.94656372070312, &#39;close&#39;: 191.02999877929688, &#39;date&#39;: 1531402200, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 191.41000366210938, &#39;low&#39;: 189.30999755859375, &#39;open&#39;: 189.52999877929688, &#39;volume&#39;: 18041100}, {&#39;adjclose&#39;: 186.2385711669922, &#39;close&#39;: 191.3300018310547, &#39;date&#39;: 1531488600, &#39;formatted_date&#39;: &#39;2018-07-13&#39;, &#39;high&#39;: 191.83999633789062, &#39;low&#39;: 190.89999389648438, &#39;open&#39;: 191.0800018310547, &#39;volume&#39;: 12513900}, {&#39;adjclose&#39;: 185.82977294921875, &#39;close&#39;: 190.91000366210938, &#39;date&#39;: 1531747800, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 192.64999389648438, &#39;low&#39;: 190.4199981689453, &#39;open&#39;: 191.52000427246094, &#39;volume&#39;: 15043100}, {&#39;adjclose&#39;: 186.35537719726562, &#39;close&#39;: 191.4499969482422, &#39;date&#39;: 1531834200, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 191.8699951171875, &#39;low&#39;: 189.1999969482422, &#39;open&#39;: 189.75, &#39;volume&#39;: 15534500}, {&#39;adjclose&#39;: 185.33331298828125, &#39;close&#39;: 190.39999389648438, &#39;date&#39;: 1531920600, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 191.8000030517578, &#39;low&#39;: 189.92999267578125, &#39;open&#39;: 191.77999877929688, &#39;volume&#39;: 16393400}, {&#39;adjclose&#39;: 186.77395629882812, &#39;close&#39;: 191.8800048828125, &#39;date&#39;: 1532007000, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 192.5500030517578, &#39;low&#39;: 189.69000244140625, &#39;open&#39;: 189.69000244140625, &#39;volume&#39;: 20286800}, {&#39;adjclose&#39;: 186.34568786621094, &#39;close&#39;: 191.44000244140625, &#39;date&#39;: 1532093400, &#39;formatted_date&#39;: &#39;2018-07-20&#39;, &#39;high&#39;: 192.42999267578125, &#39;low&#39;: 190.1699981689453, &#39;open&#39;: 191.77999877929688, &#39;volume&#39;: 20676200}, {&#39;adjclose&#39;: 186.5111083984375, &#39;close&#39;: 191.61000061035156, &#39;date&#39;: 1532352600, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 191.9600067138672, &#39;low&#39;: 189.55999755859375, &#39;open&#39;: 190.67999267578125, &#39;volume&#39;: 15989400}, {&#39;adjclose&#39;: 187.86415100097656, &#39;close&#39;: 193.0, &#39;date&#39;: 1532439000, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 193.66000366210938, &#39;low&#39;: 192.0500030517578, &#39;open&#39;: 192.4499969482422, &#39;volume&#39;: 18697900}, {&#39;adjclose&#39;: 189.63571166992188, &#39;close&#39;: 194.82000732421875, &#39;date&#39;: 1532525400, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 194.85000610351562, &#39;low&#39;: 192.42999267578125, &#39;open&#39;: 193.05999755859375, &#39;volume&#39;: 16709900}, {&#39;adjclose&#39;: 189.0419464111328, &#39;close&#39;: 194.2100067138672, &#39;date&#39;: 1532611800, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 195.9600067138672, &#39;low&#39;: 193.61000061035156, &#39;open&#39;: 194.61000061035156, &#39;volume&#39;: 19076000}, {&#39;adjclose&#39;: 185.8979034423828, &#39;close&#39;: 190.97999572753906, &#39;date&#39;: 1532698200, &#39;formatted_date&#39;: &#39;2018-07-27&#39;, &#39;high&#39;: 195.19000244140625, &#39;low&#39;: 190.10000610351562, &#39;open&#39;: 194.99000549316406, &#39;volume&#39;: 24024000}, {&#39;adjclose&#39;: 184.8563690185547, &#39;close&#39;: 189.91000366210938, &#39;date&#39;: 1532957400, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 192.1999969482422, &#39;low&#39;: 189.07000732421875, &#39;open&#39;: 191.89999389648438, &#39;volume&#39;: 21029500}, {&#39;adjclose&#39;: 185.2262420654297, &#39;close&#39;: 190.2899932861328, &#39;date&#39;: 1533043800, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 192.13999938964844, &#39;low&#39;: 189.33999633789062, &#39;open&#39;: 190.3000030517578, &#39;volume&#39;: 39373000}, {&#39;adjclose&#39;: 196.13795471191406, &#39;close&#39;: 201.5, &#39;date&#39;: 1533130200, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 201.75999450683594, &#39;low&#39;: 197.30999755859375, &#39;open&#39;: 199.1300048828125, &#39;volume&#39;: 67935700}, {&#39;adjclose&#39;: 201.8712158203125, &#39;close&#39;: 207.38999938964844, &#39;date&#39;: 1533216600, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 208.3800048828125, &#39;low&#39;: 200.35000610351562, &#39;open&#39;: 200.5800018310547, &#39;volume&#39;: 62404000}, {&#39;adjclose&#39;: 202.45523071289062, &#39;close&#39;: 207.99000549316406, &#39;date&#39;: 1533303000, &#39;formatted_date&#39;: &#39;2018-08-03&#39;, &#39;high&#39;: 208.74000549316406, &#39;low&#39;: 205.47999572753906, &#39;open&#39;: 207.02999877929688, &#39;volume&#39;: 33447400}, {&#39;adjclose&#39;: 203.50650024414062, &#39;close&#39;: 209.07000732421875, &#39;date&#39;: 1533562200, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 209.25, &#39;low&#39;: 207.07000732421875, &#39;open&#39;: 208.0, &#39;volume&#39;: 25425400}, {&#39;adjclose&#39;: 201.59864807128906, &#39;close&#39;: 207.11000061035156, &#39;date&#39;: 1533648600, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 209.5, &#39;low&#39;: 206.75999450683594, &#39;open&#39;: 209.32000732421875, &#39;volume&#39;: 25587400}, {&#39;adjclose&#39;: 201.73495483398438, &#39;close&#39;: 207.25, &#39;date&#39;: 1533735000, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 207.80999755859375, &#39;low&#39;: 204.52000427246094, &#39;open&#39;: 206.0500030517578, &#39;volume&#39;: 22525500}, {&#39;adjclose&#39;: 203.3215789794922, &#39;close&#39;: 208.8800048828125, &#39;date&#39;: 1533821400, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 209.77999877929688, &#39;low&#39;: 207.1999969482422, &#39;open&#39;: 209.52999877929688, &#39;volume&#39;: 23492600}, {&#39;adjclose&#39;: 202.71592712402344, &#39;close&#39;: 207.52999877929688, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;, &#39;high&#39;: 209.10000610351562, &#39;low&#39;: 206.6699981689453, &#39;open&#39;: 207.36000061035156, &#39;volume&#39;: 24611200}, {&#39;adjclose&#39;: 204.02484130859375, &#39;close&#39;: 208.8699951171875, &#39;date&#39;: 1534167000, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 210.9499969482422, &#39;low&#39;: 207.6999969482422, &#39;open&#39;: 209.30999755859375, &#39;volume&#39;: 25890900}, {&#39;adjclose&#39;: 204.88449096679688, &#39;close&#39;: 209.75, &#39;date&#39;: 1534253400, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 210.55999755859375, &#39;low&#39;: 208.25999450683594, &#39;open&#39;: 210.16000366210938, &#39;volume&#39;: 20748000}, {&#39;adjclose&#39;: 205.3630828857422, &#39;close&#39;: 210.24000549316406, &#39;date&#39;: 1534339800, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 210.74000549316406, &#39;low&#39;: 208.3300018310547, &#39;open&#39;: 209.22000122070312, &#39;volume&#39;: 28807600}, {&#39;adjclose&#39;: 208.3716583251953, &#39;close&#39;: 213.32000732421875, &#39;date&#39;: 1534426200, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 213.80999755859375, &#39;low&#39;: 211.47000122070312, &#39;open&#39;: 211.75, &#39;volume&#39;: 28500400}, {&#39;adjclose&#39;: 212.53280639648438, &#39;close&#39;: 217.5800018310547, &#39;date&#39;: 1534512600, &#39;formatted_date&#39;: &#39;2018-08-17&#39;, &#39;high&#39;: 217.9499969482422, &#39;low&#39;: 213.16000366210938, &#39;open&#39;: 213.44000244140625, &#39;volume&#39;: 35427000}, {&#39;adjclose&#39;: 210.46200561523438, &#39;close&#39;: 215.4600067138672, &#39;date&#39;: 1534771800, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 219.17999267578125, &#39;low&#39;: 215.11000061035156, &#39;open&#39;: 218.10000610351562, &#39;volume&#39;: 30287700}, {&#39;adjclose&#39;: 210.05172729492188, &#39;close&#39;: 215.0399932861328, &#39;date&#39;: 1534858200, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 217.19000244140625, &#39;low&#39;: 214.02999877929688, &#39;open&#39;: 216.8000030517578, &#39;volume&#39;: 26159800}, {&#39;adjclose&#39;: 210.0615234375, &#39;close&#39;: 215.0500030517578, &#39;date&#39;: 1534944600, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 216.36000061035156, &#39;low&#39;: 213.83999633789062, &#39;open&#39;: 214.10000610351562, &#39;volume&#39;: 19018100}, {&#39;adjclose&#39;: 210.49131774902344, &#39;close&#39;: 215.49000549316406, &#39;date&#39;: 1535031000, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 217.0500030517578, &#39;low&#39;: 214.60000610351562, &#39;open&#39;: 214.64999389648438, &#39;volume&#39;: 18883200}, {&#39;adjclose&#39;: 211.14576721191406, &#39;close&#39;: 216.16000366210938, &#39;date&#39;: 1535117400, &#39;formatted_date&#39;: &#39;2018-08-24&#39;, &#39;high&#39;: 216.89999389648438, &#39;low&#39;: 215.11000061035156, &#39;open&#39;: 216.60000610351562, &#39;volume&#39;: 18476400}, {&#39;adjclose&#39;: 212.88446044921875, &#39;close&#39;: 217.94000244140625, &#39;date&#39;: 1535376600, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 218.74000549316406, &#39;low&#39;: 216.3300018310547, &#39;open&#39;: 217.14999389648438, &#39;volume&#39;: 20525100}, {&#39;adjclose&#39;: 214.6036376953125, &#39;close&#39;: 219.6999969482422, &#39;date&#39;: 1535463000, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 220.5399932861328, &#39;low&#39;: 218.9199981689453, &#39;open&#39;: 219.00999450683594, &#39;volume&#39;: 22776800}, {&#39;adjclose&#39;: 217.8075714111328, &#39;close&#39;: 222.97999572753906, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 223.49000549316406, &#39;low&#39;: 219.41000366210938, &#39;open&#39;: 220.14999389648438, &#39;volume&#39;: 27254800}, {&#39;adjclose&#39;: 219.80999755859375, &#39;close&#39;: 225.02999877929688, &#39;date&#39;: 1535635800, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 228.25999450683594, &#39;low&#39;: 222.39999389648438, &#39;open&#39;: 223.25, &#39;volume&#39;: 48793800}, {&#39;adjclose&#39;: 222.3496856689453, &#39;close&#39;: 227.6300048828125, &#39;date&#39;: 1535722200, &#39;formatted_date&#39;: &#39;2018-08-31&#39;, &#39;high&#39;: 228.8699951171875, &#39;low&#39;: 226.0, &#39;open&#39;: 226.50999450683594, &#39;volume&#39;: 43340100}, {&#39;adjclose&#39;: 223.06275939941406, &#39;close&#39;: 228.36000061035156, &#39;date&#39;: 1536067800, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 229.17999267578125, &#39;low&#39;: 226.6300048828125, &#39;open&#39;: 228.41000366210938, &#39;volume&#39;: 27390100}, {&#39;adjclose&#39;: 221.6073455810547, &#39;close&#39;: 226.8699951171875, &#39;date&#39;: 1536154200, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 229.6699981689453, &#39;low&#39;: 225.10000610351562, &#39;open&#39;: 228.99000549316406, &#39;volume&#39;: 33333000}, {&#39;adjclose&#39;: 217.92478942871094, &#39;close&#39;: 223.10000610351562, &#39;date&#39;: 1536240600, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 227.35000610351562, &#39;low&#39;: 221.3000030517578, &#39;open&#39;: 226.22999572753906, &#39;volume&#39;: 34290000}, {&#39;adjclose&#39;: 216.1665496826172, &#39;close&#39;: 221.3000030517578, &#39;date&#39;: 1536327000, &#39;formatted_date&#39;: &#39;2018-09-07&#39;, &#39;high&#39;: 225.3699951171875, &#39;low&#39;: 220.7100067138672, &#39;open&#39;: 221.85000610351562, &#39;volume&#39;: 37619800}, {&#39;adjclose&#39;: 213.26541137695312, &#39;close&#39;: 218.3300018310547, &#39;date&#39;: 1536586200, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 221.85000610351562, &#39;low&#39;: 216.47000122070312, &#39;open&#39;: 220.9499969482422, &#39;volume&#39;: 39516500}, {&#39;adjclose&#39;: 218.65740966796875, &#39;close&#39;: 223.85000610351562, &#39;date&#39;: 1536672600, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 224.3000030517578, &#39;low&#39;: 216.55999755859375, &#39;open&#39;: 218.00999450683594, &#39;volume&#39;: 35749000}, {&#39;adjclose&#39;: 215.94187927246094, &#39;close&#39;: 221.07000732421875, &#39;date&#39;: 1536759000, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 225.0, &#39;low&#39;: 219.83999633789062, &#39;open&#39;: 224.94000244140625, &#39;volume&#39;: 49278700}, {&#39;adjclose&#39;: 221.15798950195312, &#39;close&#39;: 226.41000366210938, &#39;date&#39;: 1536845400, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 228.35000610351562, &#39;low&#39;: 222.57000732421875, &#39;open&#39;: 223.52000427246094, &#39;volume&#39;: 41706400}, {&#39;adjclose&#39;: 218.64761352539062, &#39;close&#39;: 223.83999633789062, &#39;date&#39;: 1536931800, &#39;formatted_date&#39;: &#39;2018-09-14&#39;, &#39;high&#39;: 226.83999633789062, &#39;low&#39;: 222.52000427246094, &#39;open&#39;: 225.75, &#39;volume&#39;: 31999300}, {&#39;adjclose&#39;: 212.8258819580078, &#39;close&#39;: 217.8800048828125, &#39;date&#39;: 1537191000, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 222.9499969482422, &#39;low&#39;: 217.27000427246094, &#39;open&#39;: 222.14999389648438, &#39;volume&#39;: 37195100}, {&#39;adjclose&#39;: 213.17752075195312, &#39;close&#39;: 218.24000549316406, &#39;date&#39;: 1537277400, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 221.85000610351562, &#39;low&#39;: 217.1199951171875, &#39;open&#39;: 217.7899932861328, &#39;volume&#39;: 31571700}, {&#39;adjclose&#39;: 213.30447387695312, &#39;close&#39;: 218.3699951171875, &#39;date&#39;: 1537363800, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 219.6199951171875, &#39;low&#39;: 215.3000030517578, &#39;open&#39;: 218.5, &#39;volume&#39;: 27123800}, {&#39;adjclose&#39;: 214.92601013183594, &#39;close&#39;: 220.02999877929688, &#39;date&#39;: 1537450200, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 222.27999877929688, &#39;low&#39;: 219.14999389648438, &#39;open&#39;: 220.24000549316406, &#39;volume&#39;: 26608800}, {&#39;adjclose&#39;: 212.61097717285156, &#39;close&#39;: 217.66000366210938, &#39;date&#39;: 1537536600, &#39;formatted_date&#39;: &#39;2018-09-21&#39;, &#39;high&#39;: 221.36000061035156, &#39;low&#39;: 217.2899932861328, &#39;open&#39;: 220.77999877929688, &#39;volume&#39;: 96246700}, {&#39;adjclose&#39;: 215.66836547851562, &#39;close&#39;: 220.7899932861328, &#39;date&#39;: 1537795800, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 221.25999450683594, &#39;low&#39;: 216.6300048828125, &#39;open&#39;: 216.82000732421875, &#39;volume&#39;: 27693400}, {&#39;adjclose&#39;: 217.035888671875, &#39;close&#39;: 222.19000244140625, &#39;date&#39;: 1537882200, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 222.82000732421875, &#39;low&#39;: 219.6999969482422, &#39;open&#39;: 219.75, &#39;volume&#39;: 24554400}, {&#39;adjclose&#39;: 215.3069305419922, &#39;close&#39;: 220.4199981689453, &#39;date&#39;: 1537968600, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 223.75, &#39;low&#39;: 219.75999450683594, &#39;open&#39;: 221.0, &#39;volume&#39;: 23984700}, {&#39;adjclose&#39;: 219.7318572998047, &#39;close&#39;: 224.9499969482422, &#39;date&#39;: 1538055000, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 226.44000244140625, &#39;low&#39;: 223.5399932861328, &#39;open&#39;: 223.82000732421875, &#39;volume&#39;: 30181200}, {&#39;adjclose&#39;: 220.5035400390625, &#39;close&#39;: 225.74000549316406, &#39;date&#39;: 1538141400, &#39;formatted_date&#39;: &#39;2018-09-28&#39;, &#39;high&#39;: 225.83999633789062, &#39;low&#39;: 224.02000427246094, &#39;open&#39;: 224.7899932861328, &#39;volume&#39;: 22929400}, {&#39;adjclose&#39;: 221.98826599121094, &#39;close&#39;: 227.25999450683594, &#39;date&#39;: 1538400600, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 229.4199981689453, &#39;low&#39;: 226.35000610351562, &#39;open&#39;: 227.9499969482422, &#39;volume&#39;: 23600800}, {&#39;adjclose&#39;: 223.96142578125, &#39;close&#39;: 229.27999877929688, &#39;date&#39;: 1538487000, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 230.0, &#39;low&#39;: 226.6300048828125, &#39;open&#39;: 227.25, &#39;volume&#39;: 24788200}, {&#39;adjclose&#39;: 226.68670654296875, &#39;close&#39;: 232.07000732421875, &#39;date&#39;: 1538573400, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 233.47000122070312, &#39;low&#39;: 229.77999877929688, &#39;open&#39;: 230.0500030517578, &#39;volume&#39;: 28654800}, {&#39;adjclose&#39;: 222.7013397216797, &#39;close&#39;: 227.99000549316406, &#39;date&#39;: 1538659800, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 232.35000610351562, &#39;low&#39;: 226.72999572753906, &#39;open&#39;: 230.77999877929688, &#39;volume&#39;: 32042000}, {&#39;adjclose&#39;: 219.087158203125, &#39;close&#39;: 224.2899932861328, &#39;date&#39;: 1538746200, &#39;formatted_date&#39;: &#39;2018-10-05&#39;, &#39;high&#39;: 228.41000366210938, &#39;low&#39;: 220.5800018310547, &#39;open&#39;: 227.9600067138672, &#39;volume&#39;: 33580500}, {&#39;adjclose&#39;: 218.5792694091797, &#39;close&#39;: 223.77000427246094, &#39;date&#39;: 1539005400, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 224.8000030517578, &#39;low&#39;: 220.1999969482422, &#39;open&#39;: 222.2100067138672, &#39;volume&#39;: 29663900}, {&#39;adjclose&#39;: 221.6073455810547, &#39;close&#39;: 226.8699951171875, &#39;date&#39;: 1539091800, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 227.27000427246094, &#39;low&#39;: 222.25, &#39;open&#39;: 223.63999938964844, &#39;volume&#39;: 26891000}, {&#39;adjclose&#39;: 211.3411102294922, &#39;close&#39;: 216.36000061035156, &#39;date&#39;: 1539178200, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 226.35000610351562, &#39;low&#39;: 216.0500030517578, &#39;open&#39;: 225.4600067138672, &#39;volume&#39;: 41990600}, {&#39;adjclose&#39;: 209.47543334960938, &#39;close&#39;: 214.4499969482422, &#39;date&#39;: 1539264600, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 219.5, &#39;low&#39;: 212.32000732421875, &#39;open&#39;: 214.52000427246094, &#39;volume&#39;: 53124400}, {&#39;adjclose&#39;: 216.95774841308594, &#39;close&#39;: 222.11000061035156, &#39;date&#39;: 1539351000, &#39;formatted_date&#39;: &#39;2018-10-12&#39;, &#39;high&#39;: 222.8800048828125, &#39;low&#39;: 216.83999633789062, &#39;open&#39;: 220.4199981689453, &#39;volume&#39;: 40337900}, {&#39;adjclose&#39;: 212.3179168701172, &#39;close&#39;: 217.36000061035156, &#39;date&#39;: 1539610200, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 221.8300018310547, &#39;low&#39;: 217.27000427246094, &#39;open&#39;: 221.16000366210938, &#39;volume&#39;: 30791000}, {&#39;adjclose&#39;: 216.99681091308594, &#39;close&#39;: 222.14999389648438, &#39;date&#39;: 1539696600, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 222.99000549316406, &#39;low&#39;: 216.75999450683594, &#39;open&#39;: 218.92999267578125, &#39;volume&#39;: 29184000}, {&#39;adjclose&#39;: 216.05909729003906, &#39;close&#39;: 221.19000244140625, &#39;date&#39;: 1539783000, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 222.63999938964844, &#39;low&#39;: 219.33999633789062, &#39;open&#39;: 222.3000030517578, &#39;volume&#39;: 22885400}, {&#39;adjclose&#39;: 211.0089874267578, &#39;close&#39;: 216.02000427246094, &#39;date&#39;: 1539869400, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 219.74000549316406, &#39;low&#39;: 213.0, &#39;open&#39;: 217.86000061035156, &#39;volume&#39;: 32581300}, {&#39;adjclose&#39;: 214.22267150878906, &#39;close&#39;: 219.30999755859375, &#39;date&#39;: 1539955800, &#39;formatted_date&#39;: &#39;2018-10-19&#39;, &#39;high&#39;: 221.25999450683594, &#39;low&#39;: 217.42999267578125, &#39;open&#39;: 218.05999755859375, &#39;volume&#39;: 33078700}, {&#39;adjclose&#39;: 215.53160095214844, &#39;close&#39;: 220.64999389648438, &#39;date&#39;: 1540215000, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 223.36000061035156, &#39;low&#39;: 218.94000244140625, &#39;open&#39;: 219.7899932861328, &#39;volume&#39;: 28792100}, {&#39;adjclose&#39;: 217.5633544921875, &#39;close&#39;: 222.72999572753906, &#39;date&#39;: 1540301400, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 223.25, &#39;low&#39;: 214.6999969482422, &#39;open&#39;: 215.8300018310547, &#39;volume&#39;: 38767800}, {&#39;adjclose&#39;: 210.1005859375, &#39;close&#39;: 215.08999633789062, &#39;date&#39;: 1540387800, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 224.22999572753906, &#39;low&#39;: 214.5399932861328, &#39;open&#39;: 222.60000610351562, &#39;volume&#39;: 40925500}, {&#39;adjclose&#39;: 214.7013397216797, &#39;close&#39;: 219.8000030517578, &#39;date&#39;: 1540474200, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 221.3800048828125, &#39;low&#39;: 216.75, &#39;open&#39;: 217.7100067138672, &#39;volume&#39;: 29855800}, {&#39;adjclose&#39;: 211.28253173828125, &#39;close&#39;: 216.3000030517578, &#39;date&#39;: 1540560600, &#39;formatted_date&#39;: &#39;2018-10-26&#39;, &#39;high&#39;: 220.19000244140625, &#39;low&#39;: 212.6699981689453, &#39;open&#39;: 215.89999389648438, &#39;volume&#39;: 47258400}, {&#39;adjclose&#39;: 207.3166961669922, &#39;close&#39;: 212.24000549316406, &#39;date&#39;: 1540819800, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 219.69000244140625, &#39;low&#39;: 206.08999633789062, &#39;open&#39;: 219.19000244140625, &#39;volume&#39;: 45935500}, {&#39;adjclose&#39;: 208.35211181640625, &#39;close&#39;: 213.3000030517578, &#39;date&#39;: 1540906200, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 215.17999267578125, &#39;low&#39;: 209.27000427246094, &#39;open&#39;: 211.14999389648438, &#39;volume&#39;: 36660000}, {&#39;adjclose&#39;: 213.78314208984375, &#39;close&#39;: 218.86000061035156, &#39;date&#39;: 1540992600, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 220.4499969482422, &#39;low&#39;: 216.6199951171875, &#39;open&#39;: 216.8800048828125, &#39;volume&#39;: 38358900}, {&#39;adjclose&#39;: 217.065185546875, &#39;close&#39;: 222.22000122070312, &#39;date&#39;: 1541079000, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 222.36000061035156, &#39;low&#39;: 216.80999755859375, &#39;open&#39;: 219.0500030517578, &#39;volume&#39;: 58323200}, {&#39;adjclose&#39;: 202.66709899902344, &#39;close&#39;: 207.47999572753906, &#39;date&#39;: 1541165400, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 213.64999389648438, &#39;low&#39;: 205.42999267578125, &#39;open&#39;: 209.5500030517578, &#39;volume&#39;: 91328700}, {&#39;adjclose&#39;: 196.91372680664062, &#39;close&#39;: 201.58999633789062, &#39;date&#39;: 1541428200, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 204.38999938964844, &#39;low&#39;: 198.1699981689453, &#39;open&#39;: 204.3000030517578, &#39;volume&#39;: 66163700}, {&#39;adjclose&#39;: 199.04318237304688, &#39;close&#39;: 203.77000427246094, &#39;date&#39;: 1541514600, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 204.72000122070312, &#39;low&#39;: 201.69000244140625, &#39;open&#39;: 201.9199981689453, &#39;volume&#39;: 31882900}, {&#39;adjclose&#39;: 205.07980346679688, &#39;close&#39;: 209.9499969482422, &#39;date&#39;: 1541601000, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 210.05999755859375, &#39;low&#39;: 204.1300048828125, &#39;open&#39;: 205.97000122070312, &#39;volume&#39;: 33424400}, {&#39;adjclose&#39;: 204.3642578125, &#39;close&#39;: 208.49000549316406, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 210.1199951171875, &#39;low&#39;: 206.75, &#39;open&#39;: 209.97999572753906, &#39;volume&#39;: 25362600}, {&#39;adjclose&#39;: 200.42379760742188, &#39;close&#39;: 204.47000122070312, &#39;date&#39;: 1541773800, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 206.00999450683594, &#39;low&#39;: 202.25, &#39;open&#39;: 205.5500030517578, &#39;volume&#39;: 34365800}, {&#39;adjclose&#39;: 190.32762145996094, &#39;close&#39;: 194.1699981689453, &#39;date&#39;: 1542033000, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 199.85000610351562, &#39;low&#39;: 193.7899932861328, &#39;open&#39;: 199.0, &#39;volume&#39;: 51135500}, {&#39;adjclose&#39;: 188.426025390625, &#39;close&#39;: 192.22999572753906, &#39;date&#39;: 1542119400, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 197.17999267578125, &#39;low&#39;: 191.4499969482422, &#39;open&#39;: 191.6300048828125, &#39;volume&#39;: 46882900}, {&#39;adjclose&#39;: 183.10348510742188, &#39;close&#39;: 186.8000030517578, &#39;date&#39;: 1542205800, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 194.47999572753906, &#39;low&#39;: 185.92999267578125, &#39;open&#39;: 193.89999389648438, &#39;volume&#39;: 60801000}, {&#39;adjclose&#39;: 187.62225341796875, &#39;close&#39;: 191.41000366210938, &#39;date&#39;: 1542292200, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 191.97000122070312, &#39;low&#39;: 186.89999389648438, &#39;open&#39;: 188.38999938964844, &#39;volume&#39;: 46478800}, {&#39;adjclose&#39;: 189.70030212402344, &#39;close&#39;: 193.52999877929688, &#39;date&#39;: 1542378600, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 194.97000122070312, &#39;low&#39;: 189.4600067138672, &#39;open&#39;: 190.5, &#39;volume&#39;: 36928300}, {&#39;adjclose&#39;: 182.1820831298828, &#39;close&#39;: 185.86000061035156, &#39;date&#39;: 1542637800, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 190.6999969482422, &#39;low&#39;: 184.99000549316406, &#39;open&#39;: 190.0, &#39;volume&#39;: 41925300}, {&#39;adjclose&#39;: 173.47781372070312, &#39;close&#39;: 176.97999572753906, &#39;date&#39;: 1542724200, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 181.47000122070312, &#39;low&#39;: 175.50999450683594, &#39;open&#39;: 178.3699951171875, &#39;volume&#39;: 67825200}, {&#39;adjclose&#39;: 173.28175354003906, &#39;close&#39;: 176.77999877929688, &#39;date&#39;: 1542810600, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 180.27000427246094, &#39;low&#39;: 176.5500030517578, &#39;open&#39;: 179.72999572753906, &#39;volume&#39;: 31124200}, {&#39;adjclose&#39;: 168.88059997558594, &#39;close&#39;: 172.2899932861328, &#39;date&#39;: 1542983400, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 176.60000610351562, &#39;low&#39;: 172.10000610351562, &#39;open&#39;: 174.94000244140625, &#39;volume&#39;: 23624000}, {&#39;adjclose&#39;: 171.1645050048828, &#39;close&#39;: 174.6199951171875, &#39;date&#39;: 1543242600, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 174.9499969482422, &#39;low&#39;: 170.25999450683594, &#39;open&#39;: 174.24000549316406, &#39;volume&#39;: 44998500}, {&#39;adjclose&#39;: 170.7920379638672, &#39;close&#39;: 174.24000549316406, &#39;date&#39;: 1543329000, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 174.77000427246094, &#39;low&#39;: 170.8800048828125, &#39;open&#39;: 171.50999450683594, &#39;volume&#39;: 41387400}, {&#39;adjclose&#39;: 177.3594512939453, &#39;close&#39;: 180.94000244140625, &#39;date&#39;: 1543415400, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 181.2899932861328, &#39;low&#39;: 174.92999267578125, &#39;open&#39;: 176.72999572753906, &#39;volume&#39;: 46062500}, {&#39;adjclose&#39;: 175.99693298339844, &#39;close&#39;: 179.5500030517578, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 182.8000030517578, &#39;low&#39;: 177.6999969482422, &#39;open&#39;: 182.66000366210938, &#39;volume&#39;: 41770000}, {&#39;adjclose&#39;: 175.04615783691406, &#39;close&#39;: 178.5800018310547, &#39;date&#39;: 1543588200, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 180.3300018310547, &#39;low&#39;: 177.02999877929688, &#39;open&#39;: 180.2899932861328, &#39;volume&#39;: 39531500}, {&#39;adjclose&#39;: 181.16265869140625, &#39;close&#39;: 184.82000732421875, &#39;date&#39;: 1543847400, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 184.94000244140625, &#39;low&#39;: 181.2100067138672, &#39;open&#39;: 184.4600067138672, &#39;volume&#39;: 40802500}, {&#39;adjclose&#39;: 173.19354248046875, &#39;close&#39;: 176.69000244140625, &#39;date&#39;: 1543933800, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 182.38999938964844, &#39;low&#39;: 176.27000427246094, &#39;open&#39;: 180.9499969482422, &#39;volume&#39;: 41344300}, {&#39;adjclose&#39;: 171.2625274658203, &#39;close&#39;: 174.72000122070312, &#39;date&#39;: 1544106600, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 174.77999877929688, &#39;low&#39;: 170.4199981689453, &#39;open&#39;: 171.75999450683594, &#39;volume&#39;: 43098400}, {&#39;adjclose&#39;: 165.15582275390625, &#39;close&#39;: 168.49000549316406, &#39;date&#39;: 1544193000, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 174.49000549316406, &#39;low&#39;: 168.3000030517578, &#39;open&#39;: 173.49000549316406, &#39;volume&#39;: 42281600}, {&#39;adjclose&#39;: 166.2438507080078, &#39;close&#39;: 169.60000610351562, &#39;date&#39;: 1544452200, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 170.08999633789062, &#39;low&#39;: 163.3300018310547, &#39;open&#39;: 165.0, &#39;volume&#39;: 62026000}, {&#39;adjclose&#39;: 165.2930450439453, &#39;close&#39;: 168.6300048828125, &#39;date&#39;: 1544538600, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 171.7899932861328, &#39;low&#39;: 167.0, &#39;open&#39;: 171.66000366210938, &#39;volume&#39;: 47281700}, {&#39;adjclose&#39;: 165.7537384033203, &#39;close&#39;: 169.10000610351562, &#39;date&#39;: 1544625000, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 171.9199981689453, &#39;low&#39;: 169.02000427246094, &#39;open&#39;: 170.39999389648438, &#39;volume&#39;: 35627700}, {&#39;adjclose&#39;: 167.56712341308594, &#39;close&#39;: 170.9499969482422, &#39;date&#39;: 1544711400, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 172.57000732421875, &#39;low&#39;: 169.5500030517578, &#39;open&#39;: 170.49000549316406, &#39;volume&#39;: 31898600}, {&#39;adjclose&#39;: 162.2053680419922, &#39;close&#39;: 165.47999572753906, &#39;date&#39;: 1544797800, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 169.0800018310547, &#39;low&#39;: 165.27999877929688, &#39;open&#39;: 169.0, &#39;volume&#39;: 40703700}, {&#39;adjclose&#39;: 160.69586181640625, &#39;close&#39;: 163.94000244140625, &#39;date&#39;: 1545057000, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 168.35000610351562, &#39;low&#39;: 162.72999572753906, &#39;open&#39;: 165.4499969482422, &#39;volume&#39;: 44287900}, {&#39;adjclose&#39;: 162.78372192382812, &#39;close&#39;: 166.07000732421875, &#39;date&#39;: 1545143400, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 167.52999877929688, &#39;low&#39;: 164.38999938964844, &#39;open&#39;: 165.3800048828125, &#39;volume&#39;: 33841500}, {&#39;adjclose&#39;: 157.70619201660156, &#39;close&#39;: 160.88999938964844, &#39;date&#39;: 1545229800, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 167.4499969482422, &#39;low&#39;: 159.08999633789062, &#39;open&#39;: 166.0, &#39;volume&#39;: 49047300}, {&#39;adjclose&#39;: 153.72653198242188, &#39;close&#39;: 156.8300018310547, &#39;date&#39;: 1545316200, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 162.11000061035156, &#39;low&#39;: 155.3000030517578, &#39;open&#39;: 160.39999389648438, &#39;volume&#39;: 64773000}, {&#39;adjclose&#39;: 147.74725341796875, &#39;close&#39;: 150.72999572753906, &#39;date&#39;: 1545402600, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 158.16000366210938, &#39;low&#39;: 149.6300048828125, &#39;open&#39;: 156.86000061035156, &#39;volume&#39;: 95744600}, {&#39;adjclose&#39;: 143.92445373535156, &#39;close&#39;: 146.8300018310547, &#39;date&#39;: 1545661800, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 151.5500030517578, &#39;low&#39;: 146.58999633789062, &#39;open&#39;: 148.14999389648438, &#39;volume&#39;: 37169200}, {&#39;adjclose&#39;: 154.059814453125, &#39;close&#39;: 157.1699981689453, &#39;date&#39;: 1545834600, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 157.22999572753906, &#39;low&#39;: 146.72000122070312, &#39;open&#39;: 148.3000030517578, &#39;volume&#39;: 58582500}, {&#39;adjclose&#39;: 153.05999755859375, &#39;close&#39;: 156.14999389648438, &#39;date&#39;: 1545921000, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 156.77000427246094, &#39;low&#39;: 150.07000732421875, &#39;open&#39;: 155.83999633789062, &#39;volume&#39;: 53117100}, {&#39;adjclose&#39;: 153.138427734375, &#39;close&#39;: 156.22999572753906, &#39;date&#39;: 1546007400, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 158.52000427246094, &#39;low&#39;: 154.5500030517578, &#39;open&#39;: 157.5, &#39;volume&#39;: 42291400}, {&#39;adjclose&#39;: 154.61854553222656, &#39;close&#39;: 157.74000549316406, &#39;date&#39;: 1546266600, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 159.36000061035156, &#39;low&#39;: 156.47999572753906, &#39;open&#39;: 158.52999877929688, &#39;volume&#39;: 35003500}, {&#39;adjclose&#39;: 154.79498291015625, &#39;close&#39;: 157.9199981689453, &#39;date&#39;: 1546439400, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 158.85000610351562, &#39;low&#39;: 154.22999572753906, &#39;open&#39;: 154.88999938964844, &#39;volume&#39;: 37039700}, {&#39;adjclose&#39;: 139.37625122070312, &#39;close&#39;: 142.19000244140625, &#39;date&#39;: 1546525800, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 145.72000122070312, &#39;low&#39;: 142.0, &#39;open&#39;: 143.97999572753906, &#39;volume&#39;: 91312200}, {&#39;adjclose&#39;: 145.3261260986328, &#39;close&#39;: 148.25999450683594, &#39;date&#39;: 1546612200, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 148.5500030517578, &#39;low&#39;: 143.8000030517578, &#39;open&#39;: 144.52999877929688, &#39;volume&#39;: 58607100}, {&#39;adjclose&#39;: 145.002685546875, &#39;close&#39;: 147.92999267578125, &#39;date&#39;: 1546871400, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 148.8300018310547, &#39;low&#39;: 145.89999389648438, &#39;open&#39;: 148.6999969482422, &#39;volume&#39;: 54777800}, {&#39;adjclose&#39;: 147.76686096191406, &#39;close&#39;: 150.75, &#39;date&#39;: 1546957800, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 151.82000732421875, &#39;low&#39;: 148.52000427246094, &#39;open&#39;: 149.55999755859375, &#39;volume&#39;: 41025300}, {&#39;adjclose&#39;: 150.2761993408203, &#39;close&#39;: 153.30999755859375, &#39;date&#39;: 1547044200, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 154.52999877929688, &#39;low&#39;: 149.6300048828125, &#39;open&#39;: 151.2899932861328, &#39;volume&#39;: 45099100}, {&#39;adjclose&#39;: 150.75653076171875, &#39;close&#39;: 153.8000030517578, &#39;date&#39;: 1547130600, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 153.97000122070312, &#39;low&#39;: 150.86000061035156, &#39;open&#39;: 152.5, &#39;volume&#39;: 35780700}, {&#39;adjclose&#39;: 149.27638244628906, &#39;close&#39;: 152.2899932861328, &#39;date&#39;: 1547217000, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 153.6999969482422, &#39;low&#39;: 151.50999450683594, &#39;open&#39;: 152.8800048828125, &#39;volume&#39;: 27023200}, {&#39;adjclose&#39;: 147.03170776367188, &#39;close&#39;: 150.0, &#39;date&#39;: 1547476200, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 151.27000427246094, &#39;low&#39;: 149.22000122070312, &#39;open&#39;: 150.85000610351562, &#39;volume&#39;: 32439200}, {&#39;adjclose&#39;: 150.0409698486328, &#39;close&#39;: 153.07000732421875, &#39;date&#39;: 1547562600, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 153.38999938964844, &#39;low&#39;: 150.0500030517578, &#39;open&#39;: 150.27000427246094, &#39;volume&#39;: 28710900}, {&#39;adjclose&#39;: 151.87396240234375, &#39;close&#39;: 154.94000244140625, &#39;date&#39;: 1547649000, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 155.8800048828125, &#39;low&#39;: 153.0, &#39;open&#39;: 153.0800018310547, &#39;volume&#39;: 30569700}, {&#39;adjclose&#39;: 152.77574157714844, &#39;close&#39;: 155.86000061035156, &#39;date&#39;: 1547735400, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 157.66000366210938, &#39;low&#39;: 153.25999450683594, &#39;open&#39;: 154.1999969482422, &#39;volume&#39;: 29821200}, {&#39;adjclose&#39;: 153.7167510986328, &#39;close&#39;: 156.82000732421875, &#39;date&#39;: 1547821800, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 157.8800048828125, &#39;low&#39;: 155.97999572753906, &#39;open&#39;: 157.5, &#39;volume&#39;: 33751000}, {&#39;adjclose&#39;: 150.2664031982422, &#39;close&#39;: 153.3000030517578, &#39;date&#39;: 1548167400, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 156.72999572753906, &#39;low&#39;: 152.6199951171875, &#39;open&#39;: 156.41000366210938, &#39;volume&#39;: 30394000}, {&#39;adjclose&#39;: 150.87413024902344, &#39;close&#39;: 153.9199981689453, &#39;date&#39;: 1548253800, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 155.13999938964844, &#39;low&#39;: 151.6999969482422, &#39;open&#39;: 154.14999389648438, &#39;volume&#39;: 23130600}, {&#39;adjclose&#39;: 149.67825317382812, &#39;close&#39;: 152.6999969482422, &#39;date&#39;: 1548340200, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 154.47999572753906, &#39;low&#39;: 151.74000549316406, &#39;open&#39;: 154.11000061035156, &#39;volume&#39;: 25441500}, {&#39;adjclose&#39;: 154.63815307617188, &#39;close&#39;: 157.75999450683594, &#39;date&#39;: 1548426600, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 158.1300048828125, &#39;low&#39;: 154.32000732421875, &#39;open&#39;: 155.47999572753906, &#39;volume&#39;: 33535500}, {&#39;adjclose&#39;: 153.20704650878906, &#39;close&#39;: 156.3000030517578, &#39;date&#39;: 1548685800, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 156.3300018310547, &#39;low&#39;: 153.66000366210938, &#39;open&#39;: 155.7899932861328, &#39;volume&#39;: 26192100}, {&#39;adjclose&#39;: 151.61907958984375, &#39;close&#39;: 154.67999267578125, &#39;date&#39;: 1548772200, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 158.1300048828125, &#39;low&#39;: 154.11000061035156, &#39;open&#39;: 156.25, &#39;volume&#39;: 41587200}, {&#39;adjclose&#39;: 161.9799346923828, &#39;close&#39;: 165.25, &#39;date&#39;: 1548858600, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 166.14999389648438, &#39;low&#39;: 160.22999572753906, &#39;open&#39;: 163.25, &#39;volume&#39;: 61109800}, {&#39;adjclose&#39;: 163.1463623046875, &#39;close&#39;: 166.44000244140625, &#39;date&#39;: 1548945000, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 169.0, &#39;low&#39;: 164.55999755859375, &#39;open&#39;: 166.11000061035156, &#39;volume&#39;: 40739600}, {&#39;adjclose&#39;: 163.22479248046875, &#39;close&#39;: 166.52000427246094, &#39;date&#39;: 1549031400, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 168.97999572753906, &#39;low&#39;: 165.92999267578125, &#39;open&#39;: 166.9600067138672, &#39;volume&#39;: 32668100}, {&#39;adjclose&#39;: 167.86119079589844, &#39;close&#39;: 171.25, &#39;date&#39;: 1549290600, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 171.66000366210938, &#39;low&#39;: 167.27999877929688, &#39;open&#39;: 167.41000366210938, &#39;volume&#39;: 31495500}, {&#39;adjclose&#39;: 170.73321533203125, &#39;close&#39;: 174.17999267578125, &#39;date&#39;: 1549377000, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 175.0800018310547, &#39;low&#39;: 172.35000610351562, &#39;open&#39;: 172.86000061035156, &#39;volume&#39;: 36101600}, {&#39;adjclose&#39;: 170.7920379638672, &#39;close&#39;: 174.24000549316406, &#39;date&#39;: 1549463400, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 175.57000732421875, &#39;low&#39;: 172.85000610351562, &#39;open&#39;: 174.64999389648438, &#39;volume&#39;: 28239600}, {&#39;adjclose&#39;: 167.5573272705078, &#39;close&#39;: 170.94000244140625, &#39;date&#39;: 1549549800, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 173.94000244140625, &#39;low&#39;: 170.33999633789062, &#39;open&#39;: 172.39999389648438, &#39;volume&#39;: 31741700}, {&#39;adjclose&#39;: 167.7542266845703, &#39;close&#39;: 170.41000366210938, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 170.66000366210938, &#39;low&#39;: 168.4199981689453, &#39;open&#39;: 168.99000549316406, &#39;volume&#39;: 23820000}, {&#39;adjclose&#39;: 166.7894744873047, &#39;close&#39;: 169.42999267578125, &#39;date&#39;: 1549895400, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 171.2100067138672, &#39;low&#39;: 169.25, &#39;open&#39;: 171.0500030517578, &#39;volume&#39;: 20993400}, {&#39;adjclose&#39;: 168.2267303466797, &#39;close&#39;: 170.88999938964844, &#39;date&#39;: 1549981800, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 171.0, &#39;low&#39;: 169.6999969482422, &#39;open&#39;: 170.10000610351562, &#39;volume&#39;: 22283500}, {&#39;adjclose&#39;: 167.5277862548828, &#39;close&#39;: 170.17999267578125, &#39;date&#39;: 1550068200, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 172.47999572753906, &#39;low&#39;: 169.9199981689453, &#39;open&#39;: 171.38999938964844, &#39;volume&#39;: 22490200}, {&#39;adjclose&#39;: 168.13815307617188, &#39;close&#39;: 170.8000030517578, &#39;date&#39;: 1550154600, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 171.25999450683594, &#39;low&#39;: 169.3800048828125, &#39;open&#39;: 169.7100067138672, &#39;volume&#39;: 21835700}, {&#39;adjclose&#39;: 167.76406860351562, &#39;close&#39;: 170.4199981689453, &#39;date&#39;: 1550241000, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 171.6999969482422, &#39;low&#39;: 169.75, &#39;open&#39;: 171.25, &#39;volume&#39;: 24626800}, {&#39;adjclose&#39;: 168.26609802246094, &#39;close&#39;: 170.92999267578125, &#39;date&#39;: 1550586600, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 171.44000244140625, &#39;low&#39;: 169.49000549316406, &#39;open&#39;: 169.7100067138672, &#39;volume&#39;: 18972800}, {&#39;adjclose&#39;: 169.34896850585938, &#39;close&#39;: 172.02999877929688, &#39;date&#39;: 1550673000, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 173.32000732421875, &#39;low&#39;: 170.99000549316406, &#39;open&#39;: 171.19000244140625, &#39;volume&#39;: 26114400}, {&#39;adjclose&#39;: 168.3940887451172, &#39;close&#39;: 171.05999755859375, &#39;date&#39;: 1550759400, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 172.3699951171875, &#39;low&#39;: 170.3000030517578, &#39;open&#39;: 171.8000030517578, &#39;volume&#39;: 17249700}, {&#39;adjclose&#39;: 170.27430725097656, &#39;close&#39;: 172.97000122070312, &#39;date&#39;: 1550845800, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 173.0, &#39;low&#39;: 171.3800048828125, &#39;open&#39;: 171.5800018310547, &#39;volume&#39;: 18913200}, {&#39;adjclose&#39;: 171.51466369628906, &#39;close&#39;: 174.22999572753906, &#39;date&#39;: 1551105000, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 175.8699951171875, &#39;low&#39;: 173.9499969482422, &#39;open&#39;: 174.16000366210938, &#39;volume&#39;: 21873400}, {&#39;adjclose&#39;: 171.6131134033203, &#39;close&#39;: 174.3300018310547, &#39;date&#39;: 1551191400, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 175.3000030517578, &#39;low&#39;: 173.1699981689453, &#39;open&#39;: 173.7100067138672, &#39;volume&#39;: 17070200}, {&#39;adjclose&#39;: 172.1446990966797, &#39;close&#39;: 174.8699951171875, &#39;date&#39;: 1551277800, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 175.0, &#39;low&#39;: 172.72999572753906, &#39;open&#39;: 173.2100067138672, &#39;volume&#39;: 27835400}, {&#39;adjclose&#39;: 170.45150756835938, &#39;close&#39;: 173.14999389648438, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 174.91000366210938, &#39;low&#39;: 172.9199981689453, &#39;open&#39;: 174.32000732421875, &#39;volume&#39;: 28215400}, {&#39;adjclose&#39;: 172.2431182861328, &#39;close&#39;: 174.97000122070312, &#39;date&#39;: 1551450600, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 175.14999389648438, &#39;low&#39;: 172.88999938964844, &#39;open&#39;: 174.27999877929688, &#39;volume&#39;: 25886200}, {&#39;adjclose&#39;: 173.10943603515625, &#39;close&#39;: 175.85000610351562, &#39;date&#39;: 1551709800, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 177.75, &#39;low&#39;: 173.97000122070312, &#39;open&#39;: 175.69000244140625, &#39;volume&#39;: 27436200}, {&#39;adjclose&#39;: 172.79440307617188, &#39;close&#39;: 175.52999877929688, &#39;date&#39;: 1551796200, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 176.0, &#39;low&#39;: 174.5399932861328, &#39;open&#39;: 175.94000244140625, &#39;volume&#39;: 19737400}, {&#39;adjclose&#39;: 171.8001708984375, &#39;close&#39;: 174.52000427246094, &#39;date&#39;: 1551882600, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 175.49000549316406, &#39;low&#39;: 173.94000244140625, &#39;open&#39;: 174.6699981689453, &#39;volume&#39;: 20810400}, {&#39;adjclose&#39;: 169.8116455078125, &#39;close&#39;: 172.5, &#39;date&#39;: 1551969000, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 174.44000244140625, &#39;low&#39;: 172.02000427246094, &#39;open&#39;: 173.8699951171875, &#39;volume&#39;: 24796400}, {&#39;adjclose&#39;: 170.2152557373047, &#39;close&#39;: 172.91000366210938, &#39;date&#39;: 1552055400, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 173.07000732421875, &#39;low&#39;: 169.5, &#39;open&#39;: 170.32000732421875, &#39;volume&#39;: 23999400}, {&#39;adjclose&#39;: 176.11187744140625, &#39;close&#39;: 178.89999389648438, &#39;date&#39;: 1552311000, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 179.1199951171875, &#39;low&#39;: 175.35000610351562, &#39;open&#39;: 175.49000549316406, &#39;volume&#39;: 32011000}, {&#39;adjclose&#39;: 178.090576171875, &#39;close&#39;: 180.91000366210938, &#39;date&#39;: 1552397400, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 182.6699981689453, &#39;low&#39;: 179.3699951171875, &#39;open&#39;: 180.0, &#39;volume&#39;: 32467600}, {&#39;adjclose&#39;: 178.8780975341797, &#39;close&#39;: 181.7100067138672, &#39;date&#39;: 1552483800, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 183.3000030517578, &#39;low&#39;: 180.9199981689453, &#39;open&#39;: 182.25, &#39;volume&#39;: 31032500}, {&#39;adjclose&#39;: 180.86660766601562, &#39;close&#39;: 183.72999572753906, &#39;date&#39;: 1552570200, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 184.10000610351562, &#39;low&#39;: 182.55999755859375, &#39;open&#39;: 183.89999389648438, &#39;volume&#39;: 23579500}, {&#39;adjclose&#39;: 183.2193603515625, &#39;close&#39;: 186.1199951171875, &#39;date&#39;: 1552656600, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 187.3300018310547, &#39;low&#39;: 183.74000549316406, &#39;open&#39;: 184.85000610351562, &#39;volume&#39;: 39042900}, {&#39;adjclose&#39;: 185.0897674560547, &#39;close&#39;: 188.02000427246094, &#39;date&#39;: 1552915800, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 188.38999938964844, &#39;low&#39;: 185.7899932861328, &#39;open&#39;: 185.8000030517578, &#39;volume&#39;: 26219800}, {&#39;adjclose&#39;: 183.62298583984375, &#39;close&#39;: 186.52999877929688, &#39;date&#39;: 1553002200, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 188.99000549316406, &#39;low&#39;: 185.9199981689453, &#39;open&#39;: 188.35000610351562, &#39;volume&#39;: 31646400}, {&#39;adjclose&#39;: 185.2275848388672, &#39;close&#39;: 188.16000366210938, &#39;date&#39;: 1553088600, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 189.49000549316406, &#39;low&#39;: 184.72999572753906, &#39;open&#39;: 186.22999572753906, &#39;volume&#39;: 31035200}, {&#39;adjclose&#39;: 192.049560546875, &#39;close&#39;: 195.08999633789062, &#39;date&#39;: 1553175000, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 196.3300018310547, &#39;low&#39;: 189.80999755859375, &#39;open&#39;: 190.02000427246094, &#39;volume&#39;: 51034200}, {&#39;adjclose&#39;: 188.07254028320312, &#39;close&#39;: 191.0500030517578, &#39;date&#39;: 1553261400, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 197.69000244140625, &#39;low&#39;: 190.77999877929688, &#39;open&#39;: 195.33999633789062, &#39;volume&#39;: 42407700}, {&#39;adjclose&#39;: 185.79852294921875, &#39;close&#39;: 188.74000549316406, &#39;date&#39;: 1553520600, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 191.97999572753906, &#39;low&#39;: 186.60000610351562, &#39;open&#39;: 191.50999450683594, &#39;volume&#39;: 43845300}, {&#39;adjclose&#39;: 183.87892150878906, &#39;close&#39;: 186.7899932861328, &#39;date&#39;: 1553607000, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 192.8800048828125, &#39;low&#39;: 184.5800018310547, &#39;open&#39;: 191.66000366210938, &#39;volume&#39;: 49800500}, {&#39;adjclose&#39;: 185.53274536132812, &#39;close&#39;: 188.47000122070312, &#39;date&#39;: 1553693400, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 189.75999450683594, &#39;low&#39;: 186.5500030517578, &#39;open&#39;: 188.75, &#39;volume&#39;: 29848400}, {&#39;adjclose&#39;: 185.77883911132812, &#39;close&#39;: 188.72000122070312, &#39;date&#39;: 1553779800, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 189.55999755859375, &#39;low&#39;: 187.52999877929688, &#39;open&#39;: 188.9499969482422, &#39;volume&#39;: 20780400}, {&#39;adjclose&#39;: 186.98968505859375, &#39;close&#39;: 189.9499969482422, &#39;date&#39;: 1553866200, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 190.0800018310547, &#39;low&#39;: 188.5399932861328, &#39;open&#39;: 189.8300018310547, &#39;volume&#39;: 23564000}, {&#39;adjclose&#39;: 188.2595977783203, &#39;close&#39;: 191.24000549316406, &#39;date&#39;: 1554125400, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 191.67999267578125, &#39;low&#39;: 188.3800048828125, &#39;open&#39;: 191.63999938964844, &#39;volume&#39;: 27862000}, {&#39;adjclose&#39;: 190.9962615966797, &#39;close&#39;: 194.02000427246094, &#39;date&#39;: 1554211800, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 194.4600067138672, &#39;low&#39;: 191.0500030517578, &#39;open&#39;: 191.08999633789062, &#39;volume&#39;: 22765700}, {&#39;adjclose&#39;: 192.3055419921875, &#39;close&#39;: 195.35000610351562, &#39;date&#39;: 1554298200, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 196.5, &#39;low&#39;: 193.14999389648438, &#39;open&#39;: 193.25, &#39;volume&#39;: 23271800}, {&#39;adjclose&#39;: 192.6402130126953, &#39;close&#39;: 195.69000244140625, &#39;date&#39;: 1554384600, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 196.3699951171875, &#39;low&#39;: 193.13999938964844, &#39;open&#39;: 194.7899932861328, &#39;volume&#39;: 19114300}, {&#39;adjclose&#39;: 193.92979431152344, &#39;close&#39;: 197.0, &#39;date&#39;: 1554471000, &#39;formatted_date&#39;: &#39;2019-04-05&#39;, &#39;high&#39;: 197.10000610351562, &#39;low&#39;: 195.92999267578125, &#39;open&#39;: 196.4499969482422, &#39;volume&#39;: 18526600}, {&#39;adjclose&#39;: 196.9814910888672, &#39;close&#39;: 200.10000610351562, &#39;date&#39;: 1554730200, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 200.22999572753906, &#39;low&#39;: 196.33999633789062, &#39;open&#39;: 196.4199981689453, &#39;volume&#39;: 25881700}, {&#39;adjclose&#39;: 196.39083862304688, &#39;close&#39;: 199.5, &#39;date&#39;: 1554816600, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 202.85000610351562, &#39;low&#39;: 199.22999572753906, &#39;open&#39;: 200.32000732421875, &#39;volume&#39;: 35768200}, {&#39;adjclose&#39;: 197.49337768554688, &#39;close&#39;: 200.6199951171875, &#39;date&#39;: 1554903000, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 200.74000549316406, &#39;low&#39;: 198.17999267578125, &#39;open&#39;: 198.67999267578125, &#39;volume&#39;: 21695300}, {&#39;adjclose&#39;: 195.8494110107422, &#39;close&#39;: 198.9499969482422, &#39;date&#39;: 1554989400, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 201.0, &#39;low&#39;: 198.44000244140625, &#39;open&#39;: 200.85000610351562, &#39;volume&#39;: 20900800}, {&#39;adjclose&#39;: 195.77066040039062, &#39;close&#39;: 198.8699951171875, &#39;date&#39;: 1555075800, &#39;formatted_date&#39;: &#39;2019-04-12&#39;, &#39;high&#39;: 200.13999938964844, &#39;low&#39;: 196.2100067138672, &#39;open&#39;: 199.1999969482422, &#39;volume&#39;: 27760700}, {&#39;adjclose&#39;: 196.1250457763672, &#39;close&#39;: 199.22999572753906, &#39;date&#39;: 1555335000, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 199.85000610351562, &#39;low&#39;: 198.00999450683594, &#39;open&#39;: 198.5800018310547, &#39;volume&#39;: 17536600}, {&#39;adjclose&#39;: 196.14474487304688, &#39;close&#39;: 199.25, &#39;date&#39;: 1555421400, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 201.3699951171875, &#39;low&#39;: 198.55999755859375, &#39;open&#39;: 199.4600067138672, &#39;volume&#39;: 25696400}, {&#39;adjclose&#39;: 199.9642791748047, &#39;close&#39;: 203.1300048828125, &#39;date&#39;: 1555507800, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 203.3800048828125, &#39;low&#39;: 198.61000061035156, &#39;open&#39;: 199.5399932861328, &#39;volume&#39;: 28906800}, {&#39;adjclose&#39;: 200.6829071044922, &#39;close&#39;: 203.86000061035156, &#39;date&#39;: 1555594200, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 204.14999389648438, &#39;low&#39;: 202.52000427246094, &#39;open&#39;: 203.1199951171875, &#39;volume&#39;: 24195800}, {&#39;adjclose&#39;: 201.34246826171875, &#39;close&#39;: 204.52999877929688, &#39;date&#39;: 1555939800, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 204.94000244140625, &#39;low&#39;: 202.33999633789062, &#39;open&#39;: 202.8300018310547, &#39;volume&#39;: 19439500}, {&#39;adjclose&#39;: 204.24647521972656, &#39;close&#39;: 207.47999572753906, &#39;date&#39;: 1556026200, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 207.75, &#39;low&#39;: 203.89999389648438, &#39;open&#39;: 204.42999267578125, &#39;volume&#39;: 23323000}, {&#39;adjclose&#39;: 203.9314727783203, &#39;close&#39;: 207.16000366210938, &#39;date&#39;: 1556112600, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 208.47999572753906, &#39;low&#39;: 207.0500030517578, &#39;open&#39;: 207.36000061035156, &#39;volume&#39;: 17540600}, {&#39;adjclose&#39;: 202.08078002929688, &#39;close&#39;: 205.27999877929688, &#39;date&#39;: 1556199000, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 207.75999450683594, &#39;low&#39;: 205.1199951171875, &#39;open&#39;: 206.8300018310547, &#39;volume&#39;: 18543200}, {&#39;adjclose&#39;: 201.1160430908203, &#39;close&#39;: 204.3000030517578, &#39;date&#39;: 1556285400, &#39;formatted_date&#39;: &#39;2019-04-26&#39;, &#39;high&#39;: 205.0, &#39;low&#39;: 202.1199951171875, &#39;open&#39;: 204.89999389648438, &#39;volume&#39;: 18649100}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: -14400}}, &#39;AMZN&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 863703000, &#39;formatted_date&#39;: &#39;1997-05-15&#39;}, &#39;instrumentType&#39;: &#39;EQUITY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 1566.1300048828125, &#39;close&#39;: 1566.1300048828125, &#39;date&#39;: 1525095000, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 1596.0, &#39;low&#39;: 1560.93994140625, &#39;open&#39;: 1582.5, &#39;volume&#39;: 5464100}, {&#39;adjclose&#39;: 1582.260009765625, &#39;close&#39;: 1582.260009765625, &#39;date&#39;: 1525181400, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 1585.0, &#39;low&#39;: 1552.1800537109375, &#39;open&#39;: 1563.219970703125, &#39;volume&#39;: 4572100}, {&#39;adjclose&#39;: 1569.6800537109375, &#39;close&#39;: 1569.6800537109375, &#39;date&#39;: 1525267800, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 1588.5, &#39;low&#39;: 1566.3599853515625, &#39;open&#39;: 1580.97998046875, &#39;volume&#39;: 4360300}, {&#39;adjclose&#39;: 1572.0799560546875, &#39;close&#39;: 1572.0799560546875, &#39;date&#39;: 1525354200, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 1574.800048828125, &#39;low&#39;: 1546.02001953125, &#39;open&#39;: 1560.010009765625, &#39;volume&#39;: 4251900}, {&#39;adjclose&#39;: 1580.949951171875, &#39;close&#39;: 1580.949951171875, &#39;date&#39;: 1525440600, &#39;formatted_date&#39;: &#39;2018-05-04&#39;, &#39;high&#39;: 1584.9000244140625, &#39;low&#39;: 1562.18994140625, &#39;open&#39;: 1562.449951171875, &#39;volume&#39;: 3443600}, {&#39;adjclose&#39;: 1600.1400146484375, &#39;close&#39;: 1600.1400146484375, &#39;date&#39;: 1525699800, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 1606.949951171875, &#39;low&#39;: 1587.8299560546875, &#39;open&#39;: 1589.3399658203125, &#39;volume&#39;: 3801900}, {&#39;adjclose&#39;: 1592.3900146484375, &#39;close&#39;: 1592.3900146484375, &#39;date&#39;: 1525786200, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 1596.8800048828125, &#39;low&#39;: 1582.510009765625, &#39;open&#39;: 1595.0, &#39;volume&#39;: 3067900}, {&#39;adjclose&#39;: 1608.0, &#39;close&#39;: 1608.0, &#39;date&#39;: 1525872600, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 1608.0, &#39;low&#39;: 1592.0, &#39;open&#39;: 1600.0, &#39;volume&#39;: 3637300}, {&#39;adjclose&#39;: 1609.0799560546875, &#39;close&#39;: 1609.0799560546875, &#39;date&#39;: 1525959000, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 1615.5999755859375, &#39;low&#39;: 1603.43994140625, &#39;open&#39;: 1608.47998046875, &#39;volume&#39;: 2817500}, {&#39;adjclose&#39;: 1602.9100341796875, &#39;close&#39;: 1602.9100341796875, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;, &#39;high&#39;: 1611.0999755859375, &#39;low&#39;: 1597.8900146484375, &#39;open&#39;: 1610.989990234375, &#39;volume&#39;: 2263900}, {&#39;adjclose&#39;: 1601.5400390625, &#39;close&#39;: 1601.5400390625, &#39;date&#39;: 1526304600, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 1611.1800537109375, &#39;low&#39;: 1600.050048828125, &#39;open&#39;: 1604.0, &#39;volume&#39;: 2509500}, {&#39;adjclose&#39;: 1576.1199951171875, &#39;close&#39;: 1576.1199951171875, &#39;date&#39;: 1526391000, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 1587.800048828125, &#39;low&#39;: 1565.219970703125, &#39;open&#39;: 1587.800048828125, &#39;volume&#39;: 5077500}, {&#39;adjclose&#39;: 1587.280029296875, &#39;close&#39;: 1587.280029296875, &#39;date&#39;: 1526477400, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 1594.4300537109375, &#39;low&#39;: 1576.6700439453125, &#39;open&#39;: 1577.5, &#39;volume&#39;: 2570600}, {&#39;adjclose&#39;: 1581.760009765625, &#39;close&#39;: 1581.760009765625, &#39;date&#39;: 1526563800, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 1594.0400390625, &#39;low&#39;: 1573.0, &#39;open&#39;: 1580.56005859375, &#39;volume&#39;: 2147600}, {&#39;adjclose&#39;: 1574.3699951171875, &#39;close&#39;: 1574.3699951171875, &#39;date&#39;: 1526650200, &#39;formatted_date&#39;: &#39;2018-05-18&#39;, &#39;high&#39;: 1583.5899658203125, &#39;low&#39;: 1572.0999755859375, &#39;open&#39;: 1581.3299560546875, &#39;volume&#39;: 2642600}, {&#39;adjclose&#39;: 1585.4599609375, &#39;close&#39;: 1585.4599609375, &#39;date&#39;: 1526909400, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 1592.050048828125, &#39;low&#39;: 1575.0, &#39;open&#39;: 1585.0, &#39;volume&#39;: 2925200}, {&#39;adjclose&#39;: 1581.4000244140625, &#39;close&#39;: 1581.4000244140625, &#39;date&#39;: 1526995800, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 1589.8900146484375, &#39;low&#39;: 1575.25, &#39;open&#39;: 1589.8900146484375, &#39;volume&#39;: 2115600}, {&#39;adjclose&#39;: 1601.8599853515625, &#39;close&#39;: 1601.8599853515625, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 1601.8599853515625, &#39;low&#39;: 1566.3399658203125, &#39;open&#39;: 1571.050048828125, &#39;volume&#39;: 3361900}, {&#39;adjclose&#39;: 1603.0699462890625, &#39;close&#39;: 1603.0699462890625, &#39;date&#39;: 1527168600, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 1608.239990234375, &#39;low&#39;: 1588.3800048828125, &#39;open&#39;: 1598.030029296875, &#39;volume&#39;: 3430000}, {&#39;adjclose&#39;: 1610.1500244140625, &#39;close&#39;: 1610.1500244140625, &#39;date&#39;: 1527255000, &#39;formatted_date&#39;: &#39;2018-05-25&#39;, &#39;high&#39;: 1614.1199951171875, &#39;low&#39;: 1600.449951171875, &#39;open&#39;: 1603.0, &#39;volume&#39;: 2698400}, {&#39;adjclose&#39;: 1612.8699951171875, &#39;close&#39;: 1612.8699951171875, &#39;date&#39;: 1527600600, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 1621.7900390625, &#39;low&#39;: 1600.1500244140625, &#39;open&#39;: 1600.7099609375, &#39;volume&#39;: 3846500}, {&#39;adjclose&#39;: 1624.8900146484375, &#39;close&#39;: 1624.8900146484375, &#39;date&#39;: 1527687000, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 1626.0, &#39;low&#39;: 1612.9300537109375, &#39;open&#39;: 1618.0999755859375, &#39;volume&#39;: 2907400}, {&#39;adjclose&#39;: 1629.6199951171875, &#39;close&#39;: 1629.6199951171875, &#39;date&#39;: 1527773400, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 1635.0, &#39;low&#39;: 1621.3499755859375, &#39;open&#39;: 1623.0, &#39;volume&#39;: 3166300}, {&#39;adjclose&#39;: 1641.5400390625, &#39;close&#39;: 1641.5400390625, &#39;date&#39;: 1527859800, &#39;formatted_date&#39;: &#39;2018-06-01&#39;, &#39;high&#39;: 1646.72998046875, &#39;low&#39;: 1635.0899658203125, &#39;open&#39;: 1637.030029296875, &#39;volume&#39;: 3313400}, {&#39;adjclose&#39;: 1665.27001953125, &#39;close&#39;: 1665.27001953125, &#39;date&#39;: 1528119000, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 1665.6800537109375, &#39;low&#39;: 1645.489990234375, &#39;open&#39;: 1648.9000244140625, &#39;volume&#39;: 3187700}, {&#39;adjclose&#39;: 1696.3499755859375, &#39;close&#39;: 1696.3499755859375, &#39;date&#39;: 1528205400, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 1699.0, &#39;low&#39;: 1670.06005859375, &#39;open&#39;: 1672.989990234375, &#39;volume&#39;: 4782200}, {&#39;adjclose&#39;: 1695.75, &#39;close&#39;: 1695.75, &#39;date&#39;: 1528291800, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 1714.5, &#39;low&#39;: 1686.469970703125, &#39;open&#39;: 1704.510009765625, &#39;volume&#39;: 5473200}, {&#39;adjclose&#39;: 1689.300048828125, &#39;close&#39;: 1689.300048828125, &#39;date&#39;: 1528378200, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 1699.9000244140625, &#39;low&#39;: 1676.1099853515625, &#39;open&#39;: 1698.56005859375, &#39;volume&#39;: 3765700}, {&#39;adjclose&#39;: 1683.989990234375, &#39;close&#39;: 1683.989990234375, &#39;date&#39;: 1528464600, &#39;formatted_date&#39;: &#39;2018-06-08&#39;, &#39;high&#39;: 1689.43994140625, &#39;low&#39;: 1673.010009765625, &#39;open&#39;: 1681.1199951171875, &#39;volume&#39;: 2955100}, {&#39;adjclose&#39;: 1689.1199951171875, &#39;close&#39;: 1689.1199951171875, &#39;date&#39;: 1528723800, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 1694.239990234375, &#39;low&#39;: 1680.5899658203125, &#39;open&#39;: 1681.510009765625, &#39;volume&#39;: 2335500}, {&#39;adjclose&#39;: 1698.75, &#39;close&#39;: 1698.75, &#39;date&#39;: 1528810200, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 1699.510009765625, &#39;low&#39;: 1691.52001953125, &#39;open&#39;: 1693.0, &#39;volume&#39;: 2259200}, {&#39;adjclose&#39;: 1704.8599853515625, &#39;close&#39;: 1704.8599853515625, &#39;date&#39;: 1528896600, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 1713.75, &#39;low&#39;: 1700.1199951171875, &#39;open&#39;: 1702.81005859375, &#39;volume&#39;: 3327500}, {&#39;adjclose&#39;: 1723.8599853515625, &#39;close&#39;: 1723.8599853515625, &#39;date&#39;: 1528983000, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 1724.800048828125, &#39;low&#39;: 1708.8699951171875, &#39;open&#39;: 1713.47998046875, &#39;volume&#39;: 3174400}, {&#39;adjclose&#39;: 1715.969970703125, &#39;close&#39;: 1715.969970703125, &#39;date&#39;: 1529069400, &#39;formatted_date&#39;: &#39;2018-06-15&#39;, &#39;high&#39;: 1720.8699951171875, &#39;low&#39;: 1708.52001953125, &#39;open&#39;: 1714.0, &#39;volume&#39;: 4777600}, {&#39;adjclose&#39;: 1723.7900390625, &#39;close&#39;: 1723.7900390625, &#39;date&#39;: 1529328600, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 1726.739990234375, &#39;low&#39;: 1702.56005859375, &#39;open&#39;: 1706.260009765625, &#39;volume&#39;: 3107700}, {&#39;adjclose&#39;: 1734.780029296875, &#39;close&#39;: 1734.780029296875, &#39;date&#39;: 1529415000, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 1736.1099853515625, &#39;low&#39;: 1700.3900146484375, &#39;open&#39;: 1709.0400390625, &#39;volume&#39;: 4290100}, {&#39;adjclose&#39;: 1750.0799560546875, &#39;close&#39;: 1750.0799560546875, &#39;date&#39;: 1529501400, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 1762.9300537109375, &#39;low&#39;: 1741.3599853515625, &#39;open&#39;: 1742.5, &#39;volume&#39;: 4332600}, {&#39;adjclose&#39;: 1730.219970703125, &#39;close&#39;: 1730.219970703125, &#39;date&#39;: 1529587800, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 1763.0999755859375, &#39;low&#39;: 1717.56005859375, &#39;open&#39;: 1760.0, &#39;volume&#39;: 4941100}, {&#39;adjclose&#39;: 1715.6700439453125, &#39;close&#39;: 1715.6700439453125, &#39;date&#39;: 1529674200, &#39;formatted_date&#39;: &#39;2018-06-22&#39;, &#39;high&#39;: 1743.0, &#39;low&#39;: 1711.9000244140625, &#39;open&#39;: 1742.6199951171875, &#39;volume&#39;: 4075100}, {&#39;adjclose&#39;: 1663.1500244140625, &#39;close&#39;: 1663.1500244140625, &#39;date&#39;: 1529933400, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 1705.0, &#39;low&#39;: 1646.31005859375, &#39;open&#39;: 1702.510009765625, &#39;volume&#39;: 7511200}, {&#39;adjclose&#39;: 1691.0899658203125, &#39;close&#39;: 1691.0899658203125, &#39;date&#39;: 1530019800, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 1701.5699462890625, &#39;low&#39;: 1663.3399658203125, &#39;open&#39;: 1672.3699951171875, &#39;volume&#39;: 4386600}, {&#39;adjclose&#39;: 1660.510009765625, &#39;close&#39;: 1660.510009765625, &#39;date&#39;: 1530106200, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 1711.949951171875, &#39;low&#39;: 1660.0, &#39;open&#39;: 1708.1099853515625, &#39;volume&#39;: 4872200}, {&#39;adjclose&#39;: 1701.449951171875, &#39;close&#39;: 1701.449951171875, &#39;date&#39;: 1530192600, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 1705.5, &#39;low&#39;: 1661.1700439453125, &#39;open&#39;: 1672.5400390625, &#39;volume&#39;: 4529700}, {&#39;adjclose&#39;: 1699.800048828125, &#39;close&#39;: 1699.800048828125, &#39;date&#39;: 1530279000, &#39;formatted_date&#39;: &#39;2018-06-29&#39;, &#39;high&#39;: 1723.4100341796875, &#39;low&#39;: 1694.3199462890625, &#39;open&#39;: 1717.0, &#39;volume&#39;: 4543500}, {&#39;adjclose&#39;: 1713.780029296875, &#39;close&#39;: 1713.780029296875, &#39;date&#39;: 1530538200, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 1713.8900146484375, &#39;low&#39;: 1678.06005859375, &#39;open&#39;: 1682.699951171875, &#39;volume&#39;: 3185700}, {&#39;adjclose&#39;: 1693.9599609375, &#39;close&#39;: 1693.9599609375, &#39;date&#39;: 1530624600, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 1725.0, &#39;low&#39;: 1692.47998046875, &#39;open&#39;: 1723.9599609375, &#39;volume&#39;: 2177300}, {&#39;adjclose&#39;: 1699.72998046875, &#39;close&#39;: 1699.72998046875, &#39;date&#39;: 1530797400, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 1710.68994140625, &#39;low&#39;: 1682.1500244140625, &#39;open&#39;: 1705.3800048828125, &#39;volume&#39;: 2983100}, {&#39;adjclose&#39;: 1710.6300048828125, &#39;close&#39;: 1710.6300048828125, &#39;date&#39;: 1530883800, &#39;formatted_date&#39;: &#39;2018-07-06&#39;, &#39;high&#39;: 1715.27001953125, &#39;low&#39;: 1691.6700439453125, &#39;open&#39;: 1696.0, &#39;volume&#39;: 2650300}, {&#39;adjclose&#39;: 1739.02001953125, &#39;close&#39;: 1739.02001953125, &#39;date&#39;: 1531143000, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 1739.56005859375, &#39;low&#39;: 1716.22998046875, &#39;open&#39;: 1724.050048828125, &#39;volume&#39;: 3012000}, {&#39;adjclose&#39;: 1743.0699462890625, &#39;close&#39;: 1743.0699462890625, &#39;date&#39;: 1531229400, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 1750.0, &#39;low&#39;: 1731.0, &#39;open&#39;: 1738.530029296875, &#39;volume&#39;: 3002900}, {&#39;adjclose&#39;: 1755.0, &#39;close&#39;: 1755.0, &#39;date&#39;: 1531315800, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 1756.9599609375, &#39;low&#39;: 1734.0, &#39;open&#39;: 1737.989990234375, &#39;volume&#39;: 3209800}, {&#39;adjclose&#39;: 1796.6199951171875, &#39;close&#39;: 1796.6199951171875, &#39;date&#39;: 1531402200, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 1798.0, &#39;low&#39;: 1762.1800537109375, &#39;open&#39;: 1764.510009765625, &#39;volume&#39;: 4532700}, {&#39;adjclose&#39;: 1813.030029296875, &#39;close&#39;: 1813.030029296875, &#39;date&#39;: 1531488600, &#39;formatted_date&#39;: &#39;2018-07-13&#39;, &#39;high&#39;: 1815.300048828125, &#39;low&#39;: 1795.22998046875, &#39;open&#39;: 1803.9300537109375, &#39;volume&#39;: 4383200}, {&#39;adjclose&#39;: 1822.489990234375, &#39;close&#39;: 1822.489990234375, &#39;date&#39;: 1531747800, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 1841.949951171875, &#39;low&#39;: 1814.449951171875, &#39;open&#39;: 1821.949951171875, &#39;volume&#39;: 5466200}, {&#39;adjclose&#39;: 1843.9300537109375, &#39;close&#39;: 1843.9300537109375, &#39;date&#39;: 1531834200, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 1851.68994140625, &#39;low&#39;: 1797.3800048828125, &#39;open&#39;: 1811.56005859375, &#39;volume&#39;: 5682900}, {&#39;adjclose&#39;: 1842.9200439453125, &#39;close&#39;: 1842.9200439453125, &#39;date&#39;: 1531920600, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 1858.8800048828125, &#39;low&#39;: 1831.27001953125, &#39;open&#39;: 1848.0, &#39;volume&#39;: 4861900}, {&#39;adjclose&#39;: 1812.969970703125, &#39;close&#39;: 1812.969970703125, &#39;date&#39;: 1532007000, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 1841.0, &#39;low&#39;: 1811.27001953125, &#39;open&#39;: 1829.4599609375, &#39;volume&#39;: 4676900}, {&#39;adjclose&#39;: 1813.699951171875, &#39;close&#39;: 1813.699951171875, &#39;date&#39;: 1532093400, &#39;formatted_date&#39;: &#39;2018-07-20&#39;, &#39;high&#39;: 1834.8399658203125, &#39;low&#39;: 1810.06005859375, &#39;open&#39;: 1825.010009765625, &#39;volume&#39;: 3884400}, {&#39;adjclose&#39;: 1802.0, &#39;close&#39;: 1802.0, &#39;date&#39;: 1532352600, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 1819.0, &#39;low&#39;: 1769.989990234375, &#39;open&#39;: 1812.2099609375, &#39;volume&#39;: 3888500}, {&#39;adjclose&#39;: 1829.239990234375, &#39;close&#39;: 1829.239990234375, &#39;date&#39;: 1532439000, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 1840.0, &#39;low&#39;: 1809.3800048828125, &#39;open&#39;: 1829.010009765625, &#39;volume&#39;: 4278700}, {&#39;adjclose&#39;: 1863.6099853515625, &#39;close&#39;: 1863.6099853515625, &#39;date&#39;: 1532525400, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 1863.8399658203125, &#39;low&#39;: 1822.6400146484375, &#39;open&#39;: 1829.300048828125, &#39;volume&#39;: 3738200}, {&#39;adjclose&#39;: 1808.0, &#39;close&#39;: 1808.0, &#39;date&#39;: 1532611800, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 1844.6800537109375, &#39;low&#39;: 1804.5, &#39;open&#39;: 1839.0, &#39;volume&#39;: 9924400}, {&#39;adjclose&#39;: 1817.27001953125, &#39;close&#39;: 1817.27001953125, &#39;date&#39;: 1532698200, &#39;formatted_date&#39;: &#39;2018-07-27&#39;, &#39;high&#39;: 1880.050048828125, &#39;low&#39;: 1806.530029296875, &#39;open&#39;: 1876.050048828125, &#39;volume&#39;: 9681000}, {&#39;adjclose&#39;: 1779.219970703125, &#39;close&#39;: 1779.219970703125, &#39;date&#39;: 1532957400, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 1829.5, &#39;low&#39;: 1766.02001953125, &#39;open&#39;: 1827.3299560546875, &#39;volume&#39;: 6562300}, {&#39;adjclose&#39;: 1777.43994140625, &#39;close&#39;: 1777.43994140625, &#39;date&#39;: 1533043800, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 1801.8299560546875, &#39;low&#39;: 1739.3199462890625, &#39;open&#39;: 1786.489990234375, &#39;volume&#39;: 5738700}, {&#39;adjclose&#39;: 1797.1700439453125, &#39;close&#39;: 1797.1700439453125, &#39;date&#39;: 1533130200, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 1798.43994140625, &#39;low&#39;: 1776.02001953125, &#39;open&#39;: 1784.0, &#39;volume&#39;: 4153100}, {&#39;adjclose&#39;: 1834.3299560546875, &#39;close&#39;: 1834.3299560546875, &#39;date&#39;: 1533216600, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 1836.56005859375, &#39;low&#39;: 1786.0, &#39;open&#39;: 1788.77001953125, &#39;volume&#39;: 4354700}, {&#39;adjclose&#39;: 1823.2900390625, &#39;close&#39;: 1823.2900390625, &#39;date&#39;: 1533303000, &#39;formatted_date&#39;: &#39;2018-08-03&#39;, &#39;high&#39;: 1841.0, &#39;low&#39;: 1821.5, &#39;open&#39;: 1837.739990234375, &#39;volume&#39;: 3460500}, {&#39;adjclose&#39;: 1847.75, &#39;close&#39;: 1847.75, &#39;date&#39;: 1533562200, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 1847.77001953125, &#39;low&#39;: 1818.9200439453125, &#39;open&#39;: 1825.81005859375, &#39;volume&#39;: 3391800}, {&#39;adjclose&#39;: 1862.47998046875, &#39;close&#39;: 1862.47998046875, &#39;date&#39;: 1533648600, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 1869.719970703125, &#39;low&#39;: 1846.27001953125, &#39;open&#39;: 1854.530029296875, &#39;volume&#39;: 3377500}, {&#39;adjclose&#39;: 1886.52001953125, &#39;close&#39;: 1886.52001953125, &#39;date&#39;: 1533735000, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 1891.510009765625, &#39;low&#39;: 1854.5, &#39;open&#39;: 1861.0, &#39;volume&#39;: 3963000}, {&#39;adjclose&#39;: 1898.52001953125, &#39;close&#39;: 1898.52001953125, &#39;date&#39;: 1533821400, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 1914.5699462890625, &#39;low&#39;: 1877.47998046875, &#39;open&#39;: 1882.0, &#39;volume&#39;: 4860400}, {&#39;adjclose&#39;: 1886.300048828125, &#39;close&#39;: 1886.300048828125, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;, &#39;high&#39;: 1899.5, &#39;low&#39;: 1878.2099609375, &#39;open&#39;: 1888.510009765625, &#39;volume&#39;: 3639900}, {&#39;adjclose&#39;: 1896.199951171875, &#39;close&#39;: 1896.199951171875, &#39;date&#39;: 1534167000, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 1925.0, &#39;low&#39;: 1893.6700439453125, &#39;open&#39;: 1898.5, &#39;volume&#39;: 5531500}, {&#39;adjclose&#39;: 1919.6500244140625, &#39;close&#39;: 1919.6500244140625, &#39;date&#39;: 1534253400, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 1921.010009765625, &#39;low&#39;: 1900.0, &#39;open&#39;: 1919.3900146484375, &#39;volume&#39;: 3986100}, {&#39;adjclose&#39;: 1882.6199951171875, &#39;close&#39;: 1882.6199951171875, &#39;date&#39;: 1534339800, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 1916.2099609375, &#39;low&#39;: 1869.7900390625, &#39;open&#39;: 1909.550048828125, &#39;volume&#39;: 7700700}, {&#39;adjclose&#39;: 1886.52001953125, &#39;close&#39;: 1886.52001953125, &#39;date&#39;: 1534426200, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 1905.0, &#39;low&#39;: 1883.550048828125, &#39;open&#39;: 1903.93994140625, &#39;volume&#39;: 3957100}, {&#39;adjclose&#39;: 1882.219970703125, &#39;close&#39;: 1882.219970703125, &#39;date&#39;: 1534512600, &#39;formatted_date&#39;: &#39;2018-08-17&#39;, &#39;high&#39;: 1888.0, &#39;low&#39;: 1855.550048828125, &#39;open&#39;: 1885.800048828125, &#39;volume&#39;: 4104300}, {&#39;adjclose&#39;: 1876.7099609375, &#39;close&#39;: 1876.7099609375, &#39;date&#39;: 1534771800, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 1891.75, &#39;low&#39;: 1866.06005859375, &#39;open&#39;: 1890.5699462890625, &#39;volume&#39;: 2862000}, {&#39;adjclose&#39;: 1883.4200439453125, &#39;close&#39;: 1883.4200439453125, &#39;date&#39;: 1534858200, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 1897.75, &#39;low&#39;: 1874.4100341796875, &#39;open&#39;: 1880.0, &#39;volume&#39;: 3105600}, {&#39;adjclose&#39;: 1904.9000244140625, &#39;close&#39;: 1904.9000244140625, &#39;date&#39;: 1534944600, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 1905.800048828125, &#39;low&#39;: 1876.6400146484375, &#39;open&#39;: 1876.6400146484375, &#39;volume&#39;: 3080500}, {&#39;adjclose&#39;: 1902.9000244140625, &#39;close&#39;: 1902.9000244140625, &#39;date&#39;: 1535031000, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 1919.5, &#39;low&#39;: 1900.760009765625, &#39;open&#39;: 1907.1700439453125, &#39;volume&#39;: 3563000}, {&#39;adjclose&#39;: 1905.3900146484375, &#39;close&#39;: 1905.3900146484375, &#39;date&#39;: 1535117400, &#39;formatted_date&#39;: &#39;2018-08-24&#39;, &#39;high&#39;: 1916.010009765625, &#39;low&#39;: 1902.5400390625, &#39;open&#39;: 1910.510009765625, &#39;volume&#39;: 2800900}, {&#39;adjclose&#39;: 1927.6800537109375, &#39;close&#39;: 1927.6800537109375, &#39;date&#39;: 1535376600, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 1927.699951171875, &#39;low&#39;: 1909.280029296875, &#39;open&#39;: 1915.0, &#39;volume&#39;: 3569000}, {&#39;adjclose&#39;: 1932.8199462890625, &#39;close&#39;: 1932.8199462890625, &#39;date&#39;: 1535463000, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 1941.780029296875, &#39;low&#39;: 1928.8199462890625, &#39;open&#39;: 1937.72998046875, &#39;volume&#39;: 3100700}, {&#39;adjclose&#39;: 1998.0999755859375, &#39;close&#39;: 1998.0999755859375, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 1998.68994140625, &#39;low&#39;: 1948.93994140625, &#39;open&#39;: 1953.449951171875, &#39;volume&#39;: 6531800}, {&#39;adjclose&#39;: 2002.3800048828125, &#39;close&#39;: 2002.3800048828125, &#39;date&#39;: 1535635800, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 2025.5699462890625, &#39;low&#39;: 1986.9000244140625, &#39;open&#39;: 1997.4200439453125, &#39;volume&#39;: 7277300}, {&#39;adjclose&#39;: 2012.7099609375, &#39;close&#39;: 2012.7099609375, &#39;date&#39;: 1535722200, &#39;formatted_date&#39;: &#39;2018-08-31&#39;, &#39;high&#39;: 2022.3800048828125, &#39;low&#39;: 2004.739990234375, &#39;open&#39;: 2007.0, &#39;volume&#39;: 4204400}, {&#39;adjclose&#39;: 2039.510009765625, &#39;close&#39;: 2039.510009765625, &#39;date&#39;: 1536067800, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 2050.5, &#39;low&#39;: 2013.0, &#39;open&#39;: 2026.5, &#39;volume&#39;: 5721100}, {&#39;adjclose&#39;: 1994.8199462890625, &#39;close&#39;: 1994.8199462890625, &#39;date&#39;: 1536154200, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 2040.3800048828125, &#39;low&#39;: 1989.8900146484375, &#39;open&#39;: 2038.1099853515625, &#39;volume&#39;: 8220600}, {&#39;adjclose&#39;: 1958.31005859375, &#39;close&#39;: 1958.31005859375, &#39;date&#39;: 1536240600, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 2007.5, &#39;low&#39;: 1935.2099609375, &#39;open&#39;: 2006.510009765625, &#39;volume&#39;: 7488700}, {&#39;adjclose&#39;: 1952.0699462890625, &#39;close&#39;: 1952.0699462890625, &#39;date&#39;: 1536327000, &#39;formatted_date&#39;: &#39;2018-09-07&#39;, &#39;high&#39;: 1975.199951171875, &#39;low&#39;: 1937.3499755859375, &#39;open&#39;: 1938.7099609375, &#39;volume&#39;: 4892600}, {&#39;adjclose&#39;: 1939.010009765625, &#39;close&#39;: 1939.010009765625, &#39;date&#39;: 1536586200, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 1973.0400390625, &#39;low&#39;: 1931.52001953125, &#39;open&#39;: 1971.0, &#39;volume&#39;: 4544800}, {&#39;adjclose&#39;: 1987.1500244140625, &#39;close&#39;: 1987.1500244140625, &#39;date&#39;: 1536672600, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 1988.8800048828125, &#39;low&#39;: 1917.0, &#39;open&#39;: 1928.27001953125, &#39;volume&#39;: 5033600}, {&#39;adjclose&#39;: 1990.0, &#39;close&#39;: 1990.0, &#39;date&#39;: 1536759000, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 2000.0, &#39;low&#39;: 1962.43994140625, &#39;open&#39;: 1994.0, &#39;volume&#39;: 4414000}, {&#39;adjclose&#39;: 1989.8699951171875, &#39;close&#39;: 1989.8699951171875, &#39;date&#39;: 1536845400, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 2008.760009765625, &#39;low&#39;: 1982.030029296875, &#39;open&#39;: 2000.0, &#39;volume&#39;: 3621500}, {&#39;adjclose&#39;: 1970.18994140625, &#39;close&#39;: 1970.18994140625, &#39;date&#39;: 1536931800, &#39;formatted_date&#39;: &#39;2018-09-14&#39;, &#39;high&#39;: 1993.6500244140625, &#39;low&#39;: 1959.219970703125, &#39;open&#39;: 1992.9300537109375, &#39;volume&#39;: 3642000}, {&#39;adjclose&#39;: 1908.030029296875, &#39;close&#39;: 1908.030029296875, &#39;date&#39;: 1537191000, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 1956.8199462890625, &#39;low&#39;: 1887.4100341796875, &#39;open&#39;: 1954.72998046875, &#39;volume&#39;: 7050200}, {&#39;adjclose&#39;: 1941.050048828125, &#39;close&#39;: 1941.050048828125, &#39;date&#39;: 1537277400, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 1958.199951171875, &#39;low&#39;: 1915.43994140625, &#39;open&#39;: 1918.6500244140625, &#39;volume&#39;: 4268700}, {&#39;adjclose&#39;: 1926.4200439453125, &#39;close&#39;: 1926.4200439453125, &#39;date&#39;: 1537363800, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 1940.8299560546875, &#39;low&#39;: 1904.9000244140625, &#39;open&#39;: 1940.5, &#39;volume&#39;: 4056800}, {&#39;adjclose&#39;: 1944.300048828125, &#39;close&#39;: 1944.300048828125, &#39;date&#39;: 1537450200, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 1955.0, &#39;low&#39;: 1932.25, &#39;open&#39;: 1938.5799560546875, &#39;volume&#39;: 3154900}, {&#39;adjclose&#39;: 1915.010009765625, &#39;close&#39;: 1915.010009765625, &#39;date&#39;: 1537536600, &#39;formatted_date&#39;: &#39;2018-09-21&#39;, &#39;high&#39;: 1957.31005859375, &#39;low&#39;: 1910.5, &#39;open&#39;: 1954.219970703125, &#39;volume&#39;: 6855900}, {&#39;adjclose&#39;: 1934.3599853515625, &#39;close&#39;: 1934.3599853515625, &#39;date&#39;: 1537795800, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 1936.8800048828125, &#39;low&#39;: 1865.0, &#39;open&#39;: 1903.7900390625, &#39;volume&#39;: 4213700}, {&#39;adjclose&#39;: 1974.550048828125, &#39;close&#39;: 1974.550048828125, &#39;date&#39;: 1537882200, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 1975.9100341796875, &#39;low&#39;: 1938.8499755859375, &#39;open&#39;: 1942.9000244140625, &#39;volume&#39;: 4538400}, {&#39;adjclose&#39;: 1974.8499755859375, &#39;close&#39;: 1974.8499755859375, &#39;date&#39;: 1537968600, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 1995.25, &#39;low&#39;: 1961.52001953125, &#39;open&#39;: 1968.5, &#39;volume&#39;: 4313500}, {&#39;adjclose&#39;: 2012.97998046875, &#39;close&#39;: 2012.97998046875, &#39;date&#39;: 1538055000, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 2016.1600341796875, &#39;low&#39;: 1988.5799560546875, &#39;open&#39;: 1993.239990234375, &#39;volume&#39;: 4329400}, {&#39;adjclose&#39;: 2003.0, &#39;close&#39;: 2003.0, &#39;date&#39;: 1538141400, &#39;formatted_date&#39;: &#39;2018-09-28&#39;, &#39;high&#39;: 2026.52001953125, &#39;low&#39;: 1996.4599609375, &#39;open&#39;: 2004.4100341796875, &#39;volume&#39;: 4085100}, {&#39;adjclose&#39;: 2004.3599853515625, &#39;close&#39;: 2004.3599853515625, &#39;date&#39;: 1538400600, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 2033.18994140625, &#39;low&#39;: 2003.5999755859375, &#39;open&#39;: 2021.989990234375, &#39;volume&#39;: 3460500}, {&#39;adjclose&#39;: 1971.31005859375, &#39;close&#39;: 1971.31005859375, &#39;date&#39;: 1538487000, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 2013.3900146484375, &#39;low&#39;: 1965.77001953125, &#39;open&#39;: 1999.989990234375, &#39;volume&#39;: 5400700}, {&#39;adjclose&#39;: 1952.760009765625, &#39;close&#39;: 1952.760009765625, &#39;date&#39;: 1538573400, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 1989.699951171875, &#39;low&#39;: 1949.81005859375, &#39;open&#39;: 1981.699951171875, &#39;volume&#39;: 5253100}, {&#39;adjclose&#39;: 1909.4200439453125, &#39;close&#39;: 1909.4200439453125, &#39;date&#39;: 1538659800, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 1956.0, &#39;low&#39;: 1896.5699462890625, &#39;open&#39;: 1949.0, &#39;volume&#39;: 7257000}, {&#39;adjclose&#39;: 1889.6500244140625, &#39;close&#39;: 1889.6500244140625, &#39;date&#39;: 1538746200, &#39;formatted_date&#39;: &#39;2018-10-05&#39;, &#39;high&#39;: 1929.0799560546875, &#39;low&#39;: 1862.8299560546875, &#39;open&#39;: 1917.989990234375, &#39;volume&#39;: 6822300}, {&#39;adjclose&#39;: 1864.4200439453125, &#39;close&#39;: 1864.4200439453125, &#39;date&#39;: 1539005400, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 1902.0, &#39;low&#39;: 1830.6600341796875, &#39;open&#39;: 1874.0, &#39;volume&#39;: 7393200}, {&#39;adjclose&#39;: 1870.3199462890625, &#39;close&#39;: 1870.3199462890625, &#39;date&#39;: 1539091800, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 1896.6800537109375, &#39;low&#39;: 1852.3199462890625, &#39;open&#39;: 1859.989990234375, &#39;volume&#39;: 4772900}, {&#39;adjclose&#39;: 1755.25, &#39;close&#39;: 1755.25, &#39;date&#39;: 1539178200, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 1858.56005859375, &#39;low&#39;: 1754.4100341796875, &#39;open&#39;: 1857.8900146484375, &#39;volume&#39;: 10988900}, {&#39;adjclose&#39;: 1719.3599853515625, &#39;close&#39;: 1719.3599853515625, &#39;date&#39;: 1539264600, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 1755.4000244140625, &#39;low&#39;: 1685.0999755859375, &#39;open&#39;: 1724.0, &#39;volume&#39;: 13935900}, {&#39;adjclose&#39;: 1788.6099853515625, &#39;close&#39;: 1788.6099853515625, &#39;date&#39;: 1539351000, &#39;formatted_date&#39;: &#39;2018-10-12&#39;, &#39;high&#39;: 1808.949951171875, &#39;low&#39;: 1742.530029296875, &#39;open&#39;: 1808.0, &#39;volume&#39;: 9444600}, {&#39;adjclose&#39;: 1760.949951171875, &#39;close&#39;: 1760.949951171875, &#39;date&#39;: 1539610200, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 1795.050048828125, &#39;low&#39;: 1734.22998046875, &#39;open&#39;: 1795.0, &#39;volume&#39;: 6437200}, {&#39;adjclose&#39;: 1819.9599609375, &#39;close&#39;: 1819.9599609375, &#39;date&#39;: 1539696600, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 1823.8800048828125, &#39;low&#39;: 1761.550048828125, &#39;open&#39;: 1783.5, &#39;volume&#39;: 5859900}, {&#39;adjclose&#39;: 1831.72998046875, &#39;close&#39;: 1831.72998046875, &#39;date&#39;: 1539783000, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 1845.0, &#39;low&#39;: 1807.0, &#39;open&#39;: 1842.7900390625, &#39;volume&#39;: 5295200}, {&#39;adjclose&#39;: 1770.719970703125, &#39;close&#39;: 1770.719970703125, &#39;date&#39;: 1539869400, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 1830.1500244140625, &#39;low&#39;: 1767.8699951171875, &#39;open&#39;: 1821.489990234375, &#39;volume&#39;: 5874000}, {&#39;adjclose&#39;: 1764.030029296875, &#39;close&#39;: 1764.030029296875, &#39;date&#39;: 1539955800, &#39;formatted_date&#39;: &#39;2018-10-19&#39;, &#39;high&#39;: 1809.0999755859375, &#39;low&#39;: 1753.0, &#39;open&#39;: 1785.1600341796875, &#39;volume&#39;: 5907200}, {&#39;adjclose&#39;: 1789.300048828125, &#39;close&#39;: 1789.300048828125, &#39;date&#39;: 1540215000, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 1809.5, &#39;low&#39;: 1756.0, &#39;open&#39;: 1784.0, &#39;volume&#39;: 4500000}, {&#39;adjclose&#39;: 1768.699951171875, &#39;close&#39;: 1768.699951171875, &#39;date&#39;: 1540301400, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 1776.3399658203125, &#39;low&#39;: 1714.0, &#39;open&#39;: 1742.239990234375, &#39;volume&#39;: 6723900}, {&#39;adjclose&#39;: 1664.199951171875, &#39;close&#39;: 1664.199951171875, &#39;date&#39;: 1540387800, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 1777.7099609375, &#39;low&#39;: 1656.56005859375, &#39;open&#39;: 1773.699951171875, &#39;volume&#39;: 6928400}, {&#39;adjclose&#39;: 1782.1700439453125, &#39;close&#39;: 1782.1700439453125, &#39;date&#39;: 1540474200, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 1794.81005859375, &#39;low&#39;: 1692.010009765625, &#39;open&#39;: 1703.3399658203125, &#39;volume&#39;: 10285700}, {&#39;adjclose&#39;: 1642.81005859375, &#39;close&#39;: 1642.81005859375, &#39;date&#39;: 1540560600, &#39;formatted_date&#39;: &#39;2018-10-26&#39;, &#39;high&#39;: 1698.4599609375, &#39;low&#39;: 1603.0, &#39;open&#39;: 1649.5899658203125, &#39;volume&#39;: 14963800}, {&#39;adjclose&#39;: 1538.8800048828125, &#39;close&#39;: 1538.8800048828125, &#39;date&#39;: 1540819800, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 1665.739990234375, &#39;low&#39;: 1495.0, &#39;open&#39;: 1660.0, &#39;volume&#39;: 13866100}, {&#39;adjclose&#39;: 1530.4200439453125, &#39;close&#39;: 1530.4200439453125, &#39;date&#39;: 1540906200, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 1540.989990234375, &#39;low&#39;: 1476.3599853515625, &#39;open&#39;: 1486.1600341796875, &#39;volume&#39;: 12460100}, {&#39;adjclose&#39;: 1598.010009765625, &#39;close&#39;: 1598.010009765625, &#39;date&#39;: 1540992600, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 1623.9100341796875, &#39;low&#39;: 1565.0899658203125, &#39;open&#39;: 1569.989990234375, &#39;volume&#39;: 9390200}, {&#39;adjclose&#39;: 1665.530029296875, &#39;close&#39;: 1665.530029296875, &#39;date&#39;: 1541079000, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 1670.449951171875, &#39;low&#39;: 1598.43994140625, &#39;open&#39;: 1623.530029296875, &#39;volume&#39;: 8135500}, {&#39;adjclose&#39;: 1665.530029296875, &#39;close&#39;: 1665.530029296875, &#39;date&#39;: 1541165400, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 1697.43994140625, &#39;low&#39;: 1651.8299560546875, &#39;open&#39;: 1678.5899658203125, &#39;volume&#39;: 6955500}, {&#39;adjclose&#39;: 1627.800048828125, &#39;close&#39;: 1627.800048828125, &#39;date&#39;: 1541428200, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 1658.0899658203125, &#39;low&#39;: 1596.3599853515625, &#39;open&#39;: 1657.5699462890625, &#39;volume&#39;: 5624700}, {&#39;adjclose&#39;: 1642.81005859375, &#39;close&#39;: 1642.81005859375, &#39;date&#39;: 1541514600, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 1665.0, &#39;low&#39;: 1614.550048828125, &#39;open&#39;: 1618.3499755859375, &#39;volume&#39;: 4257400}, {&#39;adjclose&#39;: 1755.489990234375, &#39;close&#39;: 1755.489990234375, &#39;date&#39;: 1541601000, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 1759.22998046875, &#39;low&#39;: 1664.0799560546875, &#39;open&#39;: 1673.0, &#39;volume&#39;: 8192200}, {&#39;adjclose&#39;: 1754.9100341796875, &#39;close&#39;: 1754.9100341796875, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 1784.0, &#39;low&#39;: 1725.1099853515625, &#39;open&#39;: 1755.0, &#39;volume&#39;: 6534900}, {&#39;adjclose&#39;: 1712.4300537109375, &#39;close&#39;: 1712.4300537109375, &#39;date&#39;: 1541773800, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 1743.9200439453125, &#39;low&#39;: 1701.8699951171875, &#39;open&#39;: 1732.5, &#39;volume&#39;: 5902200}, {&#39;adjclose&#39;: 1636.8499755859375, &#39;close&#39;: 1636.8499755859375, &#39;date&#39;: 1542033000, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 1708.550048828125, &#39;low&#39;: 1630.010009765625, &#39;open&#39;: 1698.239990234375, &#39;volume&#39;: 6806200}, {&#39;adjclose&#39;: 1631.1700439453125, &#39;close&#39;: 1631.1700439453125, &#39;date&#39;: 1542119400, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 1677.06005859375, &#39;low&#39;: 1613.75, &#39;open&#39;: 1649.2900390625, &#39;volume&#39;: 5933300}, {&#39;adjclose&#39;: 1599.010009765625, &#39;close&#39;: 1599.010009765625, &#39;date&#39;: 1542205800, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 1673.0, &#39;low&#39;: 1597.0699462890625, &#39;open&#39;: 1656.3199462890625, &#39;volume&#39;: 6486900}, {&#39;adjclose&#39;: 1619.43994140625, &#39;close&#39;: 1619.43994140625, &#39;date&#39;: 1542292200, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 1624.8199462890625, &#39;low&#39;: 1546.510009765625, &#39;open&#39;: 1581.010009765625, &#39;volume&#39;: 8427300}, {&#39;adjclose&#39;: 1593.4100341796875, &#39;close&#39;: 1593.4100341796875, &#39;date&#39;: 1542378600, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 1614.47998046875, &#39;low&#39;: 1573.1199951171875, &#39;open&#39;: 1587.5, &#39;volume&#39;: 6066100}, {&#39;adjclose&#39;: 1512.2900390625, &#39;close&#39;: 1512.2900390625, &#39;date&#39;: 1542637800, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 1581.18994140625, &#39;low&#39;: 1503.3599853515625, &#39;open&#39;: 1577.010009765625, &#39;volume&#39;: 7790000}, {&#39;adjclose&#39;: 1495.4599609375, &#39;close&#39;: 1495.4599609375, &#39;date&#39;: 1542724200, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 1534.75, &#39;low&#39;: 1420.0, &#39;open&#39;: 1437.5, &#39;volume&#39;: 10878800}, {&#39;adjclose&#39;: 1516.72998046875, &#39;close&#39;: 1516.72998046875, &#39;date&#39;: 1542810600, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 1550.0, &#39;low&#39;: 1515.0, &#39;open&#39;: 1542.989990234375, &#39;volume&#39;: 5716800}, {&#39;adjclose&#39;: 1502.06005859375, &#39;close&#39;: 1502.06005859375, &#39;date&#39;: 1542983400, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 1536.199951171875, &#39;low&#39;: 1501.81005859375, &#39;open&#39;: 1517.0, &#39;volume&#39;: 2707600}, {&#39;adjclose&#39;: 1581.3299560546875, &#39;close&#39;: 1581.3299560546875, &#39;date&#39;: 1543242600, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 1584.81005859375, &#39;low&#39;: 1524.219970703125, &#39;open&#39;: 1539.0, &#39;volume&#39;: 6257700}, {&#39;adjclose&#39;: 1581.4200439453125, &#39;close&#39;: 1581.4200439453125, &#39;date&#39;: 1543329000, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 1597.6500244140625, &#39;low&#39;: 1558.010009765625, &#39;open&#39;: 1575.989990234375, &#39;volume&#39;: 5783200}, {&#39;adjclose&#39;: 1677.75, &#39;close&#39;: 1677.75, &#39;date&#39;: 1543415400, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 1681.449951171875, &#39;low&#39;: 1601.219970703125, &#39;open&#39;: 1613.9200439453125, &#39;volume&#39;: 8458700}, {&#39;adjclose&#39;: 1673.5699462890625, &#39;close&#39;: 1673.5699462890625, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 1689.989990234375, &#39;low&#39;: 1652.3299560546875, &#39;open&#39;: 1674.989990234375, &#39;volume&#39;: 6613200}, {&#39;adjclose&#39;: 1690.1700439453125, &#39;close&#39;: 1690.1700439453125, &#39;date&#39;: 1543588200, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 1696.0, &#39;low&#39;: 1666.5, &#39;open&#39;: 1679.5, &#39;volume&#39;: 5761800}, {&#39;adjclose&#39;: 1772.3599853515625, &#39;close&#39;: 1772.3599853515625, &#39;date&#39;: 1543847400, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 1778.3399658203125, &#39;low&#39;: 1730.0, &#39;open&#39;: 1769.4599609375, &#39;volume&#39;: 6862300}, {&#39;adjclose&#39;: 1668.4000244140625, &#39;close&#39;: 1668.4000244140625, &#39;date&#39;: 1543933800, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 1770.3399658203125, &#39;low&#39;: 1665.0, &#39;open&#39;: 1756.0, &#39;volume&#39;: 8694500}, {&#39;adjclose&#39;: 1699.18994140625, &#39;close&#39;: 1699.18994140625, &#39;date&#39;: 1544106600, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 1701.050048828125, &#39;low&#39;: 1609.8499755859375, &#39;open&#39;: 1614.8699951171875, &#39;volume&#39;: 8789400}, {&#39;adjclose&#39;: 1629.1300048828125, &#39;close&#39;: 1629.1300048828125, &#39;date&#39;: 1544193000, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 1718.9300537109375, &#39;low&#39;: 1625.4599609375, &#39;open&#39;: 1705.0699462890625, &#39;volume&#39;: 7576100}, {&#39;adjclose&#39;: 1641.030029296875, &#39;close&#39;: 1641.030029296875, &#39;date&#39;: 1544452200, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 1657.989990234375, &#39;low&#39;: 1590.8699951171875, &#39;open&#39;: 1623.8399658203125, &#39;volume&#39;: 7494800}, {&#39;adjclose&#39;: 1643.239990234375, &#39;close&#39;: 1643.239990234375, &#39;date&#39;: 1544538600, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 1679.469970703125, &#39;low&#39;: 1619.5999755859375, &#39;open&#39;: 1678.0, &#39;volume&#39;: 6244700}, {&#39;adjclose&#39;: 1663.5400390625, &#39;close&#39;: 1663.5400390625, &#39;date&#39;: 1544625000, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 1704.989990234375, &#39;low&#39;: 1660.27001953125, &#39;open&#39;: 1669.0, &#39;volume&#39;: 6598000}, {&#39;adjclose&#39;: 1658.3800048828125, &#39;close&#39;: 1658.3800048828125, &#39;date&#39;: 1544711400, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 1692.1199951171875, &#39;low&#39;: 1641.5, &#39;open&#39;: 1680.0, &#39;volume&#39;: 5271300}, {&#39;adjclose&#39;: 1591.9100341796875, &#39;close&#39;: 1591.9100341796875, &#39;date&#39;: 1544797800, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 1642.5699462890625, &#39;low&#39;: 1585.0, &#39;open&#39;: 1638.0, &#39;volume&#39;: 6367200}, {&#39;adjclose&#39;: 1520.9100341796875, &#39;close&#39;: 1520.9100341796875, &#39;date&#39;: 1545057000, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 1576.1300048828125, &#39;low&#39;: 1505.010009765625, &#39;open&#39;: 1566.0, &#39;volume&#39;: 8829800}, {&#39;adjclose&#39;: 1551.47998046875, &#39;close&#39;: 1551.47998046875, &#39;date&#39;: 1545143400, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 1567.550048828125, &#39;low&#39;: 1523.010009765625, &#39;open&#39;: 1540.0, &#39;volume&#39;: 6523000}, {&#39;adjclose&#39;: 1495.0799560546875, &#39;close&#39;: 1495.0799560546875, &#39;date&#39;: 1545229800, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 1584.530029296875, &#39;low&#39;: 1483.1800537109375, &#39;open&#39;: 1543.050048828125, &#39;volume&#39;: 8792200}, {&#39;adjclose&#39;: 1460.8299560546875, &#39;close&#39;: 1460.8299560546875, &#39;date&#39;: 1545316200, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 1509.5, &#39;low&#39;: 1432.68994140625, &#39;open&#39;: 1484.0, &#39;volume&#39;: 9991800}, {&#39;adjclose&#39;: 1377.449951171875, &#39;close&#39;: 1377.449951171875, &#39;date&#39;: 1545402600, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 1480.0, &#39;low&#39;: 1363.9599609375, &#39;open&#39;: 1464.989990234375, &#39;volume&#39;: 13640300}, {&#39;adjclose&#39;: 1343.9599609375, &#39;close&#39;: 1343.9599609375, &#39;date&#39;: 1545661800, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 1396.030029296875, &#39;low&#39;: 1307.0, &#39;open&#39;: 1346.0, &#39;volume&#39;: 7220000}, {&#39;adjclose&#39;: 1470.9000244140625, &#39;close&#39;: 1470.9000244140625, &#39;date&#39;: 1545834600, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 1473.1600341796875, &#39;low&#39;: 1363.010009765625, &#39;open&#39;: 1368.8900146484375, &#39;volume&#39;: 10411800}, {&#39;adjclose&#39;: 1461.6400146484375, &#39;close&#39;: 1461.6400146484375, &#39;date&#39;: 1545921000, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 1469.0, &#39;low&#39;: 1390.31005859375, &#39;open&#39;: 1454.199951171875, &#39;volume&#39;: 9722000}, {&#39;adjclose&#39;: 1478.02001953125, &#39;close&#39;: 1478.02001953125, &#39;date&#39;: 1546007400, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 1513.469970703125, &#39;low&#39;: 1449.0, &#39;open&#39;: 1473.3499755859375, &#39;volume&#39;: 8829000}, {&#39;adjclose&#39;: 1501.969970703125, &#39;close&#39;: 1501.969970703125, &#39;date&#39;: 1546266600, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 1520.760009765625, &#39;low&#39;: 1487.0, &#39;open&#39;: 1510.800048828125, &#39;volume&#39;: 6954500}, {&#39;adjclose&#39;: 1539.1300048828125, &#39;close&#39;: 1539.1300048828125, &#39;date&#39;: 1546439400, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 1553.3599853515625, &#39;low&#39;: 1460.9300537109375, &#39;open&#39;: 1465.199951171875, &#39;volume&#39;: 7983100}, {&#39;adjclose&#39;: 1500.280029296875, &#39;close&#39;: 1500.280029296875, &#39;date&#39;: 1546525800, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 1538.0, &#39;low&#39;: 1497.1099853515625, &#39;open&#39;: 1520.010009765625, &#39;volume&#39;: 6975600}, {&#39;adjclose&#39;: 1575.3900146484375, &#39;close&#39;: 1575.3900146484375, &#39;date&#39;: 1546612200, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 1594.0, &#39;low&#39;: 1518.31005859375, &#39;open&#39;: 1530.0, &#39;volume&#39;: 9182600}, {&#39;adjclose&#39;: 1629.510009765625, &#39;close&#39;: 1629.510009765625, &#39;date&#39;: 1546871400, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 1634.56005859375, &#39;low&#39;: 1589.18994140625, &#39;open&#39;: 1602.31005859375, &#39;volume&#39;: 7993200}, {&#39;adjclose&#39;: 1656.5799560546875, &#39;close&#39;: 1656.5799560546875, &#39;date&#39;: 1546957800, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 1676.6099853515625, &#39;low&#39;: 1616.6099853515625, &#39;open&#39;: 1664.68994140625, &#39;volume&#39;: 8881400}, {&#39;adjclose&#39;: 1659.4200439453125, &#39;close&#39;: 1659.4200439453125, &#39;date&#39;: 1547044200, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 1667.800048828125, &#39;low&#39;: 1641.4000244140625, &#39;open&#39;: 1652.97998046875, &#39;volume&#39;: 6348800}, {&#39;adjclose&#39;: 1656.219970703125, &#39;close&#39;: 1656.219970703125, &#39;date&#39;: 1547130600, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 1663.25, &#39;low&#39;: 1621.6199951171875, &#39;open&#39;: 1641.010009765625, &#39;volume&#39;: 6507700}, {&#39;adjclose&#39;: 1640.56005859375, &#39;close&#39;: 1640.56005859375, &#39;date&#39;: 1547217000, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 1660.2900390625, &#39;low&#39;: 1636.219970703125, &#39;open&#39;: 1640.550048828125, &#39;volume&#39;: 4686200}, {&#39;adjclose&#39;: 1617.2099609375, &#39;close&#39;: 1617.2099609375, &#39;date&#39;: 1547476200, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 1648.199951171875, &#39;low&#39;: 1595.1500244140625, &#39;open&#39;: 1615.0, &#39;volume&#39;: 6005900}, {&#39;adjclose&#39;: 1674.56005859375, &#39;close&#39;: 1674.56005859375, &#39;date&#39;: 1547562600, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 1675.1600341796875, &#39;low&#39;: 1626.010009765625, &#39;open&#39;: 1632.0, &#39;volume&#39;: 5998500}, {&#39;adjclose&#39;: 1683.780029296875, &#39;close&#39;: 1683.780029296875, &#39;date&#39;: 1547649000, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 1705.0, &#39;low&#39;: 1675.8800048828125, &#39;open&#39;: 1684.219970703125, &#39;volume&#39;: 6366900}, {&#39;adjclose&#39;: 1693.219970703125, &#39;close&#39;: 1693.219970703125, &#39;date&#39;: 1547735400, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 1700.1700439453125, &#39;low&#39;: 1677.5, &#39;open&#39;: 1680.0, &#39;volume&#39;: 4208900}, {&#39;adjclose&#39;: 1696.199951171875, &#39;close&#39;: 1696.199951171875, &#39;date&#39;: 1547821800, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 1716.199951171875, &#39;low&#39;: 1691.5400390625, &#39;open&#39;: 1712.0, &#39;volume&#39;: 6020500}, {&#39;adjclose&#39;: 1632.1700439453125, &#39;close&#39;: 1632.1700439453125, &#39;date&#39;: 1548167400, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 1681.8699951171875, &#39;low&#39;: 1610.199951171875, &#39;open&#39;: 1681.0, &#39;volume&#39;: 6416800}, {&#39;adjclose&#39;: 1640.02001953125, &#39;close&#39;: 1640.02001953125, &#39;date&#39;: 1548253800, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 1657.4300537109375, &#39;low&#39;: 1612.0, &#39;open&#39;: 1656.0, &#39;volume&#39;: 5225200}, {&#39;adjclose&#39;: 1654.9300537109375, &#39;close&#39;: 1654.9300537109375, &#39;date&#39;: 1548340200, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 1657.260009765625, &#39;low&#39;: 1631.780029296875, &#39;open&#39;: 1641.0699462890625, &#39;volume&#39;: 4089900}, {&#39;adjclose&#39;: 1670.5699462890625, &#39;close&#39;: 1670.5699462890625, &#39;date&#39;: 1548426600, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 1683.47998046875, &#39;low&#39;: 1661.6099853515625, &#39;open&#39;: 1670.5, &#39;volume&#39;: 4945900}, {&#39;adjclose&#39;: 1637.8900146484375, &#39;close&#39;: 1637.8900146484375, &#39;date&#39;: 1548685800, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 1645.0, &#39;low&#39;: 1614.0899658203125, &#39;open&#39;: 1643.5899658203125, &#39;volume&#39;: 4837700}, {&#39;adjclose&#39;: 1593.8800048828125, &#39;close&#39;: 1593.8800048828125, &#39;date&#39;: 1548772200, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 1632.3800048828125, &#39;low&#39;: 1590.719970703125, &#39;open&#39;: 1631.27001953125, &#39;volume&#39;: 4632800}, {&#39;adjclose&#39;: 1670.4300537109375, &#39;close&#39;: 1670.4300537109375, &#39;date&#39;: 1548858600, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 1676.949951171875, &#39;low&#39;: 1619.6800537109375, &#39;open&#39;: 1623.0, &#39;volume&#39;: 5783800}, {&#39;adjclose&#39;: 1718.72998046875, &#39;close&#39;: 1718.72998046875, &#39;date&#39;: 1548945000, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 1736.4100341796875, &#39;low&#39;: 1679.0799560546875, &#39;open&#39;: 1692.8499755859375, &#39;volume&#39;: 10910300}, {&#39;adjclose&#39;: 1626.22998046875, &#39;close&#39;: 1626.22998046875, &#39;date&#39;: 1549031400, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 1673.06005859375, &#39;low&#39;: 1622.010009765625, &#39;open&#39;: 1638.8800048828125, &#39;volume&#39;: 11506200}, {&#39;adjclose&#39;: 1633.31005859375, &#39;close&#39;: 1633.31005859375, &#39;date&#39;: 1549290600, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 1649.6300048828125, &#39;low&#39;: 1613.5, &#39;open&#39;: 1623.0, &#39;volume&#39;: 4929100}, {&#39;adjclose&#39;: 1658.81005859375, &#39;close&#39;: 1658.81005859375, &#39;date&#39;: 1549377000, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 1665.260009765625, &#39;low&#39;: 1642.5, &#39;open&#39;: 1643.3399658203125, &#39;volume&#39;: 4453100}, {&#39;adjclose&#39;: 1640.260009765625, &#39;close&#39;: 1640.260009765625, &#39;date&#39;: 1549463400, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 1672.260009765625, &#39;low&#39;: 1633.3399658203125, &#39;open&#39;: 1670.75, &#39;volume&#39;: 3939900}, {&#39;adjclose&#39;: 1614.3699951171875, &#39;close&#39;: 1614.3699951171875, &#39;date&#39;: 1549549800, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 1625.5400390625, &#39;low&#39;: 1592.9100341796875, &#39;open&#39;: 1625.0, &#39;volume&#39;: 4626600}, {&#39;adjclose&#39;: 1588.219970703125, &#39;close&#39;: 1588.219970703125, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 1588.5899658203125, &#39;low&#39;: 1566.760009765625, &#39;open&#39;: 1586.0, &#39;volume&#39;: 5657500}, {&#39;adjclose&#39;: 1591.0, &#39;close&#39;: 1591.0, &#39;date&#39;: 1549895400, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 1609.2900390625, &#39;low&#39;: 1586.0, &#39;open&#39;: 1600.97998046875, &#39;volume&#39;: 3317300}, {&#39;adjclose&#39;: 1638.010009765625, &#39;close&#39;: 1638.010009765625, &#39;date&#39;: 1549981800, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 1639.4000244140625, &#39;low&#39;: 1598.8800048828125, &#39;open&#39;: 1604.0, &#39;volume&#39;: 4858600}, {&#39;adjclose&#39;: 1640.0, &#39;close&#39;: 1640.0, &#39;date&#39;: 1550068200, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 1656.3800048828125, &#39;low&#39;: 1637.1099853515625, &#39;open&#39;: 1647.0, &#39;volume&#39;: 3560300}, {&#39;adjclose&#39;: 1622.6500244140625, &#39;close&#39;: 1622.6500244140625, &#39;date&#39;: 1550154600, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 1637.9000244140625, &#39;low&#39;: 1606.06005859375, &#39;open&#39;: 1624.5, &#39;volume&#39;: 4120500}, {&#39;adjclose&#39;: 1607.949951171875, &#39;close&#39;: 1607.949951171875, &#39;date&#39;: 1550241000, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 1628.9100341796875, &#39;low&#39;: 1604.5, &#39;open&#39;: 1627.8599853515625, &#39;volume&#39;: 4343900}, {&#39;adjclose&#39;: 1627.5799560546875, &#39;close&#39;: 1627.5799560546875, &#39;date&#39;: 1550586600, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 1634.0, &#39;low&#39;: 1600.56005859375, &#39;open&#39;: 1601.0, &#39;volume&#39;: 3681700}, {&#39;adjclose&#39;: 1622.0999755859375, &#39;close&#39;: 1622.0999755859375, &#39;date&#39;: 1550673000, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 1634.9300537109375, &#39;low&#39;: 1610.1199951171875, &#39;open&#39;: 1630.0, &#39;volume&#39;: 3337600}, {&#39;adjclose&#39;: 1619.43994140625, &#39;close&#39;: 1619.43994140625, &#39;date&#39;: 1550759400, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 1623.56005859375, &#39;low&#39;: 1600.9100341796875, &#39;open&#39;: 1619.8499755859375, &#39;volume&#39;: 3483400}, {&#39;adjclose&#39;: 1631.56005859375, &#39;close&#39;: 1631.56005859375, &#39;date&#39;: 1550845800, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 1634.93994140625, &#39;low&#39;: 1621.1700439453125, &#39;open&#39;: 1623.5, &#39;volume&#39;: 3096200}, {&#39;adjclose&#39;: 1633.0, &#39;close&#39;: 1633.0, &#39;date&#39;: 1551105000, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 1654.5999755859375, &#39;low&#39;: 1630.3900146484375, &#39;open&#39;: 1641.449951171875, &#39;volume&#39;: 3184500}, {&#39;adjclose&#39;: 1636.4000244140625, &#39;close&#39;: 1636.4000244140625, &#39;date&#39;: 1551191400, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 1639.989990234375, &#39;low&#39;: 1616.1300048828125, &#39;open&#39;: 1625.97998046875, &#39;volume&#39;: 2665800}, {&#39;adjclose&#39;: 1641.0899658203125, &#39;close&#39;: 1641.0899658203125, &#39;date&#39;: 1551277800, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 1641.81005859375, &#39;low&#39;: 1615.0999755859375, &#39;open&#39;: 1628.1800537109375, &#39;volume&#39;: 3148800}, {&#39;adjclose&#39;: 1639.8299560546875, &#39;close&#39;: 1639.8299560546875, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 1651.77001953125, &#39;low&#39;: 1633.8299560546875, &#39;open&#39;: 1635.25, &#39;volume&#39;: 3025900}, {&#39;adjclose&#39;: 1671.72998046875, &#39;close&#39;: 1671.72998046875, &#39;date&#39;: 1551450600, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 1674.260009765625, &#39;low&#39;: 1651.0, &#39;open&#39;: 1655.1300048828125, &#39;volume&#39;: 4974900}, {&#39;adjclose&#39;: 1696.1700439453125, &#39;close&#39;: 1696.1700439453125, &#39;date&#39;: 1551709800, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 1709.4300537109375, &#39;low&#39;: 1674.3599853515625, &#39;open&#39;: 1685.0, &#39;volume&#39;: 6167400}, {&#39;adjclose&#39;: 1692.4300537109375, &#39;close&#39;: 1692.4300537109375, &#39;date&#39;: 1551796200, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 1707.800048828125, &#39;low&#39;: 1689.010009765625, &#39;open&#39;: 1702.949951171875, &#39;volume&#39;: 3681500}, {&#39;adjclose&#39;: 1668.949951171875, &#39;close&#39;: 1668.949951171875, &#39;date&#39;: 1551882600, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 1697.75, &#39;low&#39;: 1668.280029296875, &#39;open&#39;: 1695.969970703125, &#39;volume&#39;: 3996000}, {&#39;adjclose&#39;: 1625.949951171875, &#39;close&#39;: 1625.949951171875, &#39;date&#39;: 1551969000, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 1669.75, &#39;low&#39;: 1620.510009765625, &#39;open&#39;: 1667.3699951171875, &#39;volume&#39;: 4957000}, {&#39;adjclose&#39;: 1620.800048828125, &#39;close&#39;: 1620.800048828125, &#39;date&#39;: 1552055400, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 1622.719970703125, &#39;low&#39;: 1586.5699462890625, &#39;open&#39;: 1604.010009765625, &#39;volume&#39;: 4667000}, {&#39;adjclose&#39;: 1670.6199951171875, &#39;close&#39;: 1670.6199951171875, &#39;date&#39;: 1552311000, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 1672.2900390625, &#39;low&#39;: 1626.010009765625, &#39;open&#39;: 1626.1199951171875, &#39;volume&#39;: 3876400}, {&#39;adjclose&#39;: 1673.0999755859375, &#39;close&#39;: 1673.0999755859375, &#39;date&#39;: 1552397400, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 1684.27001953125, &#39;low&#39;: 1660.97998046875, &#39;open&#39;: 1669.0, &#39;volume&#39;: 3614500}, {&#39;adjclose&#39;: 1690.81005859375, &#39;close&#39;: 1690.81005859375, &#39;date&#39;: 1552483800, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 1700.0, &#39;low&#39;: 1679.3499755859375, &#39;open&#39;: 1683.0, &#39;volume&#39;: 3552000}, {&#39;adjclose&#39;: 1686.219970703125, &#39;close&#39;: 1686.219970703125, &#39;date&#39;: 1552570200, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 1702.0, &#39;low&#39;: 1684.3399658203125, &#39;open&#39;: 1691.199951171875, &#39;volume&#39;: 2946600}, {&#39;adjclose&#39;: 1712.3599853515625, &#39;close&#39;: 1712.3599853515625, &#39;date&#39;: 1552656600, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 1718.800048828125, &#39;low&#39;: 1693.1300048828125, &#39;open&#39;: 1703.0, &#39;volume&#39;: 7550900}, {&#39;adjclose&#39;: 1742.1500244140625, &#39;close&#39;: 1742.1500244140625, &#39;date&#39;: 1552915800, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 1750.0, &#39;low&#39;: 1712.6300048828125, &#39;open&#39;: 1712.699951171875, &#39;volume&#39;: 5429100}, {&#39;adjclose&#39;: 1761.8499755859375, &#39;close&#39;: 1761.8499755859375, &#39;date&#39;: 1553002200, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 1784.1600341796875, &#39;low&#39;: 1753.510009765625, &#39;open&#39;: 1753.510009765625, &#39;volume&#39;: 6364200}, {&#39;adjclose&#39;: 1797.27001953125, &#39;close&#39;: 1797.27001953125, &#39;date&#39;: 1553088600, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 1799.5, &#39;low&#39;: 1767.030029296875, &#39;open&#39;: 1769.93994140625, &#39;volume&#39;: 6265600}, {&#39;adjclose&#39;: 1819.260009765625, &#39;close&#39;: 1819.260009765625, &#39;date&#39;: 1553175000, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 1823.75, &#39;low&#39;: 1787.280029296875, &#39;open&#39;: 1796.260009765625, &#39;volume&#39;: 5767800}, {&#39;adjclose&#39;: 1764.77001953125, &#39;close&#39;: 1764.77001953125, &#39;date&#39;: 1553261400, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 1818.97998046875, &#39;low&#39;: 1763.1099853515625, &#39;open&#39;: 1810.1700439453125, &#39;volume&#39;: 6363000}, {&#39;adjclose&#39;: 1774.260009765625, &#39;close&#39;: 1774.260009765625, &#39;date&#39;: 1553520600, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 1782.6800537109375, &#39;low&#39;: 1747.5, &#39;open&#39;: 1757.7900390625, &#39;volume&#39;: 5103800}, {&#39;adjclose&#39;: 1783.760009765625, &#39;close&#39;: 1783.760009765625, &#39;date&#39;: 1553607000, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 1805.77001953125, &#39;low&#39;: 1773.3599853515625, &#39;open&#39;: 1793.0, &#39;volume&#39;: 4865900}, {&#39;adjclose&#39;: 1765.699951171875, &#39;close&#39;: 1765.699951171875, &#39;date&#39;: 1553693400, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 1787.5, &#39;low&#39;: 1745.6800537109375, &#39;open&#39;: 1784.1300048828125, &#39;volume&#39;: 4324800}, {&#39;adjclose&#39;: 1773.4200439453125, &#39;close&#39;: 1773.4200439453125, &#39;date&#39;: 1553779800, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 1777.9300537109375, &#39;low&#39;: 1753.469970703125, &#39;open&#39;: 1770.0, &#39;volume&#39;: 3043000}, {&#39;adjclose&#39;: 1780.75, &#39;close&#39;: 1780.75, &#39;date&#39;: 1553866200, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 1792.8599853515625, &#39;low&#39;: 1776.6300048828125, &#39;open&#39;: 1786.5799560546875, &#39;volume&#39;: 3320800}, {&#39;adjclose&#39;: 1814.18994140625, &#39;close&#39;: 1814.18994140625, &#39;date&#39;: 1554125400, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 1815.6700439453125, &#39;low&#39;: 1798.72998046875, &#39;open&#39;: 1800.1099853515625, &#39;volume&#39;: 4238800}, {&#39;adjclose&#39;: 1813.97998046875, &#39;close&#39;: 1813.97998046875, &#39;date&#39;: 1554211800, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 1820.0, &#39;low&#39;: 1805.1199951171875, &#39;open&#39;: 1811.02001953125, &#39;volume&#39;: 3448100}, {&#39;adjclose&#39;: 1820.699951171875, &#39;close&#39;: 1820.699951171875, &#39;date&#39;: 1554298200, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 1830.0, &#39;low&#39;: 1809.6199951171875, &#39;open&#39;: 1826.719970703125, &#39;volume&#39;: 3980600}, {&#39;adjclose&#39;: 1818.8599853515625, &#39;close&#39;: 1818.8599853515625, &#39;date&#39;: 1554384600, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 1828.75, &#39;low&#39;: 1804.199951171875, &#39;open&#39;: 1820.6500244140625, &#39;volume&#39;: 3623900}, {&#39;adjclose&#39;: 1837.280029296875, &#39;close&#39;: 1837.280029296875, &#39;date&#39;: 1554471000, &#39;formatted_date&#39;: &#39;2019-04-05&#39;, &#39;high&#39;: 1838.5799560546875, &#39;low&#39;: 1825.18994140625, &#39;open&#39;: 1829.0, &#39;volume&#39;: 3640500}, {&#39;adjclose&#39;: 1849.8599853515625, &#39;close&#39;: 1849.8599853515625, &#39;date&#39;: 1554730200, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 1850.199951171875, &#39;low&#39;: 1825.1099853515625, &#39;open&#39;: 1833.22998046875, &#39;volume&#39;: 3752800}, {&#39;adjclose&#39;: 1835.8399658203125, &#39;close&#39;: 1835.8399658203125, &#39;date&#39;: 1554816600, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 1853.0899658203125, &#39;low&#39;: 1831.780029296875, &#39;open&#39;: 1845.489990234375, &#39;volume&#39;: 3714400}, {&#39;adjclose&#39;: 1847.3299560546875, &#39;close&#39;: 1847.3299560546875, &#39;date&#39;: 1554903000, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 1848.0, &#39;low&#39;: 1828.81005859375, &#39;open&#39;: 1841.0, &#39;volume&#39;: 2964000}, {&#39;adjclose&#39;: 1844.0699462890625, &#39;close&#39;: 1844.0699462890625, &#39;date&#39;: 1554989400, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 1849.949951171875, &#39;low&#39;: 1840.31005859375, &#39;open&#39;: 1848.699951171875, &#39;volume&#39;: 2654800}, {&#39;adjclose&#39;: 1843.06005859375, &#39;close&#39;: 1843.06005859375, &#39;date&#39;: 1555075800, &#39;formatted_date&#39;: &#39;2019-04-12&#39;, &#39;high&#39;: 1851.5, &#39;low&#39;: 1841.300048828125, &#39;open&#39;: 1848.4000244140625, &#39;volume&#39;: 3114400}, {&#39;adjclose&#39;: 1844.8699951171875, &#39;close&#39;: 1844.8699951171875, &#39;date&#39;: 1555335000, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 1846.8499755859375, &#39;low&#39;: 1818.9000244140625, &#39;open&#39;: 1842.0, &#39;volume&#39;: 3724400}, {&#39;adjclose&#39;: 1863.0400390625, &#39;close&#39;: 1863.0400390625, &#39;date&#39;: 1555421400, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 1869.77001953125, &#39;low&#39;: 1848.0, &#39;open&#39;: 1851.3499755859375, &#39;volume&#39;: 3044600}, {&#39;adjclose&#39;: 1864.8199462890625, &#39;close&#39;: 1864.8199462890625, &#39;date&#39;: 1555507800, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 1876.469970703125, &#39;low&#39;: 1860.43994140625, &#39;open&#39;: 1872.989990234375, &#39;volume&#39;: 2893500}, {&#39;adjclose&#39;: 1861.68994140625, &#39;close&#39;: 1861.68994140625, &#39;date&#39;: 1555594200, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 1870.8199462890625, &#39;low&#39;: 1859.47998046875, &#39;open&#39;: 1868.7900390625, &#39;volume&#39;: 2749900}, {&#39;adjclose&#39;: 1887.31005859375, &#39;close&#39;: 1887.31005859375, &#39;date&#39;: 1555939800, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 1888.4200439453125, &#39;low&#39;: 1845.6400146484375, &#39;open&#39;: 1855.4000244140625, &#39;volume&#39;: 3373800}, {&#39;adjclose&#39;: 1923.77001953125, &#39;close&#39;: 1923.77001953125, &#39;date&#39;: 1556026200, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 1929.260009765625, &#39;low&#39;: 1889.5799560546875, &#39;open&#39;: 1891.199951171875, &#39;volume&#39;: 4640400}, {&#39;adjclose&#39;: 1901.75, &#39;close&#39;: 1901.75, &#39;date&#39;: 1556112600, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 1929.68994140625, &#39;low&#39;: 1898.1600341796875, &#39;open&#39;: 1925.0, &#39;volume&#39;: 3675800}, {&#39;adjclose&#39;: 1902.25, &#39;close&#39;: 1902.25, &#39;date&#39;: 1556199000, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 1922.449951171875, &#39;low&#39;: 1900.31005859375, &#39;open&#39;: 1917.0, &#39;volume&#39;: 6099100}, {&#39;adjclose&#39;: 1950.6300048828125, &#39;close&#39;: 1950.6300048828125, &#39;date&#39;: 1556285400, &#39;formatted_date&#39;: &#39;2019-04-26&#39;, &#39;high&#39;: 1951.0, &#39;low&#39;: 1898.0, &#39;open&#39;: 1929.0, &#39;volume&#39;: 8432600}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: -14400}}, &#39;BABA&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 1411133400, &#39;formatted_date&#39;: &#39;2014-09-19&#39;}, &#39;instrumentType&#39;: &#39;EQUITY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 178.5399932861328, &#39;close&#39;: 178.5399932861328, &#39;date&#39;: 1525095000, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 180.0399932861328, &#39;low&#39;: 177.0500030517578, &#39;open&#39;: 178.08999633789062, &#39;volume&#39;: 14654000}, {&#39;adjclose&#39;: 179.5, &#39;close&#39;: 179.5, &#39;date&#39;: 1525181400, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 180.32000732421875, &#39;low&#39;: 177.44000244140625, &#39;open&#39;: 177.5800018310547, &#39;volume&#39;: 10787700}, {&#39;adjclose&#39;: 181.4499969482422, &#39;close&#39;: 181.4499969482422, &#39;date&#39;: 1525267800, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 184.26400756835938, &#39;low&#39;: 180.11000061035156, &#39;open&#39;: 180.8000030517578, &#39;volume&#39;: 20681800}, {&#39;adjclose&#39;: 182.4499969482422, &#39;close&#39;: 182.4499969482422, &#39;date&#39;: 1525354200, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 183.58999633789062, &#39;low&#39;: 175.77000427246094, &#39;open&#39;: 183.5, &#39;volume&#39;: 26257600}, {&#39;adjclose&#39;: 188.88999938964844, &#39;close&#39;: 188.88999938964844, &#39;date&#39;: 1525440600, &#39;formatted_date&#39;: &#39;2018-05-04&#39;, &#39;high&#39;: 190.60000610351562, &#39;low&#39;: 178.6199951171875, &#39;open&#39;: 180.39999389648438, &#39;volume&#39;: 57788300}, {&#39;adjclose&#39;: 195.35000610351562, &#39;close&#39;: 195.35000610351562, &#39;date&#39;: 1525699800, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 196.60000610351562, &#39;low&#39;: 190.3000030517578, &#39;open&#39;: 190.41000366210938, &#39;volume&#39;: 29862200}, {&#39;adjclose&#39;: 196.30999755859375, &#39;close&#39;: 196.30999755859375, &#39;date&#39;: 1525786200, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 197.33999633789062, &#39;low&#39;: 193.00999450683594, &#39;open&#39;: 194.1999969482422, &#39;volume&#39;: 21856300}, {&#39;adjclose&#39;: 195.42999267578125, &#39;close&#39;: 195.42999267578125, &#39;date&#39;: 1525872600, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 197.3800048828125, &#39;low&#39;: 194.5, &#39;open&#39;: 195.83999633789062, &#39;volume&#39;: 13780600}, {&#39;adjclose&#39;: 195.9600067138672, &#39;close&#39;: 195.9600067138672, &#39;date&#39;: 1525959000, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 199.77000427246094, &#39;low&#39;: 195.16000366210938, &#39;open&#39;: 196.3000030517578, &#39;volume&#39;: 21295000}, {&#39;adjclose&#39;: 194.36000061035156, &#39;close&#39;: 194.36000061035156, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;, &#39;high&#39;: 196.4600067138672, &#39;low&#39;: 193.3800048828125, &#39;open&#39;: 196.39999389648438, &#39;volume&#39;: 12741100}, {&#39;adjclose&#39;: 198.63999938964844, &#39;close&#39;: 198.63999938964844, &#39;date&#39;: 1526304600, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 200.0, &#39;low&#39;: 195.8699951171875, &#39;open&#39;: 195.89999389648438, &#39;volume&#39;: 17627100}, {&#39;adjclose&#39;: 196.61000061035156, &#39;close&#39;: 196.61000061035156, &#39;date&#39;: 1526391000, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 196.77999877929688, &#39;low&#39;: 193.86000061035156, &#39;open&#39;: 195.22999572753906, &#39;volume&#39;: 12694900}, {&#39;adjclose&#39;: 198.11000061035156, &#39;close&#39;: 198.11000061035156, &#39;date&#39;: 1526477400, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 199.75, &#39;low&#39;: 196.3000030517578, &#39;open&#39;: 196.75, &#39;volume&#39;: 12887500}, {&#39;adjclose&#39;: 196.02000427246094, &#39;close&#39;: 196.02000427246094, &#39;date&#39;: 1526563800, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 198.42999267578125, &#39;low&#39;: 195.57000732421875, &#39;open&#39;: 196.0, &#39;volume&#39;: 13470500}, {&#39;adjclose&#39;: 195.0, &#39;close&#39;: 195.0, &#39;date&#39;: 1526650200, &#39;formatted_date&#39;: &#39;2018-05-18&#39;, &#39;high&#39;: 197.77999877929688, &#39;low&#39;: 194.72000122070312, &#39;open&#39;: 196.42999267578125, &#39;volume&#39;: 14242300}, {&#39;adjclose&#39;: 197.63999938964844, &#39;close&#39;: 197.63999938964844, &#39;date&#39;: 1526909400, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 199.7899932861328, &#39;low&#39;: 196.39999389648438, &#39;open&#39;: 197.8000030517578, &#39;volume&#39;: 13830500}, {&#39;adjclose&#39;: 195.8699951171875, &#39;close&#39;: 195.8699951171875, &#39;date&#39;: 1526995800, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 198.6269989013672, &#39;low&#39;: 195.6999969482422, &#39;open&#39;: 198.3000030517578, &#39;volume&#39;: 9700100}, {&#39;adjclose&#39;: 196.8000030517578, &#39;close&#39;: 196.8000030517578, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 196.89999389648438, &#39;low&#39;: 192.80099487304688, &#39;open&#39;: 193.8800048828125, &#39;volume&#39;: 12807400}, {&#39;adjclose&#39;: 197.3699951171875, &#39;close&#39;: 197.3699951171875, &#39;date&#39;: 1527168600, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 199.72000122070312, &#39;low&#39;: 195.69700622558594, &#39;open&#39;: 198.1199951171875, &#39;volume&#39;: 18527700}, {&#39;adjclose&#39;: 199.1999969482422, &#39;close&#39;: 199.1999969482422, &#39;date&#39;: 1527255000, &#39;formatted_date&#39;: &#39;2018-05-25&#39;, &#39;high&#39;: 201.5, &#39;low&#39;: 197.2100067138672, &#39;open&#39;: 197.57000732421875, &#39;volume&#39;: 21270000}, {&#39;adjclose&#39;: 198.0, &#39;close&#39;: 198.0, &#39;date&#39;: 1527600600, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 202.27999877929688, &#39;low&#39;: 197.0, &#39;open&#39;: 197.94000244140625, &#39;volume&#39;: 18768700}, {&#39;adjclose&#39;: 197.97999572753906, &#39;close&#39;: 197.97999572753906, &#39;date&#39;: 1527687000, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 200.5399932861328, &#39;low&#39;: 197.5, &#39;open&#39;: 199.6999969482422, &#39;volume&#39;: 13930600}, {&#39;adjclose&#39;: 198.00999450683594, &#39;close&#39;: 198.00999450683594, &#39;date&#39;: 1527773400, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 199.47999572753906, &#39;low&#39;: 196.85000610351562, &#39;open&#39;: 198.0, &#39;volume&#39;: 17982500}, {&#39;adjclose&#39;: 204.33999633789062, &#39;close&#39;: 204.33999633789062, &#39;date&#39;: 1527859800, &#39;formatted_date&#39;: &#39;2018-06-01&#39;, &#39;high&#39;: 204.99000549316406, &#39;low&#39;: 199.4499969482422, &#39;open&#39;: 199.5, &#39;volume&#39;: 23131900}, {&#39;adjclose&#39;: 208.9499969482422, &#39;close&#39;: 208.9499969482422, &#39;date&#39;: 1528119000, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 209.75, &#39;low&#39;: 204.72999572753906, &#39;open&#39;: 205.1199951171875, &#39;volume&#39;: 19357000}, {&#39;adjclose&#39;: 208.3699951171875, &#39;close&#39;: 208.3699951171875, &#39;date&#39;: 1528205400, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 211.6999969482422, &#39;low&#39;: 207.1300048828125, &#39;open&#39;: 209.9499969482422, &#39;volume&#39;: 17787700}, {&#39;adjclose&#39;: 208.3000030517578, &#39;close&#39;: 208.3000030517578, &#39;date&#39;: 1528291800, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 210.4600067138672, &#39;low&#39;: 207.28900146484375, &#39;open&#39;: 209.86000061035156, &#39;volume&#39;: 13800500}, {&#39;adjclose&#39;: 203.6199951171875, &#39;close&#39;: 203.6199951171875, &#39;date&#39;: 1528378200, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 209.0, &#39;low&#39;: 200.8800048828125, &#39;open&#39;: 207.4600067138672, &#39;volume&#39;: 26747800}, {&#39;adjclose&#39;: 205.07000732421875, &#39;close&#39;: 205.07000732421875, &#39;date&#39;: 1528464600, &#39;formatted_date&#39;: &#39;2018-06-08&#39;, &#39;high&#39;: 206.22999572753906, &#39;low&#39;: 200.42999267578125, &#39;open&#39;: 201.11000061035156, &#39;volume&#39;: 17525200}, {&#39;adjclose&#39;: 205.6999969482422, &#39;close&#39;: 205.6999969482422, &#39;date&#39;: 1528723800, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 207.60000610351562, &#39;low&#39;: 205.00999450683594, &#39;open&#39;: 206.5, &#39;volume&#39;: 12061400}, {&#39;adjclose&#39;: 209.0800018310547, &#39;close&#39;: 209.0800018310547, &#39;date&#39;: 1528810200, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 209.8000030517578, &#39;low&#39;: 206.89999389648438, &#39;open&#39;: 206.9499969482422, &#39;volume&#39;: 15910900}, {&#39;adjclose&#39;: 206.6199951171875, &#39;close&#39;: 206.6199951171875, &#39;date&#39;: 1528896600, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 209.64999389648438, &#39;low&#39;: 206.60000610351562, &#39;open&#39;: 209.44000244140625, &#39;volume&#39;: 13844200}, {&#39;adjclose&#39;: 210.86000061035156, &#39;close&#39;: 210.86000061035156, &#39;date&#39;: 1528983000, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 211.1199951171875, &#39;low&#39;: 207.50999450683594, &#39;open&#39;: 207.72000122070312, &#39;volume&#39;: 18838300}, {&#39;adjclose&#39;: 208.0, &#39;close&#39;: 208.0, &#39;date&#39;: 1529069400, &#39;formatted_date&#39;: &#39;2018-06-15&#39;, &#39;high&#39;: 210.0800018310547, &#39;low&#39;: 206.00999450683594, &#39;open&#39;: 207.49000549316406, &#39;volume&#39;: 28665600}, {&#39;adjclose&#39;: 208.57000732421875, &#39;close&#39;: 208.57000732421875, &#39;date&#39;: 1529328600, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 208.60000610351562, &#39;low&#39;: 203.8800048828125, &#39;open&#39;: 205.16000366210938, &#39;volume&#39;: 14645200}, {&#39;adjclose&#39;: 204.42999267578125, &#39;close&#39;: 204.42999267578125, &#39;date&#39;: 1529415000, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 204.50999450683594, &#39;low&#39;: 199.5, &#39;open&#39;: 203.52999877929688, &#39;volume&#39;: 24484200}, {&#39;adjclose&#39;: 206.22999572753906, &#39;close&#39;: 206.22999572753906, &#39;date&#39;: 1529501400, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 207.22999572753906, &#39;low&#39;: 205.02000427246094, &#39;open&#39;: 205.0500030517578, &#39;volume&#39;: 15559600}, {&#39;adjclose&#39;: 202.2100067138672, &#39;close&#39;: 202.2100067138672, &#39;date&#39;: 1529587800, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 206.0, &#39;low&#39;: 201.0399932861328, &#39;open&#39;: 205.83999633789062, &#39;volume&#39;: 13963800}, {&#39;adjclose&#39;: 202.00999450683594, &#39;close&#39;: 202.00999450683594, &#39;date&#39;: 1529674200, &#39;formatted_date&#39;: &#39;2018-06-22&#39;, &#39;high&#39;: 203.8000030517578, &#39;low&#39;: 200.25, &#39;open&#39;: 203.3800048828125, &#39;volume&#39;: 9585000}, {&#39;adjclose&#39;: 191.25, &#39;close&#39;: 191.25, &#39;date&#39;: 1529933400, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 198.10000610351562, &#39;low&#39;: 187.86000061035156, &#39;open&#39;: 197.85000610351562, &#39;volume&#39;: 32750900}, {&#39;adjclose&#39;: 191.4199981689453, &#39;close&#39;: 191.4199981689453, &#39;date&#39;: 1530019800, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 193.66000366210938, &#39;low&#39;: 188.4199981689453, &#39;open&#39;: 193.33999633789062, &#39;volume&#39;: 20740400}, {&#39;adjclose&#39;: 185.02000427246094, &#39;close&#39;: 185.02000427246094, &#39;date&#39;: 1530106200, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 193.60000610351562, &#39;low&#39;: 184.88999938964844, &#39;open&#39;: 193.4600067138672, &#39;volume&#39;: 23887000}, {&#39;adjclose&#39;: 188.3800048828125, &#39;close&#39;: 188.3800048828125, &#39;date&#39;: 1530192600, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 188.9600067138672, &#39;low&#39;: 182.0399932861328, &#39;open&#39;: 183.1999969482422, &#39;volume&#39;: 19553800}, {&#39;adjclose&#39;: 185.52999877929688, &#39;close&#39;: 185.52999877929688, &#39;date&#39;: 1530279000, &#39;formatted_date&#39;: &#39;2018-06-29&#39;, &#39;high&#39;: 188.97000122070312, &#39;low&#39;: 184.25999450683594, &#39;open&#39;: 185.36000061035156, &#39;volume&#39;: 26023400}, {&#39;adjclose&#39;: 186.36000061035156, &#39;close&#39;: 186.36000061035156, &#39;date&#39;: 1530538200, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 186.36000061035156, &#39;low&#39;: 181.05999755859375, &#39;open&#39;: 181.66000366210938, &#39;volume&#39;: 17325900}, {&#39;adjclose&#39;: 184.75, &#39;close&#39;: 184.75, &#39;date&#39;: 1530624600, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 188.5, &#39;low&#39;: 184.36000061035156, &#39;open&#39;: 187.8800048828125, &#39;volume&#39;: 11673700}, {&#39;adjclose&#39;: 186.8800048828125, &#39;close&#39;: 186.8800048828125, &#39;date&#39;: 1530797400, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 187.44000244140625, &#39;low&#39;: 182.89999389648438, &#39;open&#39;: 187.1699981689453, &#39;volume&#39;: 18412100}, {&#39;adjclose&#39;: 192.27000427246094, &#39;close&#39;: 192.27000427246094, &#39;date&#39;: 1530883800, &#39;formatted_date&#39;: &#39;2018-07-06&#39;, &#39;high&#39;: 192.49000549316406, &#39;low&#39;: 185.5399932861328, &#39;open&#39;: 186.00999450683594, &#39;volume&#39;: 17035600}, {&#39;adjclose&#39;: 192.75, &#39;close&#39;: 192.75, &#39;date&#39;: 1531143000, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 194.69000244140625, &#39;low&#39;: 190.8699951171875, &#39;open&#39;: 194.4499969482422, &#39;volume&#39;: 15466400}, {&#39;adjclose&#39;: 192.5500030517578, &#39;close&#39;: 192.5500030517578, &#39;date&#39;: 1531229400, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 195.1300048828125, &#39;low&#39;: 191.47999572753906, &#39;open&#39;: 192.88999938964844, &#39;volume&#39;: 12611400}, {&#39;adjclose&#39;: 187.4199981689453, &#39;close&#39;: 187.4199981689453, &#39;date&#39;: 1531315800, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 190.0500030517578, &#39;low&#39;: 187.4199981689453, &#39;open&#39;: 188.60000610351562, &#39;volume&#39;: 15947000}, {&#39;adjclose&#39;: 190.1699981689453, &#39;close&#39;: 190.1699981689453, &#39;date&#39;: 1531402200, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 192.5800018310547, &#39;low&#39;: 189.7899932861328, &#39;open&#39;: 190.77000427246094, &#39;volume&#39;: 17440400}, {&#39;adjclose&#39;: 190.0399932861328, &#39;close&#39;: 190.0399932861328, &#39;date&#39;: 1531488600, &#39;formatted_date&#39;: &#39;2018-07-13&#39;, &#39;high&#39;: 192.1199951171875, &#39;low&#39;: 189.3000030517578, &#39;open&#39;: 191.61000061035156, &#39;volume&#39;: 12550500}, {&#39;adjclose&#39;: 190.35000610351562, &#39;close&#39;: 190.35000610351562, &#39;date&#39;: 1531747800, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 191.3699951171875, &#39;low&#39;: 189.14999389648438, &#39;open&#39;: 189.57000732421875, &#39;volume&#39;: 12205600}, {&#39;adjclose&#39;: 192.66000366210938, &#39;close&#39;: 192.66000366210938, &#39;date&#39;: 1531834200, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 192.9499969482422, &#39;low&#39;: 187.89999389648438, &#39;open&#39;: 188.64999389648438, &#39;volume&#39;: 13270700}, {&#39;adjclose&#39;: 190.7899932861328, &#39;close&#39;: 190.7899932861328, &#39;date&#39;: 1531920600, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 193.22999572753906, &#39;low&#39;: 189.91000366210938, &#39;open&#39;: 192.4499969482422, &#39;volume&#39;: 10796600}, {&#39;adjclose&#39;: 187.33999633789062, &#39;close&#39;: 187.33999633789062, &#39;date&#39;: 1532007000, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 189.67999267578125, &#39;low&#39;: 186.8699951171875, &#39;open&#39;: 188.67999267578125, &#39;volume&#39;: 13373100}, {&#39;adjclose&#39;: 187.25, &#39;close&#39;: 187.25, &#39;date&#39;: 1532093400, &#39;formatted_date&#39;: &#39;2018-07-20&#39;, &#39;high&#39;: 189.5, &#39;low&#39;: 186.61000061035156, &#39;open&#39;: 189.49000549316406, &#39;volume&#39;: 12807500}, {&#39;adjclose&#39;: 187.0399932861328, &#39;close&#39;: 187.0399932861328, &#39;date&#39;: 1532352600, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 187.80999755859375, &#39;low&#39;: 184.8000030517578, &#39;open&#39;: 187.17999267578125, &#39;volume&#39;: 10996200}, {&#39;adjclose&#39;: 189.0, &#39;close&#39;: 189.0, &#39;date&#39;: 1532439000, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 193.07000732421875, &#39;low&#39;: 188.35000610351562, &#39;open&#39;: 190.19000244140625, &#39;volume&#39;: 18414800}, {&#39;adjclose&#39;: 197.97999572753906, &#39;close&#39;: 197.97999572753906, &#39;date&#39;: 1532525400, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 198.35000610351562, &#39;low&#39;: 190.13999938964844, &#39;open&#39;: 190.61000061035156, &#39;volume&#39;: 20735400}, {&#39;adjclose&#39;: 194.17999267578125, &#39;close&#39;: 194.17999267578125, &#39;date&#39;: 1532611800, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 196.1199951171875, &#39;low&#39;: 192.6199951171875, &#39;open&#39;: 193.2100067138672, &#39;volume&#39;: 13885500}, {&#39;adjclose&#39;: 189.4199981689453, &#39;close&#39;: 189.4199981689453, &#39;date&#39;: 1532698200, &#39;formatted_date&#39;: &#39;2018-07-27&#39;, &#39;high&#39;: 196.27000427246094, &#39;low&#39;: 186.92999267578125, &#39;open&#39;: 196.10000610351562, &#39;volume&#39;: 19907100}, {&#39;adjclose&#39;: 184.82000732421875, &#39;close&#39;: 184.82000732421875, &#39;date&#39;: 1532957400, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 190.58999633789062, &#39;low&#39;: 182.05999755859375, &#39;open&#39;: 190.22000122070312, &#39;volume&#39;: 19906300}, {&#39;adjclose&#39;: 187.22999572753906, &#39;close&#39;: 187.22999572753906, &#39;date&#39;: 1533043800, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 188.947998046875, &#39;low&#39;: 183.99000549316406, &#39;open&#39;: 186.39999389648438, &#39;volume&#39;: 17016600}, {&#39;adjclose&#39;: 185.27000427246094, &#39;close&#39;: 185.27000427246094, &#39;date&#39;: 1533130200, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 189.05999755859375, &#39;low&#39;: 183.9600067138672, &#39;open&#39;: 186.0, &#39;volume&#39;: 14370700}, {&#39;adjclose&#39;: 182.60000610351562, &#39;close&#39;: 182.60000610351562, &#39;date&#39;: 1533216600, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 182.89999389648438, &#39;low&#39;: 179.77999877929688, &#39;open&#39;: 181.5399932861328, &#39;volume&#39;: 20976500}, {&#39;adjclose&#39;: 180.83999633789062, &#39;close&#39;: 180.83999633789062, &#39;date&#39;: 1533303000, &#39;formatted_date&#39;: &#39;2018-08-03&#39;, &#39;high&#39;: 184.5, &#39;low&#39;: 180.0800018310547, &#39;open&#39;: 184.14999389648438, &#39;volume&#39;: 18185100}, {&#39;adjclose&#39;: 178.6199951171875, &#39;close&#39;: 178.6199951171875, &#39;date&#39;: 1533562200, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 180.86000061035156, &#39;low&#39;: 177.49000549316406, &#39;open&#39;: 180.6999969482422, &#39;volume&#39;: 35419000}, {&#39;adjclose&#39;: 179.9199981689453, &#39;close&#39;: 179.9199981689453, &#39;date&#39;: 1533648600, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 183.0, &#39;low&#39;: 179.74000549316406, &#39;open&#39;: 180.2899932861328, &#39;volume&#39;: 20620300}, {&#39;adjclose&#39;: 177.52000427246094, &#39;close&#39;: 177.52000427246094, &#39;date&#39;: 1533735000, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 180.17999267578125, &#39;low&#39;: 176.5500030517578, &#39;open&#39;: 180.0, &#39;volume&#39;: 21152400}, {&#39;adjclose&#39;: 177.19000244140625, &#39;close&#39;: 177.19000244140625, &#39;date&#39;: 1533821400, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 180.6300048828125, &#39;low&#39;: 176.75999450683594, &#39;open&#39;: 179.30999755859375, &#39;volume&#39;: 35220900}, {&#39;adjclose&#39;: 180.00999450683594, &#39;close&#39;: 180.00999450683594, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;, &#39;high&#39;: 180.4499969482422, &#39;low&#39;: 174.75, &#39;open&#39;: 175.57000732421875, &#39;volume&#39;: 22049200}, {&#39;adjclose&#39;: 177.67999267578125, &#39;close&#39;: 177.67999267578125, &#39;date&#39;: 1534167000, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 180.64999389648438, &#39;low&#39;: 177.0, &#39;open&#39;: 179.64999389648438, &#39;volume&#39;: 14674000}, {&#39;adjclose&#39;: 172.52999877929688, &#39;close&#39;: 172.52999877929688, &#39;date&#39;: 1534253400, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 176.1999969482422, &#39;low&#39;: 170.77000427246094, &#39;open&#39;: 175.13999938964844, &#39;volume&#39;: 38508600}, {&#39;adjclose&#39;: 169.8300018310547, &#39;close&#39;: 169.8300018310547, &#39;date&#39;: 1534339800, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 169.85000610351562, &#39;low&#39;: 165.38999938964844, &#39;open&#39;: 167.11000061035156, &#39;volume&#39;: 41278600}, {&#39;adjclose&#39;: 171.99000549316406, &#39;close&#39;: 171.99000549316406, &#39;date&#39;: 1534426200, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 175.6999969482422, &#39;low&#39;: 171.57000732421875, &#39;open&#39;: 172.3300018310547, &#39;volume&#39;: 34263300}, {&#39;adjclose&#39;: 172.77999877929688, &#39;close&#39;: 172.77999877929688, &#39;date&#39;: 1534512600, &#39;formatted_date&#39;: &#39;2018-08-17&#39;, &#39;high&#39;: 174.1999969482422, &#39;low&#39;: 168.3800048828125, &#39;open&#39;: 172.52000427246094, &#39;volume&#39;: 24695400}, {&#39;adjclose&#39;: 176.2899932861328, &#39;close&#39;: 176.2899932861328, &#39;date&#39;: 1534771800, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 178.86000061035156, &#39;low&#39;: 174.36000061035156, &#39;open&#39;: 175.22000122070312, &#39;volume&#39;: 25900700}, {&#39;adjclose&#39;: 177.9199981689453, &#39;close&#39;: 177.9199981689453, &#39;date&#39;: 1534858200, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 179.6699981689453, &#39;low&#39;: 176.97000122070312, &#39;open&#39;: 177.6300048828125, &#39;volume&#39;: 20337400}, {&#39;adjclose&#39;: 177.85000610351562, &#39;close&#39;: 177.85000610351562, &#39;date&#39;: 1534944600, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 179.74000549316406, &#39;low&#39;: 175.5, &#39;open&#39;: 178.14999389648438, &#39;volume&#39;: 27138500}, {&#39;adjclose&#39;: 172.22999572753906, &#39;close&#39;: 172.22999572753906, &#39;date&#39;: 1535031000, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 186.5, &#39;low&#39;: 171.91000366210938, &#39;open&#39;: 184.97000122070312, &#39;volume&#39;: 78843400}, {&#39;adjclose&#39;: 174.22999572753906, &#39;close&#39;: 174.22999572753906, &#39;date&#39;: 1535117400, &#39;formatted_date&#39;: &#39;2018-08-24&#39;, &#39;high&#39;: 176.3699951171875, &#39;low&#39;: 172.4499969482422, &#39;open&#39;: 175.0, &#39;volume&#39;: 30442800}, {&#39;adjclose&#39;: 180.64999389648438, &#39;close&#39;: 180.64999389648438, &#39;date&#39;: 1535376600, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 180.8800048828125, &#39;low&#39;: 176.22000122070312, &#39;open&#39;: 177.10000610351562, &#39;volume&#39;: 23533800}, {&#39;adjclose&#39;: 178.19000244140625, &#39;close&#39;: 178.19000244140625, &#39;date&#39;: 1535463000, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 182.3800048828125, &#39;low&#39;: 177.5, &#39;open&#39;: 182.14999389648438, &#39;volume&#39;: 15319000}, {&#39;adjclose&#39;: 178.5, &#39;close&#39;: 178.5, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 179.66000366210938, &#39;low&#39;: 176.8300018310547, &#39;open&#39;: 179.35000610351562, &#39;volume&#39;: 11892600}, {&#39;adjclose&#39;: 174.60000610351562, &#39;close&#39;: 174.60000610351562, &#39;date&#39;: 1535635800, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 178.10000610351562, &#39;low&#39;: 174.1219940185547, &#39;open&#39;: 177.3300018310547, &#39;volume&#39;: 17086200}, {&#39;adjclose&#39;: 175.00999450683594, &#39;close&#39;: 175.00999450683594, &#39;date&#39;: 1535722200, &#39;formatted_date&#39;: &#39;2018-08-31&#39;, &#39;high&#39;: 176.68099975585938, &#39;low&#39;: 172.75999450683594, &#39;open&#39;: 173.11000061035156, &#39;volume&#39;: 13730800}, {&#39;adjclose&#39;: 170.44000244140625, &#39;close&#39;: 170.44000244140625, &#39;date&#39;: 1536067800, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 173.9499969482422, &#39;low&#39;: 169.0, &#39;open&#39;: 173.5, &#39;volume&#39;: 23450500}, {&#39;adjclose&#39;: 164.22999572753906, &#39;close&#39;: 164.22999572753906, &#39;date&#39;: 1536154200, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 168.27999877929688, &#39;low&#39;: 162.02999877929688, &#39;open&#39;: 167.47999572753906, &#39;volume&#39;: 35694700}, {&#39;adjclose&#39;: 159.8699951171875, &#39;close&#39;: 159.8699951171875, &#39;date&#39;: 1536240600, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 166.47999572753906, &#39;low&#39;: 158.6699981689453, &#39;open&#39;: 164.16000366210938, &#39;volume&#39;: 33052000}, {&#39;adjclose&#39;: 162.3699951171875, &#39;close&#39;: 162.3699951171875, &#39;date&#39;: 1536327000, &#39;formatted_date&#39;: &#39;2018-09-07&#39;, &#39;high&#39;: 164.61000061035156, &#39;low&#39;: 159.50999450683594, &#39;open&#39;: 159.9499969482422, &#39;volume&#39;: 19452400}, {&#39;adjclose&#39;: 156.36000061035156, &#39;close&#39;: 156.36000061035156, &#39;date&#39;: 1536586200, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 160.72000122070312, &#39;low&#39;: 155.0, &#39;open&#39;: 158.58999633789062, &#39;volume&#39;: 39092700}, {&#39;adjclose&#39;: 157.4600067138672, &#39;close&#39;: 157.4600067138672, &#39;date&#39;: 1536672600, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 158.4499969482422, &#39;low&#39;: 152.85000610351562, &#39;open&#39;: 153.17999267578125, &#39;volume&#39;: 25884100}, {&#39;adjclose&#39;: 161.4600067138672, &#39;close&#39;: 161.4600067138672, &#39;date&#39;: 1536759000, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 162.82000732421875, &#39;low&#39;: 156.18099975585938, &#39;open&#39;: 158.1999969482422, &#39;volume&#39;: 32490500}, {&#39;adjclose&#39;: 165.52999877929688, &#39;close&#39;: 165.52999877929688, &#39;date&#39;: 1536845400, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 167.22000122070312, &#39;low&#39;: 164.00999450683594, &#39;open&#39;: 165.41000366210938, &#39;volume&#39;: 25696500}, {&#39;adjclose&#39;: 164.74000549316406, &#39;close&#39;: 164.74000549316406, &#39;date&#39;: 1536931800, &#39;formatted_date&#39;: &#39;2018-09-14&#39;, &#39;high&#39;: 168.0, &#39;low&#39;: 163.38099670410156, &#39;open&#39;: 167.8800048828125, &#39;volume&#39;: 23417700}, {&#39;adjclose&#39;: 158.88999938964844, &#39;close&#39;: 158.88999938964844, &#39;date&#39;: 1537191000, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 161.64999389648438, &#39;low&#39;: 158.28900146484375, &#39;open&#39;: 161.5, &#39;volume&#39;: 20423200}, {&#39;adjclose&#39;: 156.64999389648438, &#39;close&#39;: 156.64999389648438, &#39;date&#39;: 1537277400, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 159.39999389648438, &#39;low&#39;: 155.52000427246094, &#39;open&#39;: 156.8800048828125, &#39;volume&#39;: 27240600}, {&#39;adjclose&#39;: 162.6300048828125, &#39;close&#39;: 162.6300048828125, &#39;date&#39;: 1537363800, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 163.1300048828125, &#39;low&#39;: 158.82000732421875, &#39;open&#39;: 158.82000732421875, &#39;volume&#39;: 23028300}, {&#39;adjclose&#39;: 165.8800048828125, &#39;close&#39;: 165.8800048828125, &#39;date&#39;: 1537450200, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 167.6999969482422, &#39;low&#39;: 164.71600341796875, &#39;open&#39;: 166.88999938964844, &#39;volume&#39;: 22818100}, {&#39;adjclose&#39;: 164.6300048828125, &#39;close&#39;: 164.6300048828125, &#39;date&#39;: 1537536600, &#39;formatted_date&#39;: &#39;2018-09-21&#39;, &#39;high&#39;: 169.83999633789062, &#39;low&#39;: 164.5, &#39;open&#39;: 169.4600067138672, &#39;volume&#39;: 22081900}, {&#39;adjclose&#39;: 163.16000366210938, &#39;close&#39;: 163.16000366210938, &#39;date&#39;: 1537795800, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 163.3990020751953, &#39;low&#39;: 160.10000610351562, &#39;open&#39;: 162.80999755859375, &#39;volume&#39;: 13123400}, {&#39;adjclose&#39;: 164.25, &#39;close&#39;: 164.25, &#39;date&#39;: 1537882200, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 165.44000244140625, &#39;low&#39;: 162.8300018310547, &#39;open&#39;: 164.0500030517578, &#39;volume&#39;: 9588700}, {&#39;adjclose&#39;: 165.39999389648438, &#39;close&#39;: 165.39999389648438, &#39;date&#39;: 1537968600, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 167.38999938964844, &#39;low&#39;: 164.8699951171875, &#39;open&#39;: 165.52000427246094, &#39;volume&#39;: 13592500}, {&#39;adjclose&#39;: 166.32000732421875, &#39;close&#39;: 166.32000732421875, &#39;date&#39;: 1538055000, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 167.0500030517578, &#39;low&#39;: 164.9199981689453, &#39;open&#39;: 166.38999938964844, &#39;volume&#39;: 12689200}, {&#39;adjclose&#39;: 164.75999450683594, &#39;close&#39;: 164.75999450683594, &#39;date&#39;: 1538141400, &#39;formatted_date&#39;: &#39;2018-09-28&#39;, &#39;high&#39;: 165.66000366210938, &#39;low&#39;: 163.3000030517578, &#39;open&#39;: 164.89999389648438, &#39;volume&#39;: 10486500}, {&#39;adjclose&#39;: 162.0, &#39;close&#39;: 162.0, &#39;date&#39;: 1538400600, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 165.9499969482422, &#39;low&#39;: 161.55999755859375, &#39;open&#39;: 165.9199981689453, &#39;volume&#39;: 10615200}, {&#39;adjclose&#39;: 160.22999572753906, &#39;close&#39;: 160.22999572753906, &#39;date&#39;: 1538487000, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 161.0279998779297, &#39;low&#39;: 158.27000427246094, &#39;open&#39;: 159.7899932861328, &#39;volume&#39;: 14730500}, {&#39;adjclose&#39;: 162.3699951171875, &#39;close&#39;: 162.3699951171875, &#39;date&#39;: 1538573400, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 164.5399932861328, &#39;low&#39;: 161.92999267578125, &#39;open&#39;: 163.14999389648438, &#39;volume&#39;: 13118800}, {&#39;adjclose&#39;: 156.1300048828125, &#39;close&#39;: 156.1300048828125, &#39;date&#39;: 1538659800, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 160.0800018310547, &#39;low&#39;: 153.8699951171875, &#39;open&#39;: 160.05999755859375, &#39;volume&#39;: 32176100}, {&#39;adjclose&#39;: 154.6300048828125, &#39;close&#39;: 154.6300048828125, &#39;date&#39;: 1538746200, &#39;formatted_date&#39;: &#39;2018-10-05&#39;, &#39;high&#39;: 157.1199951171875, &#39;low&#39;: 152.25, &#39;open&#39;: 156.13999938964844, &#39;volume&#39;: 20271000}, {&#39;adjclose&#39;: 151.13999938964844, &#39;close&#39;: 151.13999938964844, &#39;date&#39;: 1539005400, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 152.63600158691406, &#39;low&#39;: 148.33999633789062, &#39;open&#39;: 150.1999969482422, &#39;volume&#39;: 25060400}, {&#39;adjclose&#39;: 146.94000244140625, &#39;close&#39;: 146.94000244140625, &#39;date&#39;: 1539091800, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 150.58999633789062, &#39;low&#39;: 146.47000122070312, &#39;open&#39;: 147.97000122070312, &#39;volume&#39;: 31070200}, {&#39;adjclose&#39;: 138.2899932861328, &#39;close&#39;: 138.2899932861328, &#39;date&#39;: 1539178200, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 144.0, &#39;low&#39;: 137.9199981689453, &#39;open&#39;: 142.5, &#39;volume&#39;: 55828800}, {&#39;adjclose&#39;: 141.89999389648438, &#39;close&#39;: 141.89999389648438, &#39;date&#39;: 1539264600, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 142.91000366210938, &#39;low&#39;: 135.13999938964844, &#39;open&#39;: 135.52999877929688, &#39;volume&#39;: 43210300}, {&#39;adjclose&#39;: 147.2899932861328, &#39;close&#39;: 147.2899932861328, &#39;date&#39;: 1539351000, &#39;formatted_date&#39;: &#39;2018-10-12&#39;, &#39;high&#39;: 149.0, &#39;low&#39;: 144.52000427246094, &#39;open&#39;: 148.6199951171875, &#39;volume&#39;: 30764400}, {&#39;adjclose&#39;: 144.16000366210938, &#39;close&#39;: 144.16000366210938, &#39;date&#39;: 1539610200, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 145.69000244140625, &#39;low&#39;: 142.3000030517578, &#39;open&#39;: 144.77000427246094, &#39;volume&#39;: 18567100}, {&#39;adjclose&#39;: 149.60000610351562, &#39;close&#39;: 149.60000610351562, &#39;date&#39;: 1539696600, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 149.75999450683594, &#39;low&#39;: 145.25999450683594, &#39;open&#39;: 145.7100067138672, &#39;volume&#39;: 18365900}, {&#39;adjclose&#39;: 148.13999938964844, &#39;close&#39;: 148.13999938964844, &#39;date&#39;: 1539783000, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 150.67999267578125, &#39;low&#39;: 146.3699951171875, &#39;open&#39;: 150.67999267578125, &#39;volume&#39;: 16872400}, {&#39;adjclose&#39;: 142.02000427246094, &#39;close&#39;: 142.02000427246094, &#39;date&#39;: 1539869400, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 146.27999877929688, &#39;low&#39;: 140.8000030517578, &#39;open&#39;: 145.85000610351562, &#39;volume&#39;: 20618900}, {&#39;adjclose&#39;: 142.92999267578125, &#39;close&#39;: 142.92999267578125, &#39;date&#39;: 1539955800, &#39;formatted_date&#39;: &#39;2018-10-19&#39;, &#39;high&#39;: 146.77000427246094, &#39;low&#39;: 142.61000061035156, &#39;open&#39;: 145.33999633789062, &#39;volume&#39;: 14855100}, {&#39;adjclose&#39;: 148.8000030517578, &#39;close&#39;: 148.8000030517578, &#39;date&#39;: 1540215000, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 150.1999969482422, &#39;low&#39;: 146.10000610351562, &#39;open&#39;: 148.99000549316406, &#39;volume&#39;: 22589300}, {&#39;adjclose&#39;: 146.64999389648438, &#39;close&#39;: 146.64999389648438, &#39;date&#39;: 1540301400, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 147.50999450683594, &#39;low&#39;: 142.6199951171875, &#39;open&#39;: 143.22000122070312, &#39;volume&#39;: 19950500}, {&#39;adjclose&#39;: 139.61000061035156, &#39;close&#39;: 139.61000061035156, &#39;date&#39;: 1540387800, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 146.69000244140625, &#39;low&#39;: 139.33999633789062, &#39;open&#39;: 145.17999267578125, &#39;volume&#39;: 18512300}, {&#39;adjclose&#39;: 144.60000610351562, &#39;close&#39;: 144.60000610351562, &#39;date&#39;: 1540474200, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 144.91000366210938, &#39;low&#39;: 141.00999450683594, &#39;open&#39;: 142.5, &#39;volume&#39;: 13655100}, {&#39;adjclose&#39;: 142.8699951171875, &#39;close&#39;: 142.8699951171875, &#39;date&#39;: 1540560600, &#39;formatted_date&#39;: &#39;2018-10-26&#39;, &#39;high&#39;: 145.82899475097656, &#39;low&#39;: 138.5500030517578, &#39;open&#39;: 139.0, &#39;volume&#39;: 19476900}, {&#39;adjclose&#39;: 133.3800048828125, &#39;close&#39;: 133.3800048828125, &#39;date&#39;: 1540819800, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 144.0, &#39;low&#39;: 131.36000061035156, &#39;open&#39;: 142.4199981689453, &#39;volume&#39;: 35121700}, {&#39;adjclose&#39;: 136.3300018310547, &#39;close&#39;: 136.3300018310547, &#39;date&#39;: 1540906200, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 136.39999389648438, &#39;low&#39;: 130.05999755859375, &#39;open&#39;: 132.27999877929688, &#39;volume&#39;: 25230000}, {&#39;adjclose&#39;: 142.27999877929688, &#39;close&#39;: 142.27999877929688, &#39;date&#39;: 1540992600, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 142.64999389648438, &#39;low&#39;: 139.13999938964844, &#39;open&#39;: 141.35000610351562, &#39;volume&#39;: 23654600}, {&#39;adjclose&#39;: 151.25, &#39;close&#39;: 151.25, &#39;date&#39;: 1541079000, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 152.3179931640625, &#39;low&#39;: 138.6199951171875, &#39;open&#39;: 144.97999572753906, &#39;volume&#39;: 47039300}, {&#39;adjclose&#39;: 147.58999633789062, &#39;close&#39;: 147.58999633789062, &#39;date&#39;: 1541165400, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 154.36000061035156, &#39;low&#39;: 146.27999877929688, &#39;open&#39;: 152.55999755859375, &#39;volume&#39;: 45985800}, {&#39;adjclose&#39;: 144.63999938964844, &#39;close&#39;: 144.63999938964844, &#39;date&#39;: 1541428200, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 149.3699951171875, &#39;low&#39;: 144.22999572753906, &#39;open&#39;: 146.22000122070312, &#39;volume&#39;: 16197300}, {&#39;adjclose&#39;: 147.44000244140625, &#39;close&#39;: 147.44000244140625, &#39;date&#39;: 1541514600, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 149.9600067138672, &#39;low&#39;: 145.3249969482422, &#39;open&#39;: 145.8699951171875, &#39;volume&#39;: 17849800}, {&#39;adjclose&#39;: 152.5, &#39;close&#39;: 152.5, &#39;date&#39;: 1541601000, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 152.8000030517578, &#39;low&#39;: 148.94000244140625, &#39;open&#39;: 150.77000427246094, &#39;volume&#39;: 17884400}, {&#39;adjclose&#39;: 148.99000549316406, &#39;close&#39;: 148.99000549316406, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 151.8800048828125, &#39;low&#39;: 146.69000244140625, &#39;open&#39;: 150.99000549316406, &#39;volume&#39;: 17067100}, {&#39;adjclose&#39;: 144.85000610351562, &#39;close&#39;: 144.85000610351562, &#39;date&#39;: 1541773800, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 145.72000122070312, &#39;low&#39;: 142.47999572753906, &#39;open&#39;: 145.57000732421875, &#39;volume&#39;: 16220000}, {&#39;adjclose&#39;: 142.82000732421875, &#39;close&#39;: 142.82000732421875, &#39;date&#39;: 1542033000, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 146.406005859375, &#39;low&#39;: 139.97000122070312, &#39;open&#39;: 145.00999450683594, &#39;volume&#39;: 16516500}, {&#39;adjclose&#39;: 146.97999572753906, &#39;close&#39;: 146.97999572753906, &#39;date&#39;: 1542119400, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 149.94000244140625, &#39;low&#39;: 143.91000366210938, &#39;open&#39;: 144.8300018310547, &#39;volume&#39;: 19575100}, {&#39;adjclose&#39;: 150.44000244140625, &#39;close&#39;: 150.44000244140625, &#39;date&#39;: 1542205800, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 152.14999389648438, &#39;low&#39;: 148.44000244140625, &#39;open&#39;: 150.2100067138672, &#39;volume&#39;: 21786000}, {&#39;adjclose&#39;: 156.22000122070312, &#39;close&#39;: 156.22000122070312, &#39;date&#39;: 1542292200, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 157.39999389648438, &#39;low&#39;: 150.88999938964844, &#39;open&#39;: 152.89999389648438, &#39;volume&#39;: 30083500}, {&#39;adjclose&#39;: 154.10000610351562, &#39;close&#39;: 154.10000610351562, &#39;date&#39;: 1542378600, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 155.8000030517578, &#39;low&#39;: 152.14199829101562, &#39;open&#39;: 155.0399932861328, &#39;volume&#39;: 20039400}, {&#39;adjclose&#39;: 149.52999877929688, &#39;close&#39;: 149.52999877929688, &#39;date&#39;: 1542637800, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 153.2100067138672, &#39;low&#39;: 148.77000427246094, &#39;open&#39;: 152.02000427246094, &#39;volume&#39;: 18087800}, {&#39;adjclose&#39;: 145.97999572753906, &#39;close&#39;: 145.97999572753906, &#39;date&#39;: 1542724200, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 148.07000732421875, &#39;low&#39;: 142.82000732421875, &#39;open&#39;: 144.47999572753906, &#39;volume&#39;: 19473200}, {&#39;adjclose&#39;: 149.41000366210938, &#39;close&#39;: 149.41000366210938, &#39;date&#39;: 1542810600, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 151.47999572753906, &#39;low&#39;: 148.64999389648438, &#39;open&#39;: 149.05999755859375, &#39;volume&#39;: 14718600}, {&#39;adjclose&#39;: 150.3300018310547, &#39;close&#39;: 150.3300018310547, &#39;date&#39;: 1542983400, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 151.1699981689453, &#39;low&#39;: 147.0, &#39;open&#39;: 147.3000030517578, &#39;volume&#39;: 7437500}, {&#39;adjclose&#39;: 156.00999450683594, &#39;close&#39;: 156.00999450683594, &#39;date&#39;: 1543242600, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 156.52999877929688, &#39;low&#39;: 152.3699951171875, &#39;open&#39;: 153.2100067138672, &#39;volume&#39;: 16152700}, {&#39;adjclose&#39;: 156.4600067138672, &#39;close&#39;: 156.4600067138672, &#39;date&#39;: 1543329000, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 157.94000244140625, &#39;low&#39;: 153.5800018310547, &#39;open&#39;: 154.63999938964844, &#39;volume&#39;: 17911800}, {&#39;adjclose&#39;: 159.33999633789062, &#39;close&#39;: 159.33999633789062, &#39;date&#39;: 1543415400, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 159.8000030517578, &#39;low&#39;: 155.25999450683594, &#39;open&#39;: 159.00999450683594, &#39;volume&#39;: 20767100}, {&#39;adjclose&#39;: 156.27999877929688, &#39;close&#39;: 156.27999877929688, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 159.0, &#39;low&#39;: 153.5399932861328, &#39;open&#39;: 158.0800018310547, &#39;volume&#39;: 20532200}, {&#39;adjclose&#39;: 160.86000061035156, &#39;close&#39;: 160.86000061035156, &#39;date&#39;: 1543588200, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 160.86000061035156, &#39;low&#39;: 156.72000122070312, &#39;open&#39;: 157.89999389648438, &#39;volume&#39;: 35071200}, {&#39;adjclose&#39;: 163.74000549316406, &#39;close&#39;: 163.74000549316406, &#39;date&#39;: 1543847400, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 168.8000030517578, &#39;low&#39;: 163.50999450683594, &#39;open&#39;: 168.63999938964844, &#39;volume&#39;: 31174000}, {&#39;adjclose&#39;: 158.33999633789062, &#39;close&#39;: 158.33999633789062, &#39;date&#39;: 1543933800, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 164.97999572753906, &#39;low&#39;: 156.4600067138672, &#39;open&#39;: 164.8800048828125, &#39;volume&#39;: 22198600}, {&#39;adjclose&#39;: 155.8300018310547, &#39;close&#39;: 155.8300018310547, &#39;date&#39;: 1544106600, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 155.8699951171875, &#39;low&#39;: 150.50999450683594, &#39;open&#39;: 153.0, &#39;volume&#39;: 25335500}, {&#39;adjclose&#39;: 153.05999755859375, &#39;close&#39;: 153.05999755859375, &#39;date&#39;: 1544193000, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 158.0500030517578, &#39;low&#39;: 151.72999572753906, &#39;open&#39;: 155.39999389648438, &#39;volume&#39;: 17447900}, {&#39;adjclose&#39;: 151.42999267578125, &#39;close&#39;: 151.42999267578125, &#39;date&#39;: 1544452200, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 152.80999755859375, &#39;low&#39;: 147.47999572753906, &#39;open&#39;: 150.38999938964844, &#39;volume&#39;: 15525500}, {&#39;adjclose&#39;: 151.8300018310547, &#39;close&#39;: 151.8300018310547, &#39;date&#39;: 1544538600, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 156.24000549316406, &#39;low&#39;: 150.89999389648438, &#39;open&#39;: 155.25999450683594, &#39;volume&#39;: 13651900}, {&#39;adjclose&#39;: 151.5, &#39;close&#39;: 151.5, &#39;date&#39;: 1544625000, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 156.1699981689453, &#39;low&#39;: 151.42999267578125, &#39;open&#39;: 155.24000549316406, &#39;volume&#39;: 16619200}, {&#39;adjclose&#39;: 151.47999572753906, &#39;close&#39;: 151.47999572753906, &#39;date&#39;: 1544711400, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 153.4600067138672, &#39;low&#39;: 150.52000427246094, &#39;open&#39;: 153.0500030517578, &#39;volume&#39;: 12255800}, {&#39;adjclose&#39;: 149.0, &#39;close&#39;: 149.0, &#39;date&#39;: 1544797800, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 150.6999969482422, &#39;low&#39;: 145.72000122070312, &#39;open&#39;: 147.7100067138672, &#39;volume&#39;: 15560700}, {&#39;adjclose&#39;: 143.97999572753906, &#39;close&#39;: 143.97999572753906, &#39;date&#39;: 1545057000, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 147.94000244140625, &#39;low&#39;: 142.24000549316406, &#39;open&#39;: 146.5, &#39;volume&#39;: 15788100}, {&#39;adjclose&#39;: 140.82000732421875, &#39;close&#39;: 140.82000732421875, &#39;date&#39;: 1545143400, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 144.75, &#39;low&#39;: 140.11000061035156, &#39;open&#39;: 144.27999877929688, &#39;volume&#39;: 17846600}, {&#39;adjclose&#39;: 137.13999938964844, &#39;close&#39;: 137.13999938964844, &#39;date&#39;: 1545229800, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 141.3249969482422, &#39;low&#39;: 135.72999572753906, &#39;open&#39;: 141.0399932861328, &#39;volume&#39;: 27657800}, {&#39;adjclose&#39;: 135.11000061035156, &#39;close&#39;: 135.11000061035156, &#39;date&#39;: 1545316200, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 137.7550048828125, &#39;low&#39;: 132.91000366210938, &#39;open&#39;: 135.8300018310547, &#39;volume&#39;: 24103800}, {&#39;adjclose&#39;: 132.0, &#39;close&#39;: 132.0, &#39;date&#39;: 1545402600, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 137.19000244140625, &#39;low&#39;: 130.22999572753906, &#39;open&#39;: 137.0800018310547, &#39;volume&#39;: 28790600}, {&#39;adjclose&#39;: 131.88999938964844, &#39;close&#39;: 131.88999938964844, &#39;date&#39;: 1545661800, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 134.57000732421875, &#39;low&#39;: 129.77000427246094, &#39;open&#39;: 130.0, &#39;volume&#39;: 11240700}, {&#39;adjclose&#39;: 138.0, &#39;close&#39;: 138.0, &#39;date&#39;: 1545834600, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 138.02000427246094, &#39;low&#39;: 130.17999267578125, &#39;open&#39;: 132.8699951171875, &#39;volume&#39;: 14862400}, {&#39;adjclose&#39;: 138.4499969482422, &#39;close&#39;: 138.4499969482422, &#39;date&#39;: 1545921000, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 138.4499969482422, &#39;low&#39;: 133.88999938964844, &#39;open&#39;: 135.0500030517578, &#39;volume&#39;: 11457400}, {&#39;adjclose&#39;: 139.08999633789062, &#39;close&#39;: 139.08999633789062, &#39;date&#39;: 1546007400, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 140.97999572753906, &#39;low&#39;: 136.7899932861328, &#39;open&#39;: 139.1999969482422, &#39;volume&#39;: 11955300}, {&#39;adjclose&#39;: 137.07000732421875, &#39;close&#39;: 137.07000732421875, &#39;date&#39;: 1546266600, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 142.02000427246094, &#39;low&#39;: 136.0399932861328, &#39;open&#39;: 141.8300018310547, &#39;volume&#39;: 11186400}, {&#39;adjclose&#39;: 136.6999969482422, &#39;close&#39;: 136.6999969482422, &#39;date&#39;: 1546439400, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 137.74899291992188, &#39;low&#39;: 133.02999877929688, &#39;open&#39;: 134.1300048828125, &#39;volume&#39;: 16708400}, {&#39;adjclose&#39;: 130.60000610351562, &#39;close&#39;: 130.60000610351562, &#39;date&#39;: 1546525800, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 134.8699951171875, &#39;low&#39;: 129.8300018310547, &#39;open&#39;: 134.27000427246094, &#39;volume&#39;: 19531300}, {&#39;adjclose&#39;: 139.75, &#39;close&#39;: 139.75, &#39;date&#39;: 1546612200, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 141.0800018310547, &#39;low&#39;: 133.66000366210938, &#39;open&#39;: 134.25999450683594, &#39;volume&#39;: 22845400}, {&#39;adjclose&#39;: 143.10000610351562, &#39;close&#39;: 143.10000610351562, &#39;date&#39;: 1546871400, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 144.0800018310547, &#39;low&#39;: 139.00999450683594, &#39;open&#39;: 140.5500030517578, &#39;volume&#39;: 17239000}, {&#39;adjclose&#39;: 146.7899932861328, &#39;close&#39;: 146.7899932861328, &#39;date&#39;: 1546957800, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 147.5500030517578, &#39;low&#39;: 142.05999755859375, &#39;open&#39;: 145.0, &#39;volume&#39;: 16487600}, {&#39;adjclose&#39;: 151.9199981689453, &#39;close&#39;: 151.9199981689453, &#39;date&#39;: 1547044200, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 153.35000610351562, &#39;low&#39;: 148.5, &#39;open&#39;: 149.88999938964844, &#39;volume&#39;: 20214100}, {&#39;adjclose&#39;: 151.69000244140625, &#39;close&#39;: 151.69000244140625, &#39;date&#39;: 1547130600, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 152.02999877929688, &#39;low&#39;: 148.8800048828125, &#39;open&#39;: 149.80999755859375, &#39;volume&#39;: 14221100}, {&#39;adjclose&#39;: 151.32000732421875, &#39;close&#39;: 151.32000732421875, &#39;date&#39;: 1547217000, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 153.3800048828125, &#39;low&#39;: 150.13999938964844, &#39;open&#39;: 151.8300018310547, &#39;volume&#39;: 9589400}, {&#39;adjclose&#39;: 149.27000427246094, &#39;close&#39;: 149.27000427246094, &#39;date&#39;: 1547476200, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 150.57000732421875, &#39;low&#39;: 146.5399932861328, &#39;open&#39;: 148.5, &#39;volume&#39;: 13356700}, {&#39;adjclose&#39;: 150.8800048828125, &#39;close&#39;: 150.8800048828125, &#39;date&#39;: 1547562600, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 154.1699981689453, &#39;low&#39;: 149.96400451660156, &#39;open&#39;: 150.67999267578125, &#39;volume&#39;: 15003100}, {&#39;adjclose&#39;: 154.83999633789062, &#39;close&#39;: 154.83999633789062, &#39;date&#39;: 1547649000, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 155.38999938964844, &#39;low&#39;: 151.5, &#39;open&#39;: 152.80999755859375, &#39;volume&#39;: 14810800}, {&#39;adjclose&#39;: 155.97000122070312, &#39;close&#39;: 155.97000122070312, &#39;date&#39;: 1547735400, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 158.5500030517578, &#39;low&#39;: 151.89999389648438, &#39;open&#39;: 152.11000061035156, &#39;volume&#39;: 16153200}, {&#39;adjclose&#39;: 157.02000427246094, &#39;close&#39;: 157.02000427246094, &#39;date&#39;: 1547821800, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 159.49000549316406, &#39;low&#39;: 154.72999572753906, &#39;open&#39;: 158.4499969482422, &#39;volume&#39;: 19611400}, {&#39;adjclose&#39;: 152.14999389648438, &#39;close&#39;: 152.14999389648438, &#39;date&#39;: 1548167400, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 155.44000244140625, &#39;low&#39;: 150.20700073242188, &#39;open&#39;: 154.39999389648438, &#39;volume&#39;: 21295000}, {&#39;adjclose&#39;: 152.02999877929688, &#39;close&#39;: 152.02999877929688, &#39;date&#39;: 1548253800, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 155.17999267578125, &#39;low&#39;: 150.9499969482422, &#39;open&#39;: 154.64999389648438, &#39;volume&#39;: 10195800}, {&#39;adjclose&#39;: 155.86000061035156, &#39;close&#39;: 155.86000061035156, &#39;date&#39;: 1548340200, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 156.0, &#39;low&#39;: 151.2100067138672, &#39;open&#39;: 151.47000122070312, &#39;volume&#39;: 10997900}, {&#39;adjclose&#39;: 159.2100067138672, &#39;close&#39;: 159.2100067138672, &#39;date&#39;: 1548426600, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 160.5, &#39;low&#39;: 157.42999267578125, &#39;open&#39;: 158.91000366210938, &#39;volume&#39;: 16451800}, {&#39;adjclose&#39;: 158.9199981689453, &#39;close&#39;: 158.9199981689453, &#39;date&#39;: 1548685800, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 159.69000244140625, &#39;low&#39;: 155.3000030517578, &#39;open&#39;: 157.8000030517578, &#39;volume&#39;: 10141100}, {&#39;adjclose&#39;: 156.8800048828125, &#39;close&#39;: 156.8800048828125, &#39;date&#39;: 1548772200, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 160.375, &#39;low&#39;: 155.9199981689453, &#39;open&#39;: 159.0399932861328, &#39;volume&#39;: 18348200}, {&#39;adjclose&#39;: 166.82000732421875, &#39;close&#39;: 166.82000732421875, &#39;date&#39;: 1548858600, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 167.83999633789062, &#39;low&#39;: 160.5, &#39;open&#39;: 161.2899932861328, &#39;volume&#39;: 36997700}, {&#39;adjclose&#39;: 168.49000549316406, &#39;close&#39;: 168.49000549316406, &#39;date&#39;: 1548945000, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 169.72999572753906, &#39;low&#39;: 165.6999969482422, &#39;open&#39;: 167.8000030517578, &#39;volume&#39;: 21219500}, {&#39;adjclose&#39;: 167.97000122070312, &#39;close&#39;: 167.97000122070312, &#39;date&#39;: 1549031400, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 169.39999389648438, &#39;low&#39;: 167.6300048828125, &#39;open&#39;: 168.0, &#39;volume&#39;: 10771500}, {&#39;adjclose&#39;: 166.6999969482422, &#39;close&#39;: 166.6999969482422, &#39;date&#39;: 1549290600, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 167.5500030517578, &#39;low&#39;: 165.61000061035156, &#39;open&#39;: 166.32000732421875, &#39;volume&#39;: 7380400}, {&#39;adjclose&#39;: 171.8300018310547, &#39;close&#39;: 171.8300018310547, &#39;date&#39;: 1549377000, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 171.9499969482422, &#39;low&#39;: 168.0, &#39;open&#39;: 168.5500030517578, &#39;volume&#39;: 12801800}, {&#39;adjclose&#39;: 171.52000427246094, &#39;close&#39;: 171.52000427246094, &#39;date&#39;: 1549463400, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 173.08999633789062, &#39;low&#39;: 169.99000549316406, &#39;open&#39;: 171.86000061035156, &#39;volume&#39;: 11267800}, {&#39;adjclose&#39;: 166.9600067138672, &#39;close&#39;: 166.9600067138672, &#39;date&#39;: 1549549800, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 169.61000061035156, &#39;low&#39;: 164.33599853515625, &#39;open&#39;: 169.16000366210938, &#39;volume&#39;: 11911100}, {&#39;adjclose&#39;: 167.36000061035156, &#39;close&#39;: 167.36000061035156, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 167.64999389648438, &#39;low&#39;: 163.75, &#39;open&#39;: 163.8300018310547, &#39;volume&#39;: 8331500}, {&#39;adjclose&#39;: 167.4499969482422, &#39;close&#39;: 167.4499969482422, &#39;date&#39;: 1549895400, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 170.3300018310547, &#39;low&#39;: 167.4499969482422, &#39;open&#39;: 168.85000610351562, &#39;volume&#39;: 7260300}, {&#39;adjclose&#39;: 168.7100067138672, &#39;close&#39;: 168.7100067138672, &#39;date&#39;: 1549981800, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 170.49000549316406, &#39;low&#39;: 168.61000061035156, &#39;open&#39;: 169.60000610351562, &#39;volume&#39;: 8594400}, {&#39;adjclose&#39;: 169.39999389648438, &#39;close&#39;: 169.39999389648438, &#39;date&#39;: 1550068200, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 171.0500030517578, &#39;low&#39;: 168.99000549316406, &#39;open&#39;: 169.91000366210938, &#39;volume&#39;: 8661800}, {&#39;adjclose&#39;: 168.3800048828125, &#39;close&#39;: 168.3800048828125, &#39;date&#39;: 1550154600, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 168.5, &#39;low&#39;: 166.61000061035156, &#39;open&#39;: 167.63999938964844, &#39;volume&#39;: 8722100}, {&#39;adjclose&#39;: 166.14999389648438, &#39;close&#39;: 166.14999389648438, &#39;date&#39;: 1550241000, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 168.77000427246094, &#39;low&#39;: 165.41000366210938, &#39;open&#39;: 168.61000061035156, &#39;volume&#39;: 12099500}, {&#39;adjclose&#39;: 170.17999267578125, &#39;close&#39;: 170.17999267578125, &#39;date&#39;: 1550586600, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 171.14999389648438, &#39;low&#39;: 166.5, &#39;open&#39;: 166.97999572753906, &#39;volume&#39;: 12982300}, {&#39;adjclose&#39;: 170.7100067138672, &#39;close&#39;: 170.7100067138672, &#39;date&#39;: 1550673000, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 172.67999267578125, &#39;low&#39;: 170.61000061035156, &#39;open&#39;: 171.0, &#39;volume&#39;: 12454900}, {&#39;adjclose&#39;: 171.66000366210938, &#39;close&#39;: 171.66000366210938, &#39;date&#39;: 1550759400, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 171.77999877929688, &#39;low&#39;: 169.8000030517578, &#39;open&#39;: 171.0, &#39;volume&#39;: 8434800}, {&#39;adjclose&#39;: 176.9199981689453, &#39;close&#39;: 176.9199981689453, &#39;date&#39;: 1550845800, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 177.02000427246094, &#39;low&#39;: 172.52000427246094, &#39;open&#39;: 172.8000030517578, &#39;volume&#39;: 16175600}, {&#39;adjclose&#39;: 183.25, &#39;close&#39;: 183.25, &#39;date&#39;: 1551105000, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 183.72000122070312, &#39;low&#39;: 180.72999572753906, &#39;open&#39;: 181.25999450683594, &#39;volume&#39;: 22831800}, {&#39;adjclose&#39;: 183.5399932861328, &#39;close&#39;: 183.5399932861328, &#39;date&#39;: 1551191400, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 184.35000610351562, &#39;low&#39;: 179.3699951171875, &#39;open&#39;: 179.7899932861328, &#39;volume&#39;: 13871000}, {&#39;adjclose&#39;: 184.5800018310547, &#39;close&#39;: 184.5800018310547, &#39;date&#39;: 1551277800, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 184.92999267578125, &#39;low&#39;: 180.8800048828125, &#39;open&#39;: 181.72000122070312, &#39;volume&#39;: 16741600}, {&#39;adjclose&#39;: 183.02999877929688, &#39;close&#39;: 183.02999877929688, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 184.3000030517578, &#39;low&#39;: 181.47000122070312, &#39;open&#39;: 183.00999450683594, &#39;volume&#39;: 12370400}, {&#39;adjclose&#39;: 183.8800048828125, &#39;close&#39;: 183.8800048828125, &#39;date&#39;: 1551450600, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 186.89999389648438, &#39;low&#39;: 183.3800048828125, &#39;open&#39;: 185.08999633789062, &#39;volume&#39;: 14348500}, {&#39;adjclose&#39;: 187.25, &#39;close&#39;: 187.25, &#39;date&#39;: 1551709800, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 187.33999633789062, &#39;low&#39;: 184.4600067138672, &#39;open&#39;: 186.0, &#39;volume&#39;: 14761700}, {&#39;adjclose&#39;: 185.0, &#39;close&#39;: 185.0, &#39;date&#39;: 1551796200, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 188.0800018310547, &#39;low&#39;: 185.0, &#39;open&#39;: 186.94000244140625, &#39;volume&#39;: 11513200}, {&#39;adjclose&#39;: 184.1699981689453, &#39;close&#39;: 184.1699981689453, &#39;date&#39;: 1551882600, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 185.58999633789062, &#39;low&#39;: 183.02000427246094, &#39;open&#39;: 184.3800048828125, &#39;volume&#39;: 10009100}, {&#39;adjclose&#39;: 177.32000732421875, &#39;close&#39;: 177.32000732421875, &#39;date&#39;: 1551969000, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 181.8000030517578, &#39;low&#39;: 176.72999572753906, &#39;open&#39;: 180.91000366210938, &#39;volume&#39;: 16488900}, {&#39;adjclose&#39;: 175.02999877929688, &#39;close&#39;: 175.02999877929688, &#39;date&#39;: 1552055400, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 175.35000610351562, &#39;low&#39;: 171.56500244140625, &#39;open&#39;: 171.56500244140625, &#39;volume&#39;: 14674200}, {&#39;adjclose&#39;: 180.41000366210938, &#39;close&#39;: 180.41000366210938, &#39;date&#39;: 1552311000, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 181.72000122070312, &#39;low&#39;: 177.5800018310547, &#39;open&#39;: 177.8300018310547, &#39;volume&#39;: 13764000}, {&#39;adjclose&#39;: 180.6300048828125, &#39;close&#39;: 180.6300048828125, &#39;date&#39;: 1552397400, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 182.17999267578125, &#39;low&#39;: 179.50999450683594, &#39;open&#39;: 182.0399932861328, &#39;volume&#39;: 8660000}, {&#39;adjclose&#39;: 180.6999969482422, &#39;close&#39;: 180.6999969482422, &#39;date&#39;: 1552483800, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 182.53500366210938, &#39;low&#39;: 179.25999450683594, &#39;open&#39;: 180.72999572753906, &#39;volume&#39;: 8868200}, {&#39;adjclose&#39;: 180.36000061035156, &#39;close&#39;: 180.36000061035156, &#39;date&#39;: 1552570200, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 180.82000732421875, &#39;low&#39;: 178.00999450683594, &#39;open&#39;: 179.05999755859375, &#39;volume&#39;: 9272000}, {&#39;adjclose&#39;: 180.97000122070312, &#39;close&#39;: 180.97000122070312, &#39;date&#39;: 1552656600, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 181.4499969482422, &#39;low&#39;: 179.66000366210938, &#39;open&#39;: 180.66000366210938, &#39;volume&#39;: 10844100}, {&#39;adjclose&#39;: 181.8300018310547, &#39;close&#39;: 181.8300018310547, &#39;date&#39;: 1552915800, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 182.88999938964844, &#39;low&#39;: 180.75999450683594, &#39;open&#39;: 181.92999267578125, &#39;volume&#39;: 7847800}, {&#39;adjclose&#39;: 182.13999938964844, &#39;close&#39;: 182.13999938964844, &#39;date&#39;: 1553002200, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 183.36000061035156, &#39;low&#39;: 180.85000610351562, &#39;open&#39;: 181.6300048828125, &#39;volume&#39;: 10238600}, {&#39;adjclose&#39;: 181.27999877929688, &#39;close&#39;: 181.27999877929688, &#39;date&#39;: 1553088600, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 181.9499969482422, &#39;low&#39;: 178.42999267578125, &#39;open&#39;: 180.94000244140625, &#39;volume&#39;: 15901500}, {&#39;adjclose&#39;: 181.5, &#39;close&#39;: 181.5, &#39;date&#39;: 1553175000, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 181.72999572753906, &#39;low&#39;: 178.52000427246094, &#39;open&#39;: 178.9499969482422, &#39;volume&#39;: 9754500}, {&#39;adjclose&#39;: 176.25999450683594, &#39;close&#39;: 176.25999450683594, &#39;date&#39;: 1553261400, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 180.47999572753906, &#39;low&#39;: 175.33599853515625, &#39;open&#39;: 179.77000427246094, &#39;volume&#39;: 11688400}, {&#39;adjclose&#39;: 178.77000427246094, &#39;close&#39;: 178.77000427246094, &#39;date&#39;: 1553520600, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 178.89999389648438, &#39;low&#39;: 174.10000610351562, &#39;open&#39;: 174.3300018310547, &#39;volume&#39;: 7511400}, {&#39;adjclose&#39;: 178.0800018310547, &#39;close&#39;: 178.0800018310547, &#39;date&#39;: 1553607000, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 180.64999389648438, &#39;low&#39;: 177.09500122070312, &#39;open&#39;: 179.6999969482422, &#39;volume&#39;: 7897900}, {&#39;adjclose&#39;: 177.02999877929688, &#39;close&#39;: 177.02999877929688, &#39;date&#39;: 1553693400, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 179.8300018310547, &#39;low&#39;: 176.91299438476562, &#39;open&#39;: 177.6999969482422, &#39;volume&#39;: 8371000}, {&#39;adjclose&#39;: 177.72999572753906, &#39;close&#39;: 177.72999572753906, &#39;date&#39;: 1553779800, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 178.52999877929688, &#39;low&#39;: 175.97000122070312, &#39;open&#39;: 177.47000122070312, &#39;volume&#39;: 7233000}, {&#39;adjclose&#39;: 182.4499969482422, &#39;close&#39;: 182.4499969482422, &#39;date&#39;: 1553866200, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 182.60000610351562, &#39;low&#39;: 179.0, &#39;open&#39;: 180.72999572753906, &#39;volume&#39;: 13850900}, {&#39;adjclose&#39;: 180.88999938964844, &#39;close&#39;: 180.88999938964844, &#39;date&#39;: 1554125400, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 185.55999755859375, &#39;low&#39;: 180.88999938964844, &#39;open&#39;: 185.08999633789062, &#39;volume&#39;: 12714800}, {&#39;adjclose&#39;: 181.74000549316406, &#39;close&#39;: 181.74000549316406, &#39;date&#39;: 1554211800, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 183.56300354003906, &#39;low&#39;: 180.9499969482422, &#39;open&#39;: 181.4600067138672, &#39;volume&#39;: 8021500}, {&#39;adjclose&#39;: 178.32000732421875, &#39;close&#39;: 178.32000732421875, &#39;date&#39;: 1554298200, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 180.6999969482422, &#39;low&#39;: 176.75999450683594, &#39;open&#39;: 179.50999450683594, &#39;volume&#39;: 26819000}, {&#39;adjclose&#39;: 181.07000732421875, &#39;close&#39;: 181.07000732421875, &#39;date&#39;: 1554384600, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 181.9600067138672, &#39;low&#39;: 176.88999938964844, &#39;open&#39;: 177.0399932861328, &#39;volume&#39;: 16993200}, {&#39;adjclose&#39;: 185.35000610351562, &#39;close&#39;: 185.35000610351562, &#39;date&#39;: 1554471000, &#39;formatted_date&#39;: &#39;2019-04-05&#39;, &#39;high&#39;: 185.5, &#39;low&#39;: 182.0, &#39;open&#39;: 182.50999450683594, &#39;volume&#39;: 18705000}, {&#39;adjclose&#39;: 186.5, &#39;close&#39;: 186.5, &#39;date&#39;: 1554730200, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 187.82000732421875, &#39;low&#39;: 184.00999450683594, &#39;open&#39;: 184.19000244140625, &#39;volume&#39;: 14725600}, {&#39;adjclose&#39;: 187.19000244140625, &#39;close&#39;: 187.19000244140625, &#39;date&#39;: 1554816600, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 187.88999938964844, &#39;low&#39;: 186.16000366210938, &#39;open&#39;: 186.49000549316406, &#39;volume&#39;: 11578200}, {&#39;adjclose&#39;: 186.19000244140625, &#39;close&#39;: 186.19000244140625, &#39;date&#39;: 1554903000, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 187.39999389648438, &#39;low&#39;: 184.0, &#39;open&#39;: 186.69000244140625, &#39;volume&#39;: 10655000}, {&#39;adjclose&#39;: 184.97999572753906, &#39;close&#39;: 184.97999572753906, &#39;date&#39;: 1554989400, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 186.05999755859375, &#39;low&#39;: 183.75, &#39;open&#39;: 185.14999389648438, &#39;volume&#39;: 8900300}, {&#39;adjclose&#39;: 188.91000366210938, &#39;close&#39;: 188.91000366210938, &#39;date&#39;: 1555075800, &#39;formatted_date&#39;: &#39;2019-04-12&#39;, &#39;high&#39;: 189.7899932861328, &#39;low&#39;: 187.13999938964844, &#39;open&#39;: 187.7100067138672, &#39;volume&#39;: 12600000}, {&#39;adjclose&#39;: 183.07000732421875, &#39;close&#39;: 183.07000732421875, &#39;date&#39;: 1555335000, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 188.1699981689453, &#39;low&#39;: 182.55999755859375, &#39;open&#39;: 188.05999755859375, &#39;volume&#39;: 14616600}, {&#39;adjclose&#39;: 185.77999877929688, &#39;close&#39;: 185.77999877929688, &#39;date&#39;: 1555421400, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 185.7899932861328, &#39;low&#39;: 183.39999389648438, &#39;open&#39;: 185.5500030517578, &#39;volume&#39;: 12195900}, {&#39;adjclose&#39;: 187.5500030517578, &#39;close&#39;: 187.5500030517578, &#39;date&#39;: 1555507800, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 188.1999969482422, &#39;low&#39;: 185.77999877929688, &#39;open&#39;: 187.33999633789062, &#39;volume&#39;: 11614200}, {&#39;adjclose&#39;: 186.94000244140625, &#39;close&#39;: 186.94000244140625, &#39;date&#39;: 1555594200, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 187.27999877929688, &#39;low&#39;: 185.38999938964844, &#39;open&#39;: 186.41000366210938, &#39;volume&#39;: 7882500}, {&#39;adjclose&#39;: 185.3800048828125, &#39;close&#39;: 185.3800048828125, &#39;date&#39;: 1555939800, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 186.47000122070312, &#39;low&#39;: 183.61000061035156, &#39;open&#39;: 184.5, &#39;volume&#39;: 8677800}, {&#39;adjclose&#39;: 187.2899932861328, &#39;close&#39;: 187.2899932861328, &#39;date&#39;: 1556026200, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 188.14999389648438, &#39;low&#39;: 185.44000244140625, &#39;open&#39;: 186.0, &#39;volume&#39;: 11410600}, {&#39;adjclose&#39;: 185.6699981689453, &#39;close&#39;: 185.6699981689453, &#39;date&#39;: 1556112600, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 186.89999389648438, &#39;low&#39;: 184.5800018310547, &#39;open&#39;: 186.75999450683594, &#39;volume&#39;: 9085300}, {&#39;adjclose&#39;: 187.8800048828125, &#39;close&#39;: 187.8800048828125, &#39;date&#39;: 1556199000, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 188.1300048828125, &#39;low&#39;: 183.9550018310547, &#39;open&#39;: 185.24000549316406, &#39;volume&#39;: 10328900}, {&#39;adjclose&#39;: 187.08999633789062, &#39;close&#39;: 187.08999633789062, &#39;date&#39;: 1556285400, &#39;formatted_date&#39;: &#39;2019-04-26&#39;, &#39;high&#39;: 188.74000549316406, &#39;low&#39;: 185.50999450683594, &#39;open&#39;: 187.8800048828125, &#39;volume&#39;: 9421100}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: -14400}}, &#39;FB&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 1337347800, &#39;formatted_date&#39;: &#39;2012-05-18&#39;}, &#39;instrumentType&#39;: &#39;EQUITY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 172.0, &#39;close&#39;: 172.0, &#39;date&#39;: 1525095000, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 175.72000122070312, &#39;low&#39;: 171.7100067138672, &#39;open&#39;: 173.7899932861328, &#39;volume&#39;: 20750500}, {&#39;adjclose&#39;: 173.86000061035156, &#39;close&#39;: 173.86000061035156, &#39;date&#39;: 1525181400, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 174.02000427246094, &#39;low&#39;: 170.22999572753906, &#39;open&#39;: 172.0, &#39;volume&#39;: 26025900}, {&#39;adjclose&#39;: 176.07000732421875, &#39;close&#39;: 176.07000732421875, &#39;date&#39;: 1525267800, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 178.0800018310547, &#39;low&#39;: 174.1999969482422, &#39;open&#39;: 174.25, &#39;volume&#39;: 30424500}, {&#39;adjclose&#39;: 174.02000427246094, &#39;close&#39;: 174.02000427246094, &#39;date&#39;: 1525354200, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 176.1199951171875, &#39;low&#39;: 172.1199951171875, &#39;open&#39;: 175.1300048828125, &#39;volume&#39;: 24026100}, {&#39;adjclose&#39;: 176.61000061035156, &#39;close&#39;: 176.61000061035156, &#39;date&#39;: 1525440600, &#39;formatted_date&#39;: &#39;2018-05-04&#39;, &#39;high&#39;: 176.97999572753906, &#39;low&#39;: 173.05999755859375, &#39;open&#39;: 173.0800018310547, &#39;volume&#39;: 17677800}, {&#39;adjclose&#39;: 177.97000122070312, &#39;close&#39;: 177.97000122070312, &#39;date&#39;: 1525699800, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 179.5, &#39;low&#39;: 177.1699981689453, &#39;open&#39;: 177.35000610351562, &#39;volume&#39;: 18697200}, {&#39;adjclose&#39;: 178.9199981689453, &#39;close&#39;: 178.9199981689453, &#39;date&#39;: 1525786200, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 179.0399932861328, &#39;low&#39;: 177.11000061035156, &#39;open&#39;: 178.25, &#39;volume&#39;: 15577200}, {&#39;adjclose&#39;: 182.66000366210938, &#39;close&#39;: 182.66000366210938, &#39;date&#39;: 1525872600, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 183.00999450683594, &#39;low&#39;: 178.77999877929688, &#39;open&#39;: 179.6699981689453, &#39;volume&#39;: 23282800}, {&#39;adjclose&#39;: 185.52999877929688, &#39;close&#39;: 185.52999877929688, &#39;date&#39;: 1525959000, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 186.1300048828125, &#39;low&#39;: 182.5, &#39;open&#39;: 183.14999389648438, &#39;volume&#39;: 21071400}, {&#39;adjclose&#39;: 186.99000549316406, &#39;close&#39;: 186.99000549316406, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;, &#39;high&#39;: 188.32000732421875, &#39;low&#39;: 184.17999267578125, &#39;open&#39;: 184.85000610351562, &#39;volume&#39;: 21207800}, {&#39;adjclose&#39;: 186.63999938964844, &#39;close&#39;: 186.63999938964844, &#39;date&#39;: 1526304600, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 187.86000061035156, &#39;low&#39;: 186.1999969482422, &#39;open&#39;: 187.7100067138672, &#39;volume&#39;: 15646700}, {&#39;adjclose&#39;: 184.32000732421875, &#39;close&#39;: 184.32000732421875, &#39;date&#39;: 1526391000, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 185.2899932861328, &#39;low&#39;: 183.1999969482422, &#39;open&#39;: 184.8800048828125, &#39;volume&#39;: 15429400}, {&#39;adjclose&#39;: 183.1999969482422, &#39;close&#39;: 183.1999969482422, &#39;date&#39;: 1526477400, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 184.32000732421875, &#39;low&#39;: 182.66000366210938, &#39;open&#39;: 183.6999969482422, &#39;volume&#39;: 16975500}, {&#39;adjclose&#39;: 183.75999450683594, &#39;close&#39;: 183.75999450683594, &#39;date&#39;: 1526563800, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 184.05999755859375, &#39;low&#39;: 182.22000122070312, &#39;open&#39;: 182.67999267578125, &#39;volume&#39;: 14840700}, {&#39;adjclose&#39;: 182.67999267578125, &#39;close&#39;: 182.67999267578125, &#39;date&#39;: 1526650200, &#39;formatted_date&#39;: &#39;2018-05-18&#39;, &#39;high&#39;: 184.19000244140625, &#39;low&#39;: 182.61000061035156, &#39;open&#39;: 183.49000549316406, &#39;volume&#39;: 13130500}, {&#39;adjclose&#39;: 184.49000549316406, &#39;close&#39;: 184.49000549316406, &#39;date&#39;: 1526909400, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 185.3000030517578, &#39;low&#39;: 183.1300048828125, &#39;open&#39;: 183.77000427246094, &#39;volume&#39;: 13532900}, {&#39;adjclose&#39;: 183.8000030517578, &#39;close&#39;: 183.8000030517578, &#39;date&#39;: 1526995800, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 185.4199981689453, &#39;low&#39;: 183.42999267578125, &#39;open&#39;: 184.92999267578125, &#39;volume&#39;: 12731400}, {&#39;adjclose&#39;: 186.89999389648438, &#39;close&#39;: 186.89999389648438, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 186.91000366210938, &#39;low&#39;: 182.17999267578125, &#39;open&#39;: 182.5, &#39;volume&#39;: 16628100}, {&#39;adjclose&#39;: 185.92999267578125, &#39;close&#39;: 185.92999267578125, &#39;date&#39;: 1527168600, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 186.8000030517578, &#39;low&#39;: 185.02999877929688, &#39;open&#39;: 185.8800048828125, &#39;volume&#39;: 12354700}, {&#39;adjclose&#39;: 184.9199981689453, &#39;close&#39;: 184.9199981689453, &#39;date&#39;: 1527255000, &#39;formatted_date&#39;: &#39;2018-05-25&#39;, &#39;high&#39;: 186.3300018310547, &#39;low&#39;: 184.4499969482422, &#39;open&#39;: 186.02000427246094, &#39;volume&#39;: 10965100}, {&#39;adjclose&#39;: 185.74000549316406, &#39;close&#39;: 185.74000549316406, &#39;date&#39;: 1527600600, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 186.80999755859375, &#39;low&#39;: 183.7100067138672, &#39;open&#39;: 184.33999633789062, &#39;volume&#39;: 16398900}, {&#39;adjclose&#39;: 187.6699981689453, &#39;close&#39;: 187.6699981689453, &#39;date&#39;: 1527687000, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 188.0, &#39;low&#39;: 185.25, &#39;open&#39;: 186.5399932861328, &#39;volume&#39;: 13736900}, {&#39;adjclose&#39;: 191.77999877929688, &#39;close&#39;: 191.77999877929688, &#39;date&#39;: 1527773400, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 192.72000122070312, &#39;low&#39;: 187.47999572753906, &#39;open&#39;: 187.8699951171875, &#39;volume&#39;: 30782600}, {&#39;adjclose&#39;: 193.99000549316406, &#39;close&#39;: 193.99000549316406, &#39;date&#39;: 1527859800, &#39;formatted_date&#39;: &#39;2018-06-01&#39;, &#39;high&#39;: 194.5500030517578, &#39;low&#39;: 192.07000732421875, &#39;open&#39;: 193.07000732421875, &#39;volume&#39;: 17307200}, {&#39;adjclose&#39;: 193.27999877929688, &#39;close&#39;: 193.27999877929688, &#39;date&#39;: 1528119000, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 193.97999572753906, &#39;low&#39;: 191.47000122070312, &#39;open&#39;: 191.83999633789062, &#39;volume&#39;: 18939800}, {&#39;adjclose&#39;: 192.94000244140625, &#39;close&#39;: 192.94000244140625, &#39;date&#39;: 1528205400, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 195.0, &#39;low&#39;: 192.6199951171875, &#39;open&#39;: 194.3000030517578, &#39;volume&#39;: 15544300}, {&#39;adjclose&#39;: 191.33999633789062, &#39;close&#39;: 191.33999633789062, &#39;date&#39;: 1528291800, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 192.52999877929688, &#39;low&#39;: 189.11000061035156, &#39;open&#39;: 191.02999877929688, &#39;volume&#39;: 22558900}, {&#39;adjclose&#39;: 188.17999267578125, &#39;close&#39;: 188.17999267578125, &#39;date&#39;: 1528378200, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 190.97000122070312, &#39;low&#39;: 186.77000427246094, &#39;open&#39;: 190.75, &#39;volume&#39;: 21503200}, {&#39;adjclose&#39;: 189.10000610351562, &#39;close&#39;: 189.10000610351562, &#39;date&#39;: 1528464600, &#39;formatted_date&#39;: &#39;2018-06-08&#39;, &#39;high&#39;: 189.47999572753906, &#39;low&#39;: 186.42999267578125, &#39;open&#39;: 187.52999877929688, &#39;volume&#39;: 12677100}, {&#39;adjclose&#39;: 191.5399932861328, &#39;close&#39;: 191.5399932861328, &#39;date&#39;: 1528723800, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 192.60000610351562, &#39;low&#39;: 188.8000030517578, &#39;open&#39;: 188.80999755859375, &#39;volume&#39;: 12928900}, {&#39;adjclose&#39;: 192.39999389648438, &#39;close&#39;: 192.39999389648438, &#39;date&#39;: 1528810200, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 193.27999877929688, &#39;low&#39;: 191.55999755859375, &#39;open&#39;: 192.1699981689453, &#39;volume&#39;: 11562700}, {&#39;adjclose&#39;: 192.41000366210938, &#39;close&#39;: 192.41000366210938, &#39;date&#39;: 1528896600, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 194.5, &#39;low&#39;: 191.91000366210938, &#39;open&#39;: 192.74000549316406, &#39;volume&#39;: 15853800}, {&#39;adjclose&#39;: 196.80999755859375, &#39;close&#39;: 196.80999755859375, &#39;date&#39;: 1528983000, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 197.27999877929688, &#39;low&#39;: 192.91000366210938, &#39;open&#39;: 193.10000610351562, &#39;volume&#39;: 19120900}, {&#39;adjclose&#39;: 195.85000610351562, &#39;close&#39;: 195.85000610351562, &#39;date&#39;: 1529069400, &#39;formatted_date&#39;: &#39;2018-06-15&#39;, &#39;high&#39;: 197.07000732421875, &#39;low&#39;: 194.63999938964844, &#39;open&#39;: 195.7899932861328, &#39;volume&#39;: 21860900}, {&#39;adjclose&#39;: 198.30999755859375, &#39;close&#39;: 198.30999755859375, &#39;date&#39;: 1529328600, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 199.5800018310547, &#39;low&#39;: 194.1300048828125, &#39;open&#39;: 194.8000030517578, &#39;volume&#39;: 16826000}, {&#39;adjclose&#39;: 197.49000549316406, &#39;close&#39;: 197.49000549316406, &#39;date&#39;: 1529415000, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 197.9600067138672, &#39;low&#39;: 193.7899932861328, &#39;open&#39;: 196.24000549316406, &#39;volume&#39;: 19994000}, {&#39;adjclose&#39;: 202.0, &#39;close&#39;: 202.0, &#39;date&#39;: 1529501400, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 203.5500030517578, &#39;low&#39;: 198.80999755859375, &#39;open&#39;: 199.10000610351562, &#39;volume&#39;: 28230900}, {&#39;adjclose&#39;: 201.5, &#39;close&#39;: 201.5, &#39;date&#39;: 1529587800, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 203.38999938964844, &#39;low&#39;: 200.08999633789062, &#39;open&#39;: 202.75999450683594, &#39;volume&#39;: 19045700}, {&#39;adjclose&#39;: 201.74000549316406, &#39;close&#39;: 201.74000549316406, &#39;date&#39;: 1529674200, &#39;formatted_date&#39;: &#39;2018-06-22&#39;, &#39;high&#39;: 202.24000549316406, &#39;low&#39;: 199.30999755859375, &#39;open&#39;: 201.16000366210938, &#39;volume&#39;: 17420200}, {&#39;adjclose&#39;: 196.35000610351562, &#39;close&#39;: 196.35000610351562, &#39;date&#39;: 1529933400, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 200.0, &#39;low&#39;: 193.11000061035156, &#39;open&#39;: 200.0, &#39;volume&#39;: 25275100}, {&#39;adjclose&#39;: 199.0, &#39;close&#39;: 199.0, &#39;date&#39;: 1530019800, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 199.10000610351562, &#39;low&#39;: 196.22999572753906, &#39;open&#39;: 197.60000610351562, &#39;volume&#39;: 17897600}, {&#39;adjclose&#39;: 195.83999633789062, &#39;close&#39;: 195.83999633789062, &#39;date&#39;: 1530106200, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 200.75, &#39;low&#39;: 195.8000030517578, &#39;open&#39;: 199.17999267578125, &#39;volume&#39;: 18734400}, {&#39;adjclose&#39;: 196.22999572753906, &#39;close&#39;: 196.22999572753906, &#39;date&#39;: 1530192600, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 197.33999633789062, &#39;low&#39;: 193.25999450683594, &#39;open&#39;: 195.17999267578125, &#39;volume&#39;: 18172400}, {&#39;adjclose&#39;: 194.32000732421875, &#39;close&#39;: 194.32000732421875, &#39;date&#39;: 1530279000, &#39;formatted_date&#39;: &#39;2018-06-29&#39;, &#39;high&#39;: 197.60000610351562, &#39;low&#39;: 193.9600067138672, &#39;open&#39;: 197.32000732421875, &#39;volume&#39;: 15811600}, {&#39;adjclose&#39;: 197.36000061035156, &#39;close&#39;: 197.36000061035156, &#39;date&#39;: 1530538200, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 197.4499969482422, &#39;low&#39;: 192.22000122070312, &#39;open&#39;: 193.3699951171875, &#39;volume&#39;: 13961600}, {&#39;adjclose&#39;: 192.72999572753906, &#39;close&#39;: 192.72999572753906, &#39;date&#39;: 1530624600, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 195.39999389648438, &#39;low&#39;: 192.52000427246094, &#39;open&#39;: 194.5500030517578, &#39;volume&#39;: 13489500}, {&#39;adjclose&#39;: 198.4499969482422, &#39;close&#39;: 198.4499969482422, &#39;date&#39;: 1530797400, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 198.64999389648438, &#39;low&#39;: 194.02999877929688, &#39;open&#39;: 194.74000549316406, &#39;volume&#39;: 19684200}, {&#39;adjclose&#39;: 203.22999572753906, &#39;close&#39;: 203.22999572753906, &#39;date&#39;: 1530883800, &#39;formatted_date&#39;: &#39;2018-07-06&#39;, &#39;high&#39;: 203.63999938964844, &#39;low&#39;: 197.6999969482422, &#39;open&#39;: 198.4499969482422, &#39;volume&#39;: 19740100}, {&#39;adjclose&#39;: 204.74000549316406, &#39;close&#39;: 204.74000549316406, &#39;date&#39;: 1531143000, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 205.8000030517578, &#39;low&#39;: 202.1199951171875, &#39;open&#39;: 204.92999267578125, &#39;volume&#39;: 18149400}, {&#39;adjclose&#39;: 203.5399932861328, &#39;close&#39;: 203.5399932861328, &#39;date&#39;: 1531229400, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 204.91000366210938, &#39;low&#39;: 202.25999450683594, &#39;open&#39;: 204.5, &#39;volume&#39;: 13190100}, {&#39;adjclose&#39;: 202.5399932861328, &#39;close&#39;: 202.5399932861328, &#39;date&#39;: 1531315800, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 204.5, &#39;low&#39;: 201.75, &#39;open&#39;: 202.22000122070312, &#39;volume&#39;: 12927400}, {&#39;adjclose&#39;: 206.9199981689453, &#39;close&#39;: 206.9199981689453, &#39;date&#39;: 1531402200, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 207.0800018310547, &#39;low&#39;: 203.19000244140625, &#39;open&#39;: 203.42999267578125, &#39;volume&#39;: 15454700}, {&#39;adjclose&#39;: 207.32000732421875, &#39;close&#39;: 207.32000732421875, &#39;date&#39;: 1531488600, &#39;formatted_date&#39;: &#39;2018-07-13&#39;, &#39;high&#39;: 208.42999267578125, &#39;low&#39;: 206.4499969482422, &#39;open&#39;: 207.80999755859375, &#39;volume&#39;: 11486800}, {&#39;adjclose&#39;: 207.22999572753906, &#39;close&#39;: 207.22999572753906, &#39;date&#39;: 1531747800, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 208.72000122070312, &#39;low&#39;: 206.83999633789062, &#39;open&#39;: 207.5, &#39;volume&#39;: 11078200}, {&#39;adjclose&#39;: 209.99000549316406, &#39;close&#39;: 209.99000549316406, &#39;date&#39;: 1531834200, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 210.4600067138672, &#39;low&#39;: 204.83999633789062, &#39;open&#39;: 204.89999389648438, &#39;volume&#39;: 15349900}, {&#39;adjclose&#39;: 209.36000061035156, &#39;close&#39;: 209.36000061035156, &#39;date&#39;: 1531920600, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 210.99000549316406, &#39;low&#39;: 208.44000244140625, &#39;open&#39;: 209.82000732421875, &#39;volume&#39;: 15334900}, {&#39;adjclose&#39;: 208.08999633789062, &#39;close&#39;: 208.08999633789062, &#39;date&#39;: 1532007000, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 209.99000549316406, &#39;low&#39;: 207.75999450683594, &#39;open&#39;: 208.77000427246094, &#39;volume&#39;: 11350400}, {&#39;adjclose&#39;: 209.94000244140625, &#39;close&#39;: 209.94000244140625, &#39;date&#39;: 1532093400, &#39;formatted_date&#39;: &#39;2018-07-20&#39;, &#39;high&#39;: 211.5, &#39;low&#39;: 208.5, &#39;open&#39;: 208.85000610351562, &#39;volume&#39;: 16163900}, {&#39;adjclose&#39;: 210.91000366210938, &#39;close&#39;: 210.91000366210938, &#39;date&#39;: 1532352600, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 211.6199951171875, &#39;low&#39;: 208.8000030517578, &#39;open&#39;: 210.5800018310547, &#39;volume&#39;: 16732000}, {&#39;adjclose&#39;: 214.6699981689453, &#39;close&#39;: 214.6699981689453, &#39;date&#39;: 1532439000, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 216.1999969482422, &#39;low&#39;: 212.60000610351562, &#39;open&#39;: 215.11000061035156, &#39;volume&#39;: 28468700}, {&#39;adjclose&#39;: 217.5, &#39;close&#39;: 217.5, &#39;date&#39;: 1532525400, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 218.6199951171875, &#39;low&#39;: 214.27000427246094, &#39;open&#39;: 215.72000122070312, &#39;volume&#39;: 58954200}, {&#39;adjclose&#39;: 176.25999450683594, &#39;close&#39;: 176.25999450683594, &#39;date&#39;: 1532611800, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 180.1300048828125, &#39;low&#39;: 173.75, &#39;open&#39;: 174.88999938964844, &#39;volume&#39;: 169803700}, {&#39;adjclose&#39;: 174.88999938964844, &#39;close&#39;: 174.88999938964844, &#39;date&#39;: 1532698200, &#39;formatted_date&#39;: &#39;2018-07-27&#39;, &#39;high&#39;: 179.92999267578125, &#39;low&#39;: 173.0, &#39;open&#39;: 179.8699951171875, &#39;volume&#39;: 60073700}, {&#39;adjclose&#39;: 171.05999755859375, &#39;close&#39;: 171.05999755859375, &#39;date&#39;: 1532957400, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 175.3000030517578, &#39;low&#39;: 166.55999755859375, &#39;open&#39;: 175.3000030517578, &#39;volume&#39;: 65280800}, {&#39;adjclose&#39;: 172.5800018310547, &#39;close&#39;: 172.5800018310547, &#39;date&#39;: 1533043800, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 174.24000549316406, &#39;low&#39;: 170.0, &#39;open&#39;: 170.6699981689453, &#39;volume&#39;: 40356500}, {&#39;adjclose&#39;: 171.64999389648438, &#39;close&#39;: 171.64999389648438, &#39;date&#39;: 1533130200, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 175.0800018310547, &#39;low&#39;: 170.89999389648438, &#39;open&#39;: 173.92999267578125, &#39;volume&#39;: 34042100}, {&#39;adjclose&#39;: 176.3699951171875, &#39;close&#39;: 176.3699951171875, &#39;date&#39;: 1533216600, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 176.7899932861328, &#39;low&#39;: 170.27000427246094, &#39;open&#39;: 170.67999267578125, &#39;volume&#39;: 32400000}, {&#39;adjclose&#39;: 177.77999877929688, &#39;close&#39;: 177.77999877929688, &#39;date&#39;: 1533303000, &#39;formatted_date&#39;: &#39;2018-08-03&#39;, &#39;high&#39;: 178.85000610351562, &#39;low&#39;: 176.14999389648438, &#39;open&#39;: 177.69000244140625, &#39;volume&#39;: 24763400}, {&#39;adjclose&#39;: 185.69000244140625, &#39;close&#39;: 185.69000244140625, &#39;date&#39;: 1533562200, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 185.7899932861328, &#39;low&#39;: 178.3800048828125, &#39;open&#39;: 178.97000122070312, &#39;volume&#39;: 49716200}, {&#39;adjclose&#39;: 183.80999755859375, &#39;close&#39;: 183.80999755859375, &#39;date&#39;: 1533648600, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 188.3000030517578, &#39;low&#39;: 183.72000122070312, &#39;open&#39;: 186.5, &#39;volume&#39;: 33398600}, {&#39;adjclose&#39;: 185.17999267578125, &#39;close&#39;: 185.17999267578125, &#39;date&#39;: 1533735000, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 186.85000610351562, &#39;low&#39;: 183.75999450683594, &#39;open&#39;: 184.75, &#39;volume&#39;: 22205200}, {&#39;adjclose&#39;: 183.08999633789062, &#39;close&#39;: 183.08999633789062, &#39;date&#39;: 1533821400, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 186.57000732421875, &#39;low&#39;: 182.47999572753906, &#39;open&#39;: 185.85000610351562, &#39;volume&#39;: 19732100}, {&#39;adjclose&#39;: 180.25999450683594, &#39;close&#39;: 180.25999450683594, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;, &#39;high&#39;: 182.10000610351562, &#39;low&#39;: 179.4199981689453, &#39;open&#39;: 182.0399932861328, &#39;volume&#39;: 21500400}, {&#39;adjclose&#39;: 180.0500030517578, &#39;close&#39;: 180.0500030517578, &#39;date&#39;: 1534167000, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 182.61000061035156, &#39;low&#39;: 178.89999389648438, &#39;open&#39;: 180.10000610351562, &#39;volume&#39;: 17423300}, {&#39;adjclose&#39;: 181.11000061035156, &#39;close&#39;: 181.11000061035156, &#39;date&#39;: 1534253400, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 181.99000549316406, &#39;low&#39;: 178.6199951171875, &#39;open&#39;: 180.7100067138672, &#39;volume&#39;: 19102000}, {&#39;adjclose&#39;: 179.52999877929688, &#39;close&#39;: 179.52999877929688, &#39;date&#39;: 1534339800, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 180.8699951171875, &#39;low&#39;: 174.77999877929688, &#39;open&#39;: 179.33999633789062, &#39;volume&#39;: 33020200}, {&#39;adjclose&#39;: 174.6999969482422, &#39;close&#39;: 174.6999969482422, &#39;date&#39;: 1534426200, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 180.5, &#39;low&#39;: 174.00999450683594, &#39;open&#39;: 180.4199981689453, &#39;volume&#39;: 31351800}, {&#39;adjclose&#39;: 173.8000030517578, &#39;close&#39;: 173.8000030517578, &#39;date&#39;: 1534512600, &#39;formatted_date&#39;: &#39;2018-08-17&#39;, &#39;high&#39;: 176.22000122070312, &#39;low&#39;: 172.0399932861328, &#39;open&#39;: 174.5, &#39;volume&#39;: 24893200}, {&#39;adjclose&#39;: 172.5, &#39;close&#39;: 172.5, &#39;date&#39;: 1534771800, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 174.57000732421875, &#39;low&#39;: 170.91000366210938, &#39;open&#39;: 174.0399932861328, &#39;volume&#39;: 21518000}, {&#39;adjclose&#39;: 172.6199951171875, &#39;close&#39;: 172.6199951171875, &#39;date&#39;: 1534858200, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 174.1699981689453, &#39;low&#39;: 171.38999938964844, &#39;open&#39;: 172.80999755859375, &#39;volume&#39;: 19578500}, {&#39;adjclose&#39;: 173.63999938964844, &#39;close&#39;: 173.63999938964844, &#39;date&#39;: 1534944600, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 174.24000549316406, &#39;low&#39;: 172.1300048828125, &#39;open&#39;: 172.2100067138672, &#39;volume&#39;: 16894100}, {&#39;adjclose&#39;: 172.89999389648438, &#39;close&#39;: 172.89999389648438, &#39;date&#39;: 1535031000, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 175.5500030517578, &#39;low&#39;: 172.8300018310547, &#39;open&#39;: 173.08999633789062, &#39;volume&#39;: 18053600}, {&#39;adjclose&#39;: 174.64999389648438, &#39;close&#39;: 174.64999389648438, &#39;date&#39;: 1535117400, &#39;formatted_date&#39;: &#39;2018-08-24&#39;, &#39;high&#39;: 174.82000732421875, &#39;low&#39;: 172.9199981689453, &#39;open&#39;: 173.6999969482422, &#39;volume&#39;: 14631600}, {&#39;adjclose&#39;: 177.4600067138672, &#39;close&#39;: 177.4600067138672, &#39;date&#39;: 1535376600, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 178.6699981689453, &#39;low&#39;: 175.7899932861328, &#39;open&#39;: 175.99000549316406, &#39;volume&#39;: 17921900}, {&#39;adjclose&#39;: 176.25999450683594, &#39;close&#39;: 176.25999450683594, &#39;date&#39;: 1535463000, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 178.24000549316406, &#39;low&#39;: 175.8300018310547, &#39;open&#39;: 178.10000610351562, &#39;volume&#39;: 15910700}, {&#39;adjclose&#39;: 175.89999389648438, &#39;close&#39;: 175.89999389648438, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 176.7899932861328, &#39;low&#39;: 174.75, &#39;open&#39;: 176.3000030517578, &#39;volume&#39;: 18494100}, {&#39;adjclose&#39;: 177.63999938964844, &#39;close&#39;: 177.63999938964844, &#39;date&#39;: 1535635800, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 179.7899932861328, &#39;low&#39;: 175.6999969482422, &#39;open&#39;: 175.89999389648438, &#39;volume&#39;: 24216500}, {&#39;adjclose&#39;: 175.72999572753906, &#39;close&#39;: 175.72999572753906, &#39;date&#39;: 1535722200, &#39;formatted_date&#39;: &#39;2018-08-31&#39;, &#39;high&#39;: 177.6199951171875, &#39;low&#39;: 174.97999572753906, &#39;open&#39;: 177.14999389648438, &#39;volume&#39;: 18065200}, {&#39;adjclose&#39;: 171.16000366210938, &#39;close&#39;: 171.16000366210938, &#39;date&#39;: 1536067800, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 173.88999938964844, &#39;low&#39;: 168.8000030517578, &#39;open&#39;: 173.5, &#39;volume&#39;: 29809000}, {&#39;adjclose&#39;: 167.17999267578125, &#39;close&#39;: 167.17999267578125, &#39;date&#39;: 1536154200, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 171.1300048828125, &#39;low&#39;: 166.6699981689453, &#39;open&#39;: 169.49000549316406, &#39;volume&#39;: 31226700}, {&#39;adjclose&#39;: 162.52999877929688, &#39;close&#39;: 162.52999877929688, &#39;date&#39;: 1536240600, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 166.97999572753906, &#39;low&#39;: 160.0, &#39;open&#39;: 166.97999572753906, &#39;volume&#39;: 41514800}, {&#39;adjclose&#39;: 163.0399932861328, &#39;close&#39;: 163.0399932861328, &#39;date&#39;: 1536327000, &#39;formatted_date&#39;: &#39;2018-09-07&#39;, &#39;high&#39;: 164.6300048828125, &#39;low&#39;: 160.16000366210938, &#39;open&#39;: 160.30999755859375, &#39;volume&#39;: 24300600}, {&#39;adjclose&#39;: 164.17999267578125, &#39;close&#39;: 164.17999267578125, &#39;date&#39;: 1536586200, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 165.00999450683594, &#39;low&#39;: 162.16000366210938, &#39;open&#39;: 163.50999450683594, &#39;volume&#39;: 20197700}, {&#39;adjclose&#39;: 165.94000244140625, &#39;close&#39;: 165.94000244140625, &#39;date&#39;: 1536672600, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 167.19000244140625, &#39;low&#39;: 163.72000122070312, &#39;open&#39;: 163.94000244140625, &#39;volume&#39;: 20457100}, {&#39;adjclose&#39;: 162.0, &#39;close&#39;: 162.0, &#39;date&#39;: 1536759000, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 164.49000549316406, &#39;low&#39;: 161.8000030517578, &#39;open&#39;: 163.25, &#39;volume&#39;: 24078100}, {&#39;adjclose&#39;: 161.36000061035156, &#39;close&#39;: 161.36000061035156, &#39;date&#39;: 1536845400, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 163.32000732421875, &#39;low&#39;: 160.86000061035156, &#39;open&#39;: 162.0, &#39;volume&#39;: 25453800}, {&#39;adjclose&#39;: 162.32000732421875, &#39;close&#39;: 162.32000732421875, &#39;date&#39;: 1536931800, &#39;formatted_date&#39;: &#39;2018-09-14&#39;, &#39;high&#39;: 162.83999633789062, &#39;low&#39;: 160.33999633789062, &#39;open&#39;: 161.72000122070312, &#39;volume&#39;: 21770400}, {&#39;adjclose&#39;: 160.5800018310547, &#39;close&#39;: 160.5800018310547, &#39;date&#39;: 1537191000, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 162.05999755859375, &#39;low&#39;: 159.77000427246094, &#39;open&#39;: 161.9199981689453, &#39;volume&#39;: 21005300}, {&#39;adjclose&#39;: 160.3000030517578, &#39;close&#39;: 160.3000030517578, &#39;date&#39;: 1537277400, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 161.75999450683594, &#39;low&#39;: 158.8699951171875, &#39;open&#39;: 159.38999938964844, &#39;volume&#39;: 22465200}, {&#39;adjclose&#39;: 163.05999755859375, &#39;close&#39;: 163.05999755859375, &#39;date&#39;: 1537363800, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 163.44000244140625, &#39;low&#39;: 159.47999572753906, &#39;open&#39;: 160.0800018310547, &#39;volume&#39;: 19629000}, {&#39;adjclose&#39;: 166.02000427246094, &#39;close&#39;: 166.02000427246094, &#39;date&#39;: 1537450200, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 166.4499969482422, &#39;low&#39;: 164.47000122070312, &#39;open&#39;: 164.5, &#39;volume&#39;: 18936000}, {&#39;adjclose&#39;: 162.92999267578125, &#39;close&#39;: 162.92999267578125, &#39;date&#39;: 1537536600, &#39;formatted_date&#39;: &#39;2018-09-21&#39;, &#39;high&#39;: 167.25, &#39;low&#39;: 162.80999755859375, &#39;open&#39;: 166.63999938964844, &#39;volume&#39;: 45994800}, {&#39;adjclose&#39;: 165.41000366210938, &#39;close&#39;: 165.41000366210938, &#39;date&#39;: 1537795800, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 165.6999969482422, &#39;low&#39;: 160.8800048828125, &#39;open&#39;: 161.02999877929688, &#39;volume&#39;: 19222800}, {&#39;adjclose&#39;: 164.91000366210938, &#39;close&#39;: 164.91000366210938, &#39;date&#39;: 1537882200, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 165.58999633789062, &#39;low&#39;: 161.14999389648438, &#39;open&#39;: 161.99000549316406, &#39;volume&#39;: 27622800}, {&#39;adjclose&#39;: 166.9499969482422, &#39;close&#39;: 166.9499969482422, &#39;date&#39;: 1537968600, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 169.3000030517578, &#39;low&#39;: 164.2100067138672, &#39;open&#39;: 164.3000030517578, &#39;volume&#39;: 25252200}, {&#39;adjclose&#39;: 168.83999633789062, &#39;close&#39;: 168.83999633789062, &#39;date&#39;: 1538055000, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 171.77000427246094, &#39;low&#39;: 167.2100067138672, &#39;open&#39;: 167.5500030517578, &#39;volume&#39;: 27266900}, {&#39;adjclose&#39;: 164.4600067138672, &#39;close&#39;: 164.4600067138672, &#39;date&#39;: 1538141400, &#39;formatted_date&#39;: &#39;2018-09-28&#39;, &#39;high&#39;: 168.7899932861328, &#39;low&#39;: 162.55999755859375, &#39;open&#39;: 168.3300018310547, &#39;volume&#39;: 34265600}, {&#39;adjclose&#39;: 162.44000244140625, &#39;close&#39;: 162.44000244140625, &#39;date&#39;: 1538400600, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 165.8800048828125, &#39;low&#39;: 161.25999450683594, &#39;open&#39;: 163.02999877929688, &#39;volume&#39;: 26407700}, {&#39;adjclose&#39;: 159.3300018310547, &#39;close&#39;: 159.3300018310547, &#39;date&#39;: 1538487000, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 162.27999877929688, &#39;low&#39;: 158.6699981689453, &#39;open&#39;: 161.5800018310547, &#39;volume&#39;: 36031000}, {&#39;adjclose&#39;: 162.42999267578125, &#39;close&#39;: 162.42999267578125, &#39;date&#39;: 1538573400, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 163.66000366210938, &#39;low&#39;: 159.52999877929688, &#39;open&#39;: 160.0, &#39;volume&#39;: 23109500}, {&#39;adjclose&#39;: 158.85000610351562, &#39;close&#39;: 158.85000610351562, &#39;date&#39;: 1538659800, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 161.4600067138672, &#39;low&#39;: 157.35000610351562, &#39;open&#39;: 161.4600067138672, &#39;volume&#39;: 25739600}, {&#39;adjclose&#39;: 157.3300018310547, &#39;close&#39;: 157.3300018310547, &#39;date&#39;: 1538746200, &#39;formatted_date&#39;: &#39;2018-10-05&#39;, &#39;high&#39;: 160.89999389648438, &#39;low&#39;: 156.1999969482422, &#39;open&#39;: 159.2100067138672, &#39;volume&#39;: 25744000}, {&#39;adjclose&#39;: 157.25, &#39;close&#39;: 157.25, &#39;date&#39;: 1539005400, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 158.33999633789062, &#39;low&#39;: 154.38999938964844, &#39;open&#39;: 155.5399932861328, &#39;volume&#39;: 24046000}, {&#39;adjclose&#39;: 157.89999389648438, &#39;close&#39;: 157.89999389648438, &#39;date&#39;: 1539091800, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 160.58999633789062, &#39;low&#39;: 157.4199981689453, &#39;open&#39;: 157.69000244140625, &#39;volume&#39;: 18844400}, {&#39;adjclose&#39;: 151.3800048828125, &#39;close&#39;: 151.3800048828125, &#39;date&#39;: 1539178200, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 157.69000244140625, &#39;low&#39;: 151.30999755859375, &#39;open&#39;: 156.82000732421875, &#39;volume&#39;: 30610000}, {&#39;adjclose&#39;: 153.35000610351562, &#39;close&#39;: 153.35000610351562, &#39;date&#39;: 1539264600, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 154.80999755859375, &#39;low&#39;: 149.16000366210938, &#39;open&#39;: 150.1300048828125, &#39;volume&#39;: 35338900}, {&#39;adjclose&#39;: 153.74000549316406, &#39;close&#39;: 153.74000549316406, &#39;date&#39;: 1539351000, &#39;formatted_date&#39;: &#39;2018-10-12&#39;, &#39;high&#39;: 156.88999938964844, &#39;low&#39;: 151.3000030517578, &#39;open&#39;: 156.72999572753906, &#39;volume&#39;: 25293500}, {&#39;adjclose&#39;: 153.52000427246094, &#39;close&#39;: 153.52000427246094, &#39;date&#39;: 1539610200, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 155.57000732421875, &#39;low&#39;: 152.5500030517578, &#39;open&#39;: 153.32000732421875, &#39;volume&#39;: 15433500}, {&#39;adjclose&#39;: 158.77999877929688, &#39;close&#39;: 158.77999877929688, &#39;date&#39;: 1539696600, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 159.4600067138672, &#39;low&#39;: 155.00999450683594, &#39;open&#39;: 155.39999389648438, &#39;volume&#39;: 19180100}, {&#39;adjclose&#39;: 159.4199981689453, &#39;close&#39;: 159.4199981689453, &#39;date&#39;: 1539783000, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 160.49000549316406, &#39;low&#39;: 157.9499969482422, &#39;open&#39;: 159.55999755859375, &#39;volume&#39;: 17592000}, {&#39;adjclose&#39;: 154.9199981689453, &#39;close&#39;: 154.9199981689453, &#39;date&#39;: 1539869400, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 158.66000366210938, &#39;low&#39;: 153.27999877929688, &#39;open&#39;: 158.50999450683594, &#39;volume&#39;: 21675100}, {&#39;adjclose&#39;: 154.0500030517578, &#39;close&#39;: 154.0500030517578, &#39;date&#39;: 1539955800, &#39;formatted_date&#39;: &#39;2018-10-19&#39;, &#39;high&#39;: 157.35000610351562, &#39;low&#39;: 153.5500030517578, &#39;open&#39;: 155.86000061035156, &#39;volume&#39;: 19761300}, {&#39;adjclose&#39;: 154.77999877929688, &#39;close&#39;: 154.77999877929688, &#39;date&#39;: 1540215000, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 157.33999633789062, &#39;low&#39;: 154.4600067138672, &#39;open&#39;: 154.75999450683594, &#39;volume&#39;: 15424700}, {&#39;adjclose&#39;: 154.38999938964844, &#39;close&#39;: 154.38999938964844, &#39;date&#39;: 1540301400, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 154.77000427246094, &#39;low&#39;: 150.85000610351562, &#39;open&#39;: 151.22000122070312, &#39;volume&#39;: 19095000}, {&#39;adjclose&#39;: 146.0399932861328, &#39;close&#39;: 146.0399932861328, &#39;date&#39;: 1540387800, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 154.64999389648438, &#39;low&#39;: 145.60000610351562, &#39;open&#39;: 154.27999877929688, &#39;volume&#39;: 27744600}, {&#39;adjclose&#39;: 150.9499969482422, &#39;close&#39;: 150.9499969482422, &#39;date&#39;: 1540474200, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 152.2100067138672, &#39;low&#39;: 147.0, &#39;open&#39;: 147.72999572753906, &#39;volume&#39;: 22105700}, {&#39;adjclose&#39;: 145.3699951171875, &#39;close&#39;: 145.3699951171875, &#39;date&#39;: 1540560600, &#39;formatted_date&#39;: &#39;2018-10-26&#39;, &#39;high&#39;: 149.0, &#39;low&#39;: 143.8000030517578, &#39;open&#39;: 145.82000732421875, &#39;volume&#39;: 31303300}, {&#39;adjclose&#39;: 142.08999633789062, &#39;close&#39;: 142.08999633789062, &#39;date&#39;: 1540819800, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 148.8300018310547, &#39;low&#39;: 139.02999877929688, &#39;open&#39;: 148.5, &#39;volume&#39;: 31336800}, {&#39;adjclose&#39;: 146.22000122070312, &#39;close&#39;: 146.22000122070312, &#39;date&#39;: 1540906200, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 146.63999938964844, &#39;low&#39;: 139.74000549316406, &#39;open&#39;: 139.94000244140625, &#39;volume&#39;: 50528300}, {&#39;adjclose&#39;: 151.7899932861328, &#39;close&#39;: 151.7899932861328, &#39;date&#39;: 1540992600, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 156.39999389648438, &#39;low&#39;: 148.9600067138672, &#39;open&#39;: 155.0, &#39;volume&#39;: 60101300}, {&#39;adjclose&#39;: 151.75, &#39;close&#39;: 151.75, &#39;date&#39;: 1541079000, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 152.75, &#39;low&#39;: 149.35000610351562, &#39;open&#39;: 151.52000427246094, &#39;volume&#39;: 25640800}, {&#39;adjclose&#39;: 150.35000610351562, &#39;close&#39;: 150.35000610351562, &#39;date&#39;: 1541165400, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 154.1300048828125, &#39;low&#39;: 148.9600067138672, &#39;open&#39;: 151.8000030517578, &#39;volume&#39;: 24708700}, {&#39;adjclose&#39;: 148.67999267578125, &#39;close&#39;: 148.67999267578125, &#39;date&#39;: 1541428200, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 150.19000244140625, &#39;low&#39;: 147.44000244140625, &#39;open&#39;: 150.10000610351562, &#39;volume&#39;: 15971200}, {&#39;adjclose&#39;: 149.94000244140625, &#39;close&#39;: 149.94000244140625, &#39;date&#39;: 1541514600, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 150.97000122070312, &#39;low&#39;: 148.0, &#39;open&#39;: 149.30999755859375, &#39;volume&#39;: 16667100}, {&#39;adjclose&#39;: 151.52999877929688, &#39;close&#39;: 151.52999877929688, &#39;date&#39;: 1541601000, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 153.00999450683594, &#39;low&#39;: 149.8300018310547, &#39;open&#39;: 151.57000732421875, &#39;volume&#39;: 21877400}, {&#39;adjclose&#39;: 147.8699951171875, &#39;close&#39;: 147.8699951171875, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 150.94000244140625, &#39;low&#39;: 146.74000549316406, &#39;open&#39;: 150.49000549316406, &#39;volume&#39;: 24145800}, {&#39;adjclose&#39;: 144.9600067138672, &#39;close&#39;: 144.9600067138672, &#39;date&#39;: 1541773800, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 147.75999450683594, &#39;low&#39;: 144.07000732421875, &#39;open&#39;: 146.75, &#39;volume&#39;: 17326900}, {&#39;adjclose&#39;: 141.5500030517578, &#39;close&#39;: 141.5500030517578, &#39;date&#39;: 1542033000, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 145.0399932861328, &#39;low&#39;: 140.49000549316406, &#39;open&#39;: 144.47999572753906, &#39;volume&#39;: 18542100}, {&#39;adjclose&#39;: 142.16000366210938, &#39;close&#39;: 142.16000366210938, &#39;date&#39;: 1542119400, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 144.8800048828125, &#39;low&#39;: 141.6199951171875, &#39;open&#39;: 142.0, &#39;volume&#39;: 15141700}, {&#39;adjclose&#39;: 144.22000122070312, &#39;close&#39;: 144.22000122070312, &#39;date&#39;: 1542205800, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 145.5800018310547, &#39;low&#39;: 141.5500030517578, &#39;open&#39;: 143.6999969482422, &#39;volume&#39;: 22068400}, {&#39;adjclose&#39;: 143.85000610351562, &#39;close&#39;: 143.85000610351562, &#39;date&#39;: 1542292200, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 144.83999633789062, &#39;low&#39;: 140.8300018310547, &#39;open&#39;: 142.3300018310547, &#39;volume&#39;: 30320300}, {&#39;adjclose&#39;: 139.52999877929688, &#39;close&#39;: 139.52999877929688, &#39;date&#39;: 1542378600, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 141.77000427246094, &#39;low&#39;: 137.77000427246094, &#39;open&#39;: 141.07000732421875, &#39;volume&#39;: 37250600}, {&#39;adjclose&#39;: 131.5500030517578, &#39;close&#39;: 131.5500030517578, &#39;date&#39;: 1542637800, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 137.75, &#39;low&#39;: 131.2100067138672, &#39;open&#39;: 137.61000061035156, &#39;volume&#39;: 44362700}, {&#39;adjclose&#39;: 132.42999267578125, &#39;close&#39;: 132.42999267578125, &#39;date&#39;: 1542724200, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 134.16000366210938, &#39;low&#39;: 126.8499984741211, &#39;open&#39;: 127.02999877929688, &#39;volume&#39;: 41939500}, {&#39;adjclose&#39;: 134.82000732421875, &#39;close&#39;: 134.82000732421875, &#39;date&#39;: 1542810600, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 137.19000244140625, &#39;low&#39;: 134.1300048828125, &#39;open&#39;: 134.39999389648438, &#39;volume&#39;: 25469700}, {&#39;adjclose&#39;: 131.72999572753906, &#39;close&#39;: 131.72999572753906, &#39;date&#39;: 1542983400, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 134.5, &#39;low&#39;: 131.25999450683594, &#39;open&#39;: 133.64999389648438, &#39;volume&#39;: 11886100}, {&#39;adjclose&#39;: 136.3800048828125, &#39;close&#39;: 136.3800048828125, &#39;date&#39;: 1543242600, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 137.0, &#39;low&#39;: 132.77999877929688, &#39;open&#39;: 133.0, &#39;volume&#39;: 24263600}, {&#39;adjclose&#39;: 135.0, &#39;close&#39;: 135.0, &#39;date&#39;: 1543329000, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 136.61000061035156, &#39;low&#39;: 133.7100067138672, &#39;open&#39;: 135.75, &#39;volume&#39;: 20750300}, {&#39;adjclose&#39;: 136.75999450683594, &#39;close&#39;: 136.75999450683594, &#39;date&#39;: 1543415400, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 136.7899932861328, &#39;low&#39;: 131.85000610351562, &#39;open&#39;: 136.27999877929688, &#39;volume&#39;: 29847500}, {&#39;adjclose&#39;: 138.67999267578125, &#39;close&#39;: 138.67999267578125, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 139.99000549316406, &#39;low&#39;: 135.66000366210938, &#39;open&#39;: 135.9199981689453, &#39;volume&#39;: 24238700}, {&#39;adjclose&#39;: 140.61000061035156, &#39;close&#39;: 140.61000061035156, &#39;date&#39;: 1543588200, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 140.97000122070312, &#39;low&#39;: 137.36000061035156, &#39;open&#39;: 138.25999450683594, &#39;volume&#39;: 25732600}, {&#39;adjclose&#39;: 141.08999633789062, &#39;close&#39;: 141.08999633789062, &#39;date&#39;: 1543847400, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 143.67999267578125, &#39;low&#39;: 140.75999450683594, &#39;open&#39;: 143.0, &#39;volume&#39;: 24819200}, {&#39;adjclose&#39;: 137.92999267578125, &#39;close&#39;: 137.92999267578125, &#39;date&#39;: 1543933800, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 143.38999938964844, &#39;low&#39;: 137.16000366210938, &#39;open&#39;: 140.72999572753906, &#39;volume&#39;: 30307400}, {&#39;adjclose&#39;: 139.6300048828125, &#39;close&#39;: 139.6300048828125, &#39;date&#39;: 1544106600, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 139.6999969482422, &#39;low&#39;: 133.6699981689453, &#39;open&#39;: 133.82000732421875, &#39;volume&#39;: 28218100}, {&#39;adjclose&#39;: 137.4199981689453, &#39;close&#39;: 137.4199981689453, &#39;date&#39;: 1544193000, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 140.8699951171875, &#39;low&#39;: 136.66000366210938, &#39;open&#39;: 139.25, &#39;volume&#39;: 21195500}, {&#39;adjclose&#39;: 141.85000610351562, &#39;close&#39;: 141.85000610351562, &#39;date&#39;: 1544452200, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 143.0500030517578, &#39;low&#39;: 139.00999450683594, &#39;open&#39;: 139.60000610351562, &#39;volume&#39;: 26422200}, {&#39;adjclose&#39;: 142.0800018310547, &#39;close&#39;: 142.0800018310547, &#39;date&#39;: 1544538600, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 143.8800048828125, &#39;low&#39;: 141.10000610351562, &#39;open&#39;: 143.8800048828125, &#39;volume&#39;: 20300300}, {&#39;adjclose&#39;: 144.5, &#39;close&#39;: 144.5, &#39;date&#39;: 1544625000, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 147.19000244140625, &#39;low&#39;: 142.50999450683594, &#39;open&#39;: 143.0800018310547, &#39;volume&#39;: 23696900}, {&#39;adjclose&#39;: 145.00999450683594, &#39;close&#39;: 145.00999450683594, &#39;date&#39;: 1544711400, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 145.85000610351562, &#39;low&#39;: 143.19000244140625, &#39;open&#39;: 145.57000732421875, &#39;volume&#39;: 18148600}, {&#39;adjclose&#39;: 144.05999755859375, &#39;close&#39;: 144.05999755859375, &#39;date&#39;: 1544797800, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 146.00999450683594, &#39;low&#39;: 142.50999450683594, &#39;open&#39;: 143.33999633789062, &#39;volume&#39;: 21785800}, {&#39;adjclose&#39;: 140.19000244140625, &#39;close&#39;: 140.19000244140625, &#39;date&#39;: 1545057000, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 144.9199981689453, &#39;low&#39;: 138.4199981689453, &#39;open&#39;: 143.0800018310547, &#39;volume&#39;: 24334000}, {&#39;adjclose&#39;: 143.66000366210938, &#39;close&#39;: 143.66000366210938, &#39;date&#39;: 1545143400, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 145.92999267578125, &#39;low&#39;: 139.8300018310547, &#39;open&#39;: 141.0800018310547, &#39;volume&#39;: 24709100}, {&#39;adjclose&#39;: 133.24000549316406, &#39;close&#39;: 133.24000549316406, &#39;date&#39;: 1545229800, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 144.91000366210938, &#39;low&#39;: 132.5, &#39;open&#39;: 141.2100067138672, &#39;volume&#39;: 57404900}, {&#39;adjclose&#39;: 133.39999389648438, &#39;close&#39;: 133.39999389648438, &#39;date&#39;: 1545316200, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 135.57000732421875, &#39;low&#39;: 130.0, &#39;open&#39;: 130.6999969482422, &#39;volume&#39;: 40297900}, {&#39;adjclose&#39;: 124.94999694824219, &#39;close&#39;: 124.94999694824219, &#39;date&#39;: 1545402600, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 134.89999389648438, &#39;low&#39;: 123.41999816894531, &#39;open&#39;: 133.38999938964844, &#39;volume&#39;: 56901500}, {&#39;adjclose&#39;: 124.05999755859375, &#39;close&#39;: 124.05999755859375, &#39;date&#39;: 1545661800, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 129.74000549316406, &#39;low&#39;: 123.0199966430664, &#39;open&#39;: 123.0999984741211, &#39;volume&#39;: 22066000}, {&#39;adjclose&#39;: 134.17999267578125, &#39;close&#39;: 134.17999267578125, &#39;date&#39;: 1545834600, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 134.24000549316406, &#39;low&#39;: 125.88999938964844, &#39;open&#39;: 126.0, &#39;volume&#39;: 39723400}, {&#39;adjclose&#39;: 134.52000427246094, &#39;close&#39;: 134.52000427246094, &#39;date&#39;: 1545921000, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 134.99000549316406, &#39;low&#39;: 129.6699981689453, &#39;open&#39;: 132.44000244140625, &#39;volume&#39;: 31202500}, {&#39;adjclose&#39;: 133.1999969482422, &#39;close&#39;: 133.1999969482422, &#39;date&#39;: 1546007400, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 135.9199981689453, &#39;low&#39;: 132.1999969482422, &#39;open&#39;: 135.33999633789062, &#39;volume&#39;: 22627600}, {&#39;adjclose&#39;: 131.08999633789062, &#39;close&#39;: 131.08999633789062, &#39;date&#39;: 1546266600, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 134.63999938964844, &#39;low&#39;: 129.9499969482422, &#39;open&#39;: 134.4499969482422, &#39;volume&#39;: 24625300}, {&#39;adjclose&#39;: 135.67999267578125, &#39;close&#39;: 135.67999267578125, &#39;date&#39;: 1546439400, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 137.50999450683594, &#39;low&#39;: 128.55999755859375, &#39;open&#39;: 128.99000549316406, &#39;volume&#39;: 28146200}, {&#39;adjclose&#39;: 131.74000549316406, &#39;close&#39;: 131.74000549316406, &#39;date&#39;: 1546525800, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 137.1699981689453, &#39;low&#39;: 131.1199951171875, &#39;open&#39;: 134.69000244140625, &#39;volume&#39;: 22717900}, {&#39;adjclose&#39;: 137.9499969482422, &#39;close&#39;: 137.9499969482422, &#39;date&#39;: 1546612200, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 138.0, &#39;low&#39;: 133.75, &#39;open&#39;: 134.00999450683594, &#39;volume&#39;: 29002100}, {&#39;adjclose&#39;: 138.0500030517578, &#39;close&#39;: 138.0500030517578, &#39;date&#39;: 1546871400, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 138.8699951171875, &#39;low&#39;: 135.91000366210938, &#39;open&#39;: 137.55999755859375, &#39;volume&#39;: 20089300}, {&#39;adjclose&#39;: 142.52999877929688, &#39;close&#39;: 142.52999877929688, &#39;date&#39;: 1546957800, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 143.13999938964844, &#39;low&#39;: 139.5399932861328, &#39;open&#39;: 139.88999938964844, &#39;volume&#39;: 26263800}, {&#39;adjclose&#39;: 144.22999572753906, &#39;close&#39;: 144.22999572753906, &#39;date&#39;: 1547044200, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 144.6999969482422, &#39;low&#39;: 141.27000427246094, &#39;open&#39;: 142.9499969482422, &#39;volume&#39;: 22205900}, {&#39;adjclose&#39;: 144.1999969482422, &#39;close&#39;: 144.1999969482422, &#39;date&#39;: 1547130600, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 144.55999755859375, &#39;low&#39;: 140.83999633789062, &#39;open&#39;: 143.0800018310547, &#39;volume&#39;: 16125000}, {&#39;adjclose&#39;: 143.8000030517578, &#39;close&#39;: 143.8000030517578, &#39;date&#39;: 1547217000, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 145.36000061035156, &#39;low&#39;: 142.57000732421875, &#39;open&#39;: 143.14999389648438, &#39;volume&#39;: 12908000}, {&#39;adjclose&#39;: 145.38999938964844, &#39;close&#39;: 145.38999938964844, &#39;date&#39;: 1547476200, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 146.57000732421875, &#39;low&#39;: 141.27000427246094, &#39;open&#39;: 142.0, &#39;volume&#39;: 20520300}, {&#39;adjclose&#39;: 148.9499969482422, &#39;close&#39;: 148.9499969482422, &#39;date&#39;: 1547562600, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 150.67999267578125, &#39;low&#39;: 145.99000549316406, &#39;open&#39;: 146.00999450683594, &#39;volume&#39;: 24069000}, {&#39;adjclose&#39;: 147.5399932861328, &#39;close&#39;: 147.5399932861328, &#39;date&#39;: 1547649000, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 149.64999389648438, &#39;low&#39;: 147.0, &#39;open&#39;: 149.0, &#39;volume&#39;: 18025700}, {&#39;adjclose&#39;: 148.3000030517578, &#39;close&#39;: 148.3000030517578, &#39;date&#39;: 1547735400, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 149.0, &#39;low&#39;: 146.5, &#39;open&#39;: 146.9499969482422, &#39;volume&#39;: 15787900}, {&#39;adjclose&#39;: 150.0399932861328, &#39;close&#39;: 150.0399932861328, &#39;date&#39;: 1547821800, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 152.42999267578125, &#39;low&#39;: 148.5500030517578, &#39;open&#39;: 149.75, &#39;volume&#39;: 31029600}, {&#39;adjclose&#39;: 147.57000732421875, &#39;close&#39;: 147.57000732421875, &#39;date&#39;: 1548167400, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 151.52999877929688, &#39;low&#39;: 146.3699951171875, &#39;open&#39;: 149.1999969482422, &#39;volume&#39;: 22378700}, {&#39;adjclose&#39;: 144.3000030517578, &#39;close&#39;: 144.3000030517578, &#39;date&#39;: 1548253800, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 148.8000030517578, &#39;low&#39;: 143.05999755859375, &#39;open&#39;: 148.27999877929688, &#39;volume&#39;: 20098400}, {&#39;adjclose&#39;: 145.8300018310547, &#39;close&#39;: 145.8300018310547, &#39;date&#39;: 1548340200, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 146.44000244140625, &#39;low&#39;: 142.52000427246094, &#39;open&#39;: 144.63999938964844, &#39;volume&#39;: 20955500}, {&#39;adjclose&#39;: 149.00999450683594, &#39;close&#39;: 149.00999450683594, &#39;date&#39;: 1548426600, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 149.8300018310547, &#39;low&#39;: 146.5399932861328, &#39;open&#39;: 147.47999572753906, &#39;volume&#39;: 22237200}, {&#39;adjclose&#39;: 147.47000122070312, &#39;close&#39;: 147.47000122070312, &#39;date&#39;: 1548685800, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 148.9600067138672, &#39;low&#39;: 146.2100067138672, &#39;open&#39;: 148.0500030517578, &#39;volume&#39;: 15508500}, {&#39;adjclose&#39;: 144.19000244140625, &#39;close&#39;: 144.19000244140625, &#39;date&#39;: 1548772200, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 148.10000610351562, &#39;low&#39;: 143.42999267578125, &#39;open&#39;: 148.08999633789062, &#39;volume&#39;: 17632100}, {&#39;adjclose&#39;: 150.4199981689453, &#39;close&#39;: 150.4199981689453, &#39;date&#39;: 1548858600, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 150.9499969482422, &#39;low&#39;: 145.6999969482422, &#39;open&#39;: 146.22000122070312, &#39;volume&#39;: 44613200}, {&#39;adjclose&#39;: 166.69000244140625, &#39;close&#39;: 166.69000244140625, &#39;date&#39;: 1548945000, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 171.67999267578125, &#39;low&#39;: 165.0, &#39;open&#39;: 165.60000610351562, &#39;volume&#39;: 77233600}, {&#39;adjclose&#39;: 165.7100067138672, &#39;close&#39;: 165.7100067138672, &#39;date&#39;: 1549031400, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 169.10000610351562, &#39;low&#39;: 165.66000366210938, &#39;open&#39;: 165.83999633789062, &#39;volume&#39;: 30806500}, {&#39;adjclose&#39;: 169.25, &#39;close&#39;: 169.25, &#39;date&#39;: 1549290600, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 169.3000030517578, &#39;low&#39;: 163.6199951171875, &#39;open&#39;: 165.6999969482422, &#39;volume&#39;: 20036000}, {&#39;adjclose&#39;: 171.16000366210938, &#39;close&#39;: 171.16000366210938, &#39;date&#39;: 1549377000, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 171.97999572753906, &#39;low&#39;: 168.69000244140625, &#39;open&#39;: 169.14999389648438, &#39;volume&#39;: 22557000}, {&#39;adjclose&#39;: 170.49000549316406, &#39;close&#39;: 170.49000549316406, &#39;date&#39;: 1549463400, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 172.47000122070312, &#39;low&#39;: 169.27000427246094, &#39;open&#39;: 171.1999969482422, &#39;volume&#39;: 13281200}, {&#39;adjclose&#39;: 166.3800048828125, &#39;close&#39;: 166.3800048828125, &#39;date&#39;: 1549549800, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 169.24000549316406, &#39;low&#39;: 165.25, &#39;open&#39;: 168.1999969482422, &#39;volume&#39;: 17517600}, {&#39;adjclose&#39;: 167.3300018310547, &#39;close&#39;: 167.3300018310547, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 167.3699951171875, &#39;low&#39;: 164.2100067138672, &#39;open&#39;: 164.47000122070312, &#39;volume&#39;: 12561400}, {&#39;adjclose&#39;: 165.7899932861328, &#39;close&#39;: 165.7899932861328, &#39;date&#39;: 1549895400, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 168.3000030517578, &#39;low&#39;: 165.0800018310547, &#39;open&#39;: 167.89999389648438, &#39;volume&#39;: 12811200}, {&#39;adjclose&#39;: 165.0399932861328, &#39;close&#39;: 165.0399932861328, &#39;date&#39;: 1549981800, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 168.33999633789062, &#39;low&#39;: 164.5, &#39;open&#39;: 166.86000061035156, &#39;volume&#39;: 16292300}, {&#39;adjclose&#39;: 164.07000732421875, &#39;close&#39;: 164.07000732421875, &#39;date&#39;: 1550068200, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 166.22000122070312, &#39;low&#39;: 163.72999572753906, &#39;open&#39;: 165.3800048828125, &#39;volume&#39;: 14205100}, {&#39;adjclose&#39;: 163.9499969482422, &#39;close&#39;: 163.9499969482422, &#39;date&#39;: 1550154600, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 164.8699951171875, &#39;low&#39;: 162.25, &#39;open&#39;: 163.19000244140625, &#39;volume&#39;: 12755200}, {&#39;adjclose&#39;: 162.5, &#39;close&#39;: 162.5, &#39;date&#39;: 1550241000, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 164.6999969482422, &#39;low&#39;: 160.86000061035156, &#39;open&#39;: 164.50999450683594, &#39;volume&#39;: 15504400}, {&#39;adjclose&#39;: 162.2899932861328, &#39;close&#39;: 162.2899932861328, &#39;date&#39;: 1550586600, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 164.14999389648438, &#39;low&#39;: 160.3300018310547, &#39;open&#39;: 160.5, &#39;volume&#39;: 14345400}, {&#39;adjclose&#39;: 162.55999755859375, &#39;close&#39;: 162.55999755859375, &#39;date&#39;: 1550673000, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 163.72000122070312, &#39;low&#39;: 161.25, &#39;open&#39;: 162.25, &#39;volume&#39;: 11770700}, {&#39;adjclose&#39;: 160.0399932861328, &#39;close&#39;: 160.0399932861328, &#39;date&#39;: 1550759400, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 162.24000549316406, &#39;low&#39;: 159.58999633789062, &#39;open&#39;: 161.92999267578125, &#39;volume&#39;: 15607800}, {&#39;adjclose&#39;: 161.88999938964844, &#39;close&#39;: 161.88999938964844, &#39;date&#39;: 1550845800, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 162.41000366210938, &#39;low&#39;: 160.30999755859375, &#39;open&#39;: 160.5800018310547, &#39;volume&#39;: 15858500}, {&#39;adjclose&#39;: 164.6199951171875, &#39;close&#39;: 164.6199951171875, &#39;date&#39;: 1551105000, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 166.07000732421875, &#39;low&#39;: 162.89999389648438, &#39;open&#39;: 163.07000732421875, &#39;volume&#39;: 18737100}, {&#39;adjclose&#39;: 164.1300048828125, &#39;close&#39;: 164.1300048828125, &#39;date&#39;: 1551191400, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 166.24000549316406, &#39;low&#39;: 163.8000030517578, &#39;open&#39;: 164.33999633789062, &#39;volume&#39;: 13784100}, {&#39;adjclose&#39;: 162.80999755859375, &#39;close&#39;: 162.80999755859375, &#39;date&#39;: 1551277800, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 163.92999267578125, &#39;low&#39;: 160.41000366210938, &#39;open&#39;: 162.89999389648438, &#39;volume&#39;: 12697500}, {&#39;adjclose&#39;: 161.4499969482422, &#39;close&#39;: 161.4499969482422, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 163.5, &#39;low&#39;: 160.86000061035156, &#39;open&#39;: 162.3699951171875, &#39;volume&#39;: 11114200}, {&#39;adjclose&#39;: 162.27999877929688, &#39;close&#39;: 162.27999877929688, &#39;date&#39;: 1551450600, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 163.1300048828125, &#39;low&#39;: 161.69000244140625, &#39;open&#39;: 162.60000610351562, &#39;volume&#39;: 11097800}, {&#39;adjclose&#39;: 167.3699951171875, &#39;close&#39;: 167.3699951171875, &#39;date&#39;: 1551709800, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 167.5, &#39;low&#39;: 163.8300018310547, &#39;open&#39;: 163.89999389648438, &#39;volume&#39;: 18894700}, {&#39;adjclose&#39;: 171.25999450683594, &#39;close&#39;: 171.25999450683594, &#39;date&#39;: 1551796200, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 171.8800048828125, &#39;low&#39;: 166.5500030517578, &#39;open&#39;: 167.3699951171875, &#39;volume&#39;: 28187900}, {&#39;adjclose&#39;: 172.50999450683594, &#39;close&#39;: 172.50999450683594, &#39;date&#39;: 1551882600, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 173.57000732421875, &#39;low&#39;: 171.27000427246094, &#39;open&#39;: 172.89999389648438, &#39;volume&#39;: 21531700}, {&#39;adjclose&#39;: 169.1300048828125, &#39;close&#39;: 169.1300048828125, &#39;date&#39;: 1551969000, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 171.74000549316406, &#39;low&#39;: 167.61000061035156, &#39;open&#39;: 171.5, &#39;volume&#39;: 18306500}, {&#39;adjclose&#39;: 169.60000610351562, &#39;close&#39;: 169.60000610351562, &#39;date&#39;: 1552055400, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 169.6199951171875, &#39;low&#39;: 165.97000122070312, &#39;open&#39;: 166.1999969482422, &#39;volume&#39;: 13184800}, {&#39;adjclose&#39;: 172.07000732421875, &#39;close&#39;: 172.07000732421875, &#39;date&#39;: 1552311000, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 174.3000030517578, &#39;low&#39;: 171.5800018310547, &#39;open&#39;: 171.60000610351562, &#39;volume&#39;: 18884000}, {&#39;adjclose&#39;: 171.9199981689453, &#39;close&#39;: 171.9199981689453, &#39;date&#39;: 1552397400, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 173.8000030517578, &#39;low&#39;: 171.22000122070312, &#39;open&#39;: 172.08999633789062, &#39;volume&#39;: 12155300}, {&#39;adjclose&#39;: 173.3699951171875, &#39;close&#39;: 173.3699951171875, &#39;date&#39;: 1552483800, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 174.02999877929688, &#39;low&#39;: 172.1199951171875, &#39;open&#39;: 172.32000732421875, &#39;volume&#39;: 11973300}, {&#39;adjclose&#39;: 170.1699981689453, &#39;close&#39;: 170.1699981689453, &#39;date&#39;: 1552570200, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 171.14999389648438, &#39;low&#39;: 168.16000366210938, &#39;open&#39;: 169.75999450683594, &#39;volume&#39;: 18037400}, {&#39;adjclose&#39;: 165.97999572753906, &#39;close&#39;: 165.97999572753906, &#39;date&#39;: 1552656600, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 167.5800018310547, &#39;low&#39;: 162.50999450683594, &#39;open&#39;: 167.16000366210938, &#39;volume&#39;: 37135400}, {&#39;adjclose&#39;: 160.47000122070312, &#39;close&#39;: 160.47000122070312, &#39;date&#39;: 1552915800, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 163.89999389648438, &#39;low&#39;: 159.27999877929688, &#39;open&#39;: 163.57000732421875, &#39;volume&#39;: 37524200}, {&#39;adjclose&#39;: 161.57000732421875, &#39;close&#39;: 161.57000732421875, &#39;date&#39;: 1553002200, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 163.82000732421875, &#39;low&#39;: 160.82000732421875, &#39;open&#39;: 161.47999572753906, &#39;volume&#39;: 25611500}, {&#39;adjclose&#39;: 165.44000244140625, &#39;close&#39;: 165.44000244140625, &#39;date&#39;: 1553088600, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 166.1199951171875, &#39;low&#39;: 161.24000549316406, &#39;open&#39;: 161.5, &#39;volume&#39;: 20211500}, {&#39;adjclose&#39;: 166.0800018310547, &#39;close&#39;: 166.0800018310547, &#39;date&#39;: 1553175000, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 166.38999938964844, &#39;low&#39;: 163.75, &#39;open&#39;: 164.88999938964844, &#39;volume&#39;: 16223000}, {&#39;adjclose&#39;: 164.33999633789062, &#39;close&#39;: 164.33999633789062, &#39;date&#39;: 1553261400, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 167.4199981689453, &#39;low&#39;: 164.08999633789062, &#39;open&#39;: 165.64999389648438, &#39;volume&#39;: 16389200}, {&#39;adjclose&#39;: 166.2899932861328, &#39;close&#39;: 166.2899932861328, &#39;date&#39;: 1553520600, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 166.5399932861328, &#39;low&#39;: 162.0, &#39;open&#39;: 163.0, &#39;volume&#39;: 12631200}, {&#39;adjclose&#39;: 167.67999267578125, &#39;close&#39;: 167.67999267578125, &#39;date&#39;: 1553607000, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 169.4499969482422, &#39;low&#39;: 166.35000610351562, &#39;open&#39;: 167.35000610351562, &#39;volume&#39;: 15437900}, {&#39;adjclose&#39;: 165.8699951171875, &#39;close&#39;: 165.8699951171875, &#39;date&#39;: 1553693400, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 168.94000244140625, &#39;low&#39;: 164.7899932861328, &#39;open&#39;: 167.85000610351562, &#39;volume&#39;: 10620300}, {&#39;adjclose&#39;: 165.5500030517578, &#39;close&#39;: 165.5500030517578, &#39;date&#39;: 1553779800, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 166.72000122070312, &#39;low&#39;: 163.3300018310547, &#39;open&#39;: 164.57000732421875, &#39;volume&#39;: 10689200}, {&#39;adjclose&#39;: 166.69000244140625, &#39;close&#39;: 166.69000244140625, &#39;date&#39;: 1553866200, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 167.19000244140625, &#39;low&#39;: 164.80999755859375, &#39;open&#39;: 166.38999938964844, &#39;volume&#39;: 13455500}, {&#39;adjclose&#39;: 168.6999969482422, &#39;close&#39;: 168.6999969482422, &#39;date&#39;: 1554125400, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 168.89999389648438, &#39;low&#39;: 167.27999877929688, &#39;open&#39;: 167.8300018310547, &#39;volume&#39;: 10381500}, {&#39;adjclose&#39;: 174.1999969482422, &#39;close&#39;: 174.1999969482422, &#39;date&#39;: 1554211800, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 174.89999389648438, &#39;low&#39;: 169.5500030517578, &#39;open&#39;: 170.13999938964844, &#39;volume&#39;: 23946500}, {&#39;adjclose&#39;: 173.5399932861328, &#39;close&#39;: 173.5399932861328, &#39;date&#39;: 1554298200, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 177.9600067138672, &#39;low&#39;: 172.9499969482422, &#39;open&#39;: 174.5, &#39;volume&#39;: 27590100}, {&#39;adjclose&#39;: 176.02000427246094, &#39;close&#39;: 176.02000427246094, &#39;date&#39;: 1554384600, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 178.0, &#39;low&#39;: 175.52999877929688, &#39;open&#39;: 176.02000427246094, &#39;volume&#39;: 17847700}, {&#39;adjclose&#39;: 175.72000122070312, &#39;close&#39;: 175.72000122070312, &#39;date&#39;: 1554471000, &#39;formatted_date&#39;: &#39;2019-04-05&#39;, &#39;high&#39;: 177.0, &#39;low&#39;: 175.10000610351562, &#39;open&#39;: 176.8800048828125, &#39;volume&#39;: 9594100}, {&#39;adjclose&#39;: 174.92999267578125, &#39;close&#39;: 174.92999267578125, &#39;date&#39;: 1554730200, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 175.5, &#39;low&#39;: 174.22999572753906, &#39;open&#39;: 175.2100067138672, &#39;volume&#39;: 7297400}, {&#39;adjclose&#39;: 177.5800018310547, &#39;close&#39;: 177.5800018310547, &#39;date&#39;: 1554816600, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 179.19000244140625, &#39;low&#39;: 175.5500030517578, &#39;open&#39;: 175.6199951171875, &#39;volume&#39;: 19751000}, {&#39;adjclose&#39;: 177.82000732421875, &#39;close&#39;: 177.82000732421875, &#39;date&#39;: 1554903000, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 178.7899932861328, &#39;low&#39;: 176.5399932861328, &#39;open&#39;: 178.17999267578125, &#39;volume&#39;: 11701500}, {&#39;adjclose&#39;: 177.50999450683594, &#39;close&#39;: 177.50999450683594, &#39;date&#39;: 1554989400, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 178.39999389648438, &#39;low&#39;: 177.0, &#39;open&#39;: 178.24000549316406, &#39;volume&#39;: 8071000}, {&#39;adjclose&#39;: 179.10000610351562, &#39;close&#39;: 179.10000610351562, &#39;date&#39;: 1555075800, &#39;formatted_date&#39;: &#39;2019-04-12&#39;, &#39;high&#39;: 179.6300048828125, &#39;low&#39;: 177.9499969482422, &#39;open&#39;: 178.0, &#39;volume&#39;: 12329800}, {&#39;adjclose&#39;: 179.64999389648438, &#39;close&#39;: 179.64999389648438, &#39;date&#39;: 1555335000, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 180.5, &#39;low&#39;: 176.8699951171875, &#39;open&#39;: 178.5, &#39;volume&#39;: 10834800}, {&#39;adjclose&#39;: 178.8699951171875, &#39;close&#39;: 178.8699951171875, &#39;date&#39;: 1555421400, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 180.1699981689453, &#39;low&#39;: 178.3000030517578, &#39;open&#39;: 179.0, &#39;volume&#39;: 11215200}, {&#39;adjclose&#39;: 178.77999877929688, &#39;close&#39;: 178.77999877929688, &#39;date&#39;: 1555507800, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 180.74000549316406, &#39;low&#39;: 178.36000061035156, &#39;open&#39;: 179.60000610351562, &#39;volume&#39;: 9973700}, {&#39;adjclose&#39;: 178.27999877929688, &#39;close&#39;: 178.27999877929688, &#39;date&#39;: 1555594200, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 178.8800048828125, &#39;low&#39;: 177.33999633789062, &#39;open&#39;: 178.8000030517578, &#39;volume&#39;: 11655600}, {&#39;adjclose&#39;: 181.44000244140625, &#39;close&#39;: 181.44000244140625, &#39;date&#39;: 1555939800, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 181.6699981689453, &#39;low&#39;: 178.25, &#39;open&#39;: 178.25, &#39;volume&#39;: 13389900}, {&#39;adjclose&#39;: 183.77999877929688, &#39;close&#39;: 183.77999877929688, &#39;date&#39;: 1556026200, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 184.22000122070312, &#39;low&#39;: 181.47999572753906, &#39;open&#39;: 182.74000549316406, &#39;volume&#39;: 19954800}, {&#39;adjclose&#39;: 182.5800018310547, &#39;close&#39;: 182.5800018310547, &#39;date&#39;: 1556112600, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 185.13999938964844, &#39;low&#39;: 181.64999389648438, &#39;open&#39;: 184.49000549316406, &#39;volume&#39;: 37289900}, {&#39;adjclose&#39;: 193.25999450683594, &#39;close&#39;: 193.25999450683594, &#39;date&#39;: 1556199000, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 198.47999572753906, &#39;low&#39;: 192.1199951171875, &#39;open&#39;: 196.97999572753906, &#39;volume&#39;: 54148800}, {&#39;adjclose&#39;: 191.49000549316406, &#39;close&#39;: 191.49000549316406, &#39;date&#39;: 1556285400, &#39;formatted_date&#39;: &#39;2019-04-26&#39;, &#39;high&#39;: 192.89999389648438, &#39;low&#39;: 189.08999633789062, &#39;open&#39;: 192.5, &#39;volume&#39;: 22075000}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: -14400}}, &#39;NVDA&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {&#39;dividends&#39;: {&#39;2018-05-23&#39;: {&#39;amount&#39;: 0.15, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;}, &#39;2018-08-29&#39;: {&#39;amount&#39;: 0.15, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;}, &#39;2018-11-29&#39;: {&#39;amount&#39;: 0.16, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;}, &#39;2019-02-28&#39;: {&#39;amount&#39;: 0.16, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;}}}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 917015400, &#39;formatted_date&#39;: &#39;1999-01-22&#39;}, &#39;instrumentType&#39;: &#39;EQUITY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 223.30502319335938, &#39;close&#39;: 224.89999389648438, &#39;date&#39;: 1525095000, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 229.0, &#39;low&#39;: 224.1199951171875, &#39;open&#39;: 226.99000549316406, &#39;volume&#39;: 8196100}, {&#39;adjclose&#39;: 225.52915954589844, &#39;close&#39;: 227.13999938964844, &#39;date&#39;: 1525181400, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 227.25, &#39;low&#39;: 222.1999969482422, &#39;open&#39;: 224.57000732421875, &#39;volume&#39;: 6344700}, {&#39;adjclose&#39;: 224.70501708984375, &#39;close&#39;: 226.30999755859375, &#39;date&#39;: 1525267800, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 228.8000030517578, &#39;low&#39;: 225.25, &#39;open&#39;: 227.0, &#39;volume&#39;: 6706200}, {&#39;adjclose&#39;: 231.33767700195312, &#39;close&#39;: 232.99000549316406, &#39;date&#39;: 1525354200, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 234.0500030517578, &#39;low&#39;: 225.77000427246094, &#39;open&#39;: 227.60000610351562, &#39;volume&#39;: 11078600}, {&#39;adjclose&#39;: 237.36460876464844, &#39;close&#39;: 239.05999755859375, &#39;date&#39;: 1525440600, &#39;formatted_date&#39;: &#39;2018-05-04&#39;, &#39;high&#39;: 239.19000244140625, &#39;low&#39;: 231.1300048828125, &#39;open&#39;: 231.8300018310547, &#39;volume&#39;: 10016500}, {&#39;adjclose&#39;: 246.9163818359375, &#39;close&#39;: 248.67999267578125, &#39;date&#39;: 1525699800, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 250.99000549316406, &#39;low&#39;: 242.88999938964844, &#39;open&#39;: 243.2899932861328, &#39;volume&#39;: 17190400}, {&#39;adjclose&#39;: 248.62417602539062, &#39;close&#39;: 250.39999389648438, &#39;date&#39;: 1525786200, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 250.50999450683594, &#39;low&#39;: 246.7100067138672, &#39;open&#39;: 248.69000244140625, &#39;volume&#39;: 12665400}, {&#39;adjclose&#39;: 253.9660186767578, &#39;close&#39;: 255.77999877929688, &#39;date&#39;: 1525872600, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 255.8699951171875, &#39;low&#39;: 250.11000061035156, &#39;open&#39;: 251.2100067138672, &#39;volume&#39;: 14919000}, {&#39;adjclose&#39;: 258.28515625, &#39;close&#39;: 260.1300048828125, &#39;date&#39;: 1525959000, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 260.5, &#39;low&#39;: 257.20001220703125, &#39;open&#39;: 257.9200134277344, &#39;volume&#39;: 24852000}, {&#39;adjclose&#39;: 252.7248992919922, &#39;close&#39;: 254.52999877929688, &#39;date&#39;: 1526045400, &#39;formatted_date&#39;: &#39;2018-05-11&#39;, &#39;high&#39;: 259.7900085449219, &#39;low&#39;: 250.5399932861328, &#39;open&#39;: 252.77999877929688, &#39;volume&#39;: 30361400}, {&#39;adjclose&#39;: 253.54901123046875, &#39;close&#39;: 255.36000061035156, &#39;date&#39;: 1526304600, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 258.489990234375, &#39;low&#39;: 254.39999389648438, &#39;open&#39;: 256.07000732421875, &#39;volume&#39;: 13078500}, {&#39;adjclose&#39;: 243.8185272216797, &#39;close&#39;: 245.55999755859375, &#39;date&#39;: 1526391000, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 252.89999389648438, &#39;low&#39;: 241.5, &#39;open&#39;: 252.7899932861328, &#39;volume&#39;: 24088200}, {&#39;adjclose&#39;: 244.26531982421875, &#39;close&#39;: 246.00999450683594, &#39;date&#39;: 1526477400, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 248.52000427246094, &#39;low&#39;: 242.50999450683594, &#39;open&#39;: 244.0, &#39;volume&#39;: 13845700}, {&#39;adjclose&#39;: 245.95326232910156, &#39;close&#39;: 247.7100067138672, &#39;date&#39;: 1526563800, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 251.5, &#39;low&#39;: 245.42999267578125, &#39;open&#39;: 246.0800018310547, &#39;volume&#39;: 12994600}, {&#39;adjclose&#39;: 244.19581604003906, &#39;close&#39;: 245.94000244140625, &#39;date&#39;: 1526650200, &#39;formatted_date&#39;: &#39;2018-05-18&#39;, &#39;high&#39;: 252.3699951171875, &#39;low&#39;: 245.74000549316406, &#39;open&#39;: 249.80999755859375, &#39;volume&#39;: 12092900}, {&#39;adjclose&#39;: 242.5078887939453, &#39;close&#39;: 244.24000549316406, &#39;date&#39;: 1526909400, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 250.02999877929688, &#39;low&#39;: 240.49000549316406, &#39;open&#39;: 249.8800048828125, &#39;volume&#39;: 16015600}, {&#39;adjclose&#39;: 240.97877502441406, &#39;close&#39;: 242.6999969482422, &#39;date&#39;: 1526995800, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 245.8000030517578, &#39;low&#39;: 240.25, &#39;open&#39;: 244.77999877929688, &#39;volume&#39;: 12956600}, {&#39;adjclose&#39;: 245.93646240234375, &#39;close&#39;: 247.5399932861328, &#39;date&#39;: 1527082200, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 247.58999633789062, &#39;low&#39;: 240.25, &#39;open&#39;: 240.27999877929688, &#39;volume&#39;: 11073900}, {&#39;adjclose&#39;: 246.0854949951172, &#39;close&#39;: 247.69000244140625, &#39;date&#39;: 1527168600, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 249.39999389648438, &#39;low&#39;: 245.24000549316406, &#39;open&#39;: 247.38999938964844, &#39;volume&#39;: 10934300}, {&#39;adjclose&#39;: 247.66519165039062, &#39;close&#39;: 249.27999877929688, &#39;date&#39;: 1527255000, &#39;formatted_date&#39;: &#39;2018-05-25&#39;, &#39;high&#39;: 249.94000244140625, &#39;low&#39;: 246.75999450683594, &#39;open&#39;: 248.1999969482422, &#39;volume&#39;: 7302800}, {&#39;adjclose&#39;: 246.97967529296875, &#39;close&#39;: 248.58999633789062, &#39;date&#39;: 1527600600, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 251.33999633789062, &#39;low&#39;: 246.6999969482422, &#39;open&#39;: 248.5500030517578, &#39;volume&#39;: 8817100}, {&#39;adjclose&#39;: 251.3511962890625, &#39;close&#39;: 252.99000549316406, &#39;date&#39;: 1527687000, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 253.33999633789062, &#39;low&#39;: 248.9499969482422, &#39;open&#39;: 249.9499969482422, &#39;volume&#39;: 9774900}, {&#39;adjclose&#39;: 250.5563201904297, &#39;close&#39;: 252.19000244140625, &#39;date&#39;: 1527773400, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 255.1999969482422, &#39;low&#39;: 251.27000427246094, &#39;open&#39;: 251.6999969482422, &#39;volume&#39;: 12346700}, {&#39;adjclose&#39;: 255.95115661621094, &#39;close&#39;: 257.6199951171875, &#39;date&#39;: 1527859800, &#39;formatted_date&#39;: &#39;2018-06-01&#39;, &#39;high&#39;: 257.8699951171875, &#39;low&#39;: 253.64999389648438, &#39;open&#39;: 254.0, &#39;volume&#39;: 10549200}, {&#39;adjclose&#39;: 263.1343078613281, &#39;close&#39;: 264.8500061035156, &#39;date&#39;: 1528119000, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 265.739990234375, &#39;low&#39;: 257.70001220703125, &#39;open&#39;: 259.0, &#39;volume&#39;: 16050600}, {&#39;adjclose&#39;: 263.35296630859375, &#39;close&#39;: 265.07000732421875, &#39;date&#39;: 1528205400, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 266.5899963378906, &#39;low&#39;: 263.1700134277344, &#39;open&#39;: 264.9800109863281, &#39;volume&#39;: 9792800}, {&#39;adjclose&#39;: 263.432373046875, &#39;close&#39;: 265.1499938964844, &#39;date&#39;: 1528291800, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 265.2799987792969, &#39;low&#39;: 260.7699890136719, &#39;open&#39;: 261.42999267578125, &#39;volume&#39;: 9283900}, {&#39;adjclose&#39;: 261.19696044921875, &#39;close&#39;: 262.8999938964844, &#39;date&#39;: 1528378200, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 265.4800109863281, &#39;low&#39;: 259.25, &#39;open&#39;: 265.0, &#39;volume&#39;: 9236200}, {&#39;adjclose&#39;: 260.5809631347656, &#39;close&#39;: 262.2799987792969, &#39;date&#39;: 1528464600, &#39;formatted_date&#39;: &#39;2018-06-08&#39;, &#39;high&#39;: 264.0, &#39;low&#39;: 259.20001220703125, &#39;open&#39;: 259.9599914550781, &#39;volume&#39;: 9011400}, {&#39;adjclose&#39;: 258.93170166015625, &#39;close&#39;: 260.6199951171875, &#39;date&#39;: 1528723800, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 263.45001220703125, &#39;low&#39;: 260.1000061035156, &#39;open&#39;: 261.7699890136719, &#39;volume&#39;: 6634300}, {&#39;adjclose&#39;: 260.8789978027344, &#39;close&#39;: 262.5799865722656, &#39;date&#39;: 1528810200, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 263.07000732421875, &#39;low&#39;: 259.6600036621094, &#39;open&#39;: 261.69000244140625, &#39;volume&#39;: 7979000}, {&#39;adjclose&#39;: 260.7001953125, &#39;close&#39;: 262.3999938964844, &#39;date&#39;: 1528896600, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 265.6700134277344, &#39;low&#39;: 262.0299987792969, &#39;open&#39;: 262.6400146484375, &#39;volume&#39;: 8455200}, {&#39;adjclose&#39;: 265.1809997558594, &#39;close&#39;: 266.9100036621094, &#39;date&#39;: 1528983000, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 269.20001220703125, &#39;low&#39;: 263.6199951171875, &#39;open&#39;: 264.2200012207031, &#39;volume&#39;: 10750400}, {&#39;adjclose&#39;: 263.54168701171875, &#39;close&#39;: 265.260009765625, &#39;date&#39;: 1529069400, &#39;formatted_date&#39;: &#39;2018-06-15&#39;, &#39;high&#39;: 267.4800109863281, &#39;low&#39;: 263.3500061035156, &#39;open&#39;: 264.6000061035156, &#39;volume&#39;: 10806500}, {&#39;adjclose&#39;: 263.3727722167969, &#39;close&#39;: 265.0899963378906, &#39;date&#39;: 1529328600, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 265.79998779296875, &#39;low&#39;: 262.3800048828125, &#39;open&#39;: 263.4800109863281, &#39;volume&#39;: 8906700}, {&#39;adjclose&#39;: 258.48468017578125, &#39;close&#39;: 260.1700134277344, &#39;date&#39;: 1529415000, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 263.6400146484375, &#39;low&#39;: 255.02000427246094, &#39;open&#39;: 260.9200134277344, &#39;volume&#39;: 14873300}, {&#39;adjclose&#39;: 260.6108093261719, &#39;close&#39;: 262.30999755859375, &#39;date&#39;: 1529501400, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 264.45001220703125, &#39;low&#39;: 260.2799987792969, &#39;open&#39;: 261.8299865722656, &#39;volume&#39;: 9244500}, {&#39;adjclose&#39;: 255.44447326660156, &#39;close&#39;: 257.1099853515625, &#39;date&#39;: 1529587800, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 264.3399963378906, &#39;low&#39;: 256.79998779296875, &#39;open&#39;: 263.6000061035156, &#39;volume&#39;: 8987900}, {&#39;adjclose&#39;: 249.32437133789062, &#39;close&#39;: 250.9499969482422, &#39;date&#39;: 1529674200, &#39;formatted_date&#39;: &#39;2018-06-22&#39;, &#39;high&#39;: 258.489990234375, &#39;low&#39;: 250.3300018310547, &#39;open&#39;: 257.95001220703125, &#39;volume&#39;: 10854000}, {&#39;adjclose&#39;: 237.57101440429688, &#39;close&#39;: 239.1199951171875, &#39;date&#39;: 1529933400, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 246.8000030517578, &#39;low&#39;: 235.5399932861328, &#39;open&#39;: 246.64999389648438, &#39;volume&#39;: 16645400}, {&#39;adjclose&#39;: 240.4224090576172, &#39;close&#39;: 241.99000549316406, &#39;date&#39;: 1530019800, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 245.64999389648438, &#39;low&#39;: 239.91000366210938, &#39;open&#39;: 243.6999969482422, &#39;volume&#39;: 11972100}, {&#39;adjclose&#39;: 234.19302368164062, &#39;close&#39;: 235.72000122070312, &#39;date&#39;: 1530106200, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 246.42999267578125, &#39;low&#39;: 235.5, &#39;open&#39;: 243.75, &#39;volume&#39;: 11347300}, {&#39;adjclose&#39;: 239.29974365234375, &#39;close&#39;: 240.86000061035156, &#39;date&#39;: 1530192600, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 241.33999633789062, &#39;low&#39;: 235.00999450683594, &#39;open&#39;: 235.32000732421875, &#39;volume&#39;: 8450300}, {&#39;adjclose&#39;: 235.36538696289062, &#39;close&#39;: 236.89999389648438, &#39;date&#39;: 1530279000, &#39;formatted_date&#39;: &#39;2018-06-29&#39;, &#39;high&#39;: 244.0, &#39;low&#39;: 236.85000610351562, &#39;open&#39;: 243.49000549316406, &#39;volume&#39;: 9807500}, {&#39;adjclose&#39;: 240.6707763671875, &#39;close&#39;: 242.24000549316406, &#39;date&#39;: 1530538200, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 242.38999938964844, &#39;low&#39;: 233.25999450683594, &#39;open&#39;: 234.08999633789062, &#39;volume&#39;: 8939300}, {&#39;adjclose&#39;: 235.30577087402344, &#39;close&#39;: 236.83999633789062, &#39;date&#39;: 1530624600, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 243.8800048828125, &#39;low&#39;: 236.5, &#39;open&#39;: 243.63999938964844, &#39;volume&#39;: 5568300}, {&#39;adjclose&#39;: 241.15760803222656, &#39;close&#39;: 242.72999572753906, &#39;date&#39;: 1530797400, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 242.92999267578125, &#39;low&#39;: 237.5, &#39;open&#39;: 239.07000732421875, &#39;volume&#39;: 7655400}, {&#39;adjclose&#39;: 245.72784423828125, &#39;close&#39;: 247.3300018310547, &#39;date&#39;: 1530883800, &#39;formatted_date&#39;: &#39;2018-07-06&#39;, &#39;high&#39;: 247.6699981689453, &#39;low&#39;: 240.8800048828125, &#39;open&#39;: 241.74000549316406, &#39;volume&#39;: 7408800}, {&#39;adjclose&#39;: 247.63539123535156, &#39;close&#39;: 249.25, &#39;date&#39;: 1531143000, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 250.72000122070312, &#39;low&#39;: 246.07000732421875, &#39;open&#39;: 250.3300018310547, &#39;volume&#39;: 7597000}, {&#39;adjclose&#39;: 251.60946655273438, &#39;close&#39;: 253.25, &#39;date&#39;: 1531229400, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 254.13999938964844, &#39;low&#39;: 248.1199951171875, &#39;open&#39;: 249.75, &#39;volume&#39;: 9000400}, {&#39;adjclose&#39;: 245.92654418945312, &#39;close&#39;: 247.52999877929688, &#39;date&#39;: 1531315800, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 250.89999389648438, &#39;low&#39;: 247.10000610351562, &#39;open&#39;: 249.5, &#39;volume&#39;: 9187700}, {&#39;adjclose&#39;: 249.60255432128906, &#39;close&#39;: 251.22999572753906, &#39;date&#39;: 1531402200, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 253.1699981689453, &#39;low&#39;: 248.9600067138672, &#39;open&#39;: 249.36000061035156, &#39;volume&#39;: 8637700}, {&#39;adjclose&#39;: 247.70494079589844, &#39;close&#39;: 249.32000732421875, &#39;date&#39;: 1531488600, &#39;formatted_date&#39;: &#39;2018-07-13&#39;, &#39;high&#39;: 251.97999572753906, &#39;low&#39;: 247.6199951171875, &#39;open&#39;: 251.97999572753906, &#39;volume&#39;: 6174700}, {&#39;adjclose&#39;: 246.59219360351562, &#39;close&#39;: 248.1999969482422, &#39;date&#39;: 1531747800, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 250.33999633789062, &#39;low&#39;: 247.6999969482422, &#39;open&#39;: 248.1999969482422, &#39;volume&#39;: 4925900}, {&#39;adjclose&#39;: 252.04664611816406, &#39;close&#39;: 253.69000244140625, &#39;date&#39;: 1531834200, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 254.3000030517578, &#39;low&#39;: 245.17999267578125, &#39;open&#39;: 246.2100067138672, &#39;volume&#39;: 9053400}, {&#39;adjclose&#39;: 250.0695037841797, &#39;close&#39;: 251.6999969482422, &#39;date&#39;: 1531920600, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 253.9499969482422, &#39;low&#39;: 249.63999938964844, &#39;open&#39;: 253.38999938964844, &#39;volume&#39;: 6941000}, {&#39;adjclose&#39;: 250.3973846435547, &#39;close&#39;: 252.02999877929688, &#39;date&#39;: 1532007000, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 253.38999938964844, &#39;low&#39;: 250.3300018310547, &#39;open&#39;: 250.94000244140625, &#39;volume&#39;: 5893800}, {&#39;adjclose&#39;: 249.2647705078125, &#39;close&#39;: 250.88999938964844, &#39;date&#39;: 1532093400, &#39;formatted_date&#39;: &#39;2018-07-20&#39;, &#39;high&#39;: 253.5, &#39;low&#39;: 250.4499969482422, &#39;open&#39;: 251.92999267578125, &#39;volume&#39;: 5558800}, {&#39;adjclose&#39;: 247.7943572998047, &#39;close&#39;: 249.41000366210938, &#39;date&#39;: 1532352600, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 249.88999938964844, &#39;low&#39;: 243.27999877929688, &#39;open&#39;: 249.82000732421875, &#39;volume&#39;: 7539600}, {&#39;adjclose&#39;: 247.09890747070312, &#39;close&#39;: 248.7100067138672, &#39;date&#39;: 1532439000, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 254.85000610351562, &#39;low&#39;: 248.0, &#39;open&#39;: 251.35000610351562, &#39;volume&#39;: 8865500}, {&#39;adjclose&#39;: 250.23843383789062, &#39;close&#39;: 251.8699951171875, &#39;date&#39;: 1532525400, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 252.3800048828125, &#39;low&#39;: 246.75, &#39;open&#39;: 249.08999633789062, &#39;volume&#39;: 7977800}, {&#39;adjclose&#39;: 253.18917846679688, &#39;close&#39;: 254.83999633789062, &#39;date&#39;: 1532611800, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 256.3299865722656, &#39;low&#39;: 250.3800048828125, &#39;open&#39;: 251.05999755859375, &#39;volume&#39;: 8128100}, {&#39;adjclose&#39;: 250.387451171875, &#39;close&#39;: 252.02000427246094, &#39;date&#39;: 1532698200, &#39;formatted_date&#39;: &#39;2018-07-27&#39;, &#39;high&#39;: 256.6000061035156, &#39;low&#39;: 249.83999633789062, &#39;open&#39;: 256.32000732421875, &#39;volume&#39;: 7385500}, {&#39;adjclose&#39;: 242.54856872558594, &#39;close&#39;: 244.1300048828125, &#39;date&#39;: 1532957400, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 252.8300018310547, &#39;low&#39;: 242.72000122070312, &#39;open&#39;: 252.58999633789062, &#39;volume&#39;: 8508500}, {&#39;adjclose&#39;: 243.27381896972656, &#39;close&#39;: 244.86000061035156, &#39;date&#39;: 1533043800, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 247.8800048828125, &#39;low&#39;: 242.13999938964844, &#39;open&#39;: 243.7100067138672, &#39;volume&#39;: 7099700}, {&#39;adjclose&#39;: 244.87339782714844, &#39;close&#39;: 246.47000122070312, &#39;date&#39;: 1533130200, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 248.36000061035156, &#39;low&#39;: 243.88999938964844, &#39;open&#39;: 246.1300048828125, &#39;volume&#39;: 7088900}, {&#39;adjclose&#39;: 248.9965057373047, &#39;close&#39;: 250.6199951171875, &#39;date&#39;: 1533216600, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 250.77999877929688, &#39;low&#39;: 241.2100067138672, &#39;open&#39;: 243.58999633789062, &#39;volume&#39;: 6741700}, {&#39;adjclose&#39;: 250.46693420410156, &#39;close&#39;: 252.10000610351562, &#39;date&#39;: 1533303000, &#39;formatted_date&#39;: &#39;2018-08-03&#39;, &#39;high&#39;: 253.05999755859375, &#39;low&#39;: 250.92999267578125, &#39;open&#39;: 251.61000061035156, &#39;volume&#39;: 5357200}, {&#39;adjclose&#39;: 252.38442993164062, &#39;close&#39;: 254.02999877929688, &#39;date&#39;: 1533562200, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 254.1699981689453, &#39;low&#39;: 249.7100067138672, &#39;open&#39;: 251.58999633789062, &#39;volume&#39;: 5187700}, {&#39;adjclose&#39;: 255.2855224609375, &#39;close&#39;: 256.95001220703125, &#39;date&#39;: 1533648600, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 257.70001220703125, &#39;low&#39;: 254.9199981689453, &#39;open&#39;: 256.0, &#39;volume&#39;: 6453300}, {&#39;adjclose&#39;: 256.74603271484375, &#39;close&#39;: 258.4200134277344, &#39;date&#39;: 1533735000, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 260.239990234375, &#39;low&#39;: 255.58999633789062, &#39;open&#39;: 257.0, &#39;volume&#39;: 6552500}, {&#39;adjclose&#39;: 254.79869079589844, &#39;close&#39;: 256.4599914550781, &#39;date&#39;: 1533821400, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 259.25, &#39;low&#39;: 256.1499938964844, &#39;open&#39;: 259.1400146484375, &#39;volume&#39;: 5107000}, {&#39;adjclose&#39;: 253.1394805908203, &#39;close&#39;: 254.7899932861328, &#39;date&#39;: 1533907800, &#39;formatted_date&#39;: &#39;2018-08-10&#39;, &#39;high&#39;: 256.1000061035156, &#39;low&#39;: 252.6999969482422, &#39;open&#39;: 253.14999389648438, &#39;volume&#39;: 6409900}, {&#39;adjclose&#39;: 254.4608917236328, &#39;close&#39;: 256.1199951171875, &#39;date&#39;: 1534167000, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 261.0, &#39;low&#39;: 255.07000732421875, &#39;open&#39;: 255.13999938964844, &#39;volume&#39;: 9380200}, {&#39;adjclose&#39;: 259.7364807128906, &#39;close&#39;: 261.42999267578125, &#39;date&#39;: 1534253400, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 262.0, &#39;low&#39;: 257.0199890136719, &#39;open&#39;: 260.3800048828125, &#39;volume&#39;: 11655500}, {&#39;adjclose&#39;: 257.4017333984375, &#39;close&#39;: 259.0799865722656, &#39;date&#39;: 1534339800, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 263.6400146484375, &#39;low&#39;: 255.89999389648438, &#39;open&#39;: 262.2699890136719, &#39;volume&#39;: 14778400}, {&#39;adjclose&#39;: 255.77230834960938, &#39;close&#39;: 257.44000244140625, &#39;date&#39;: 1534426200, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 262.0, &#39;low&#39;: 255.00999450683594, &#39;open&#39;: 261.8999938964844, &#39;volume&#39;: 20031500}, {&#39;adjclose&#39;: 243.23410034179688, &#39;close&#39;: 244.82000732421875, &#39;date&#39;: 1534512600, &#39;formatted_date&#39;: &#39;2018-08-17&#39;, &#39;high&#39;: 252.97000122070312, &#39;low&#39;: 243.72999572753906, &#39;open&#39;: 252.94000244140625, &#39;volume&#39;: 28579700}, {&#39;adjclose&#39;: 246.23452758789062, &#39;close&#39;: 247.83999633789062, &#39;date&#39;: 1534771800, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 253.1999969482422, &#39;low&#39;: 238.72000122070312, &#39;open&#39;: 243.17999267578125, &#39;volume&#39;: 21359700}, {&#39;adjclose&#39;: 251.67901611328125, &#39;close&#39;: 253.32000732421875, &#39;date&#39;: 1534858200, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 253.5, &#39;low&#39;: 247.6999969482422, &#39;open&#39;: 248.5, &#39;volume&#39;: 16849700}, {&#39;adjclose&#39;: 261.1174621582031, &#39;close&#39;: 262.82000732421875, &#39;date&#39;: 1534944600, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 263.0199890136719, &#39;low&#39;: 251.86000061035156, &#39;open&#39;: 252.0, &#39;volume&#39;: 18746400}, {&#39;adjclose&#39;: 265.1114501953125, &#39;close&#39;: 266.8399963378906, &#39;date&#39;: 1535031000, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 269.4800109863281, &#39;low&#39;: 260.70001220703125, &#39;open&#39;: 261.260009765625, &#39;volume&#39;: 18017100}, {&#39;adjclose&#39;: 270.45660400390625, &#39;close&#39;: 272.2200012207031, &#39;date&#39;: 1535117400, &#39;formatted_date&#39;: &#39;2018-08-24&#39;, &#39;high&#39;: 272.80999755859375, &#39;low&#39;: 267.0, &#39;open&#39;: 267.17999267578125, &#39;volume&#39;: 13287800}, {&#39;adjclose&#39;: 274.11279296875, &#39;close&#39;: 275.8999938964844, &#39;date&#39;: 1535376600, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 278.8999938964844, &#39;low&#39;: 272.1499938964844, &#39;open&#39;: 273.4200134277344, &#39;volume&#39;: 12644400}, {&#39;adjclose&#39;: 272.6025695800781, &#39;close&#39;: 274.3800048828125, &#39;date&#39;: 1535463000, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 276.5799865722656, &#39;low&#39;: 269.5299987792969, &#39;open&#39;: 275.6600036621094, &#39;volume&#39;: 11884600}, {&#39;adjclose&#39;: 276.8373107910156, &#39;close&#39;: 278.489990234375, &#39;date&#39;: 1535549400, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 279.5, &#39;low&#39;: 273.0799865722656, &#39;open&#39;: 273.9200134277344, &#39;volume&#39;: 10502700}, {&#39;adjclose&#39;: 276.1613464355469, &#39;close&#39;: 277.80999755859375, &#39;date&#39;: 1535635800, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 281.7200012207031, &#39;low&#39;: 276.32000732421875, &#39;open&#39;: 277.2300109863281, &#39;volume&#39;: 8665200}, {&#39;adjclose&#39;: 279.01434326171875, &#39;close&#39;: 280.67999267578125, &#39;date&#39;: 1535722200, &#39;formatted_date&#39;: &#39;2018-08-31&#39;, &#39;high&#39;: 281.20001220703125, &#39;low&#39;: 276.6000061035156, &#39;open&#39;: 277.0, &#39;volume&#39;: 7664800}, {&#39;adjclose&#39;: 282.0163879394531, &#39;close&#39;: 283.70001220703125, &#39;date&#39;: 1536067800, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 285.2200012207031, &#39;low&#39;: 279.0, &#39;open&#39;: 280.1499938964844, &#39;volume&#39;: 9793000}, {&#39;adjclose&#39;: 276.76776123046875, &#39;close&#39;: 278.4200134277344, &#39;date&#39;: 1536154200, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 284.4200134277344, &#39;low&#39;: 275.1499938964844, &#39;open&#39;: 282.989990234375, &#39;volume&#39;: 9828900}, {&#39;adjclose&#39;: 271.1015625, &#39;close&#39;: 272.7200012207031, &#39;date&#39;: 1536240600, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 277.8599853515625, &#39;low&#39;: 271.3900146484375, &#39;open&#39;: 277.760009765625, &#39;volume&#39;: 8069900}, {&#39;adjclose&#39;: 270.2466735839844, &#39;close&#39;: 271.8599853515625, &#39;date&#39;: 1536327000, &#39;formatted_date&#39;: &#39;2018-09-07&#39;, &#39;high&#39;: 276.92999267578125, &#39;low&#39;: 267.19000244140625, &#39;open&#39;: 269.0, &#39;volume&#39;: 7385500}, {&#39;adjclose&#39;: 273.0996398925781, &#39;close&#39;: 274.7300109863281, &#39;date&#39;: 1536586200, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 275.92999267578125, &#39;low&#39;: 271.0, &#39;open&#39;: 272.7699890136719, &#39;volume&#39;: 5503500}, {&#39;adjclose&#39;: 271.1810607910156, &#39;close&#39;: 272.79998779296875, &#39;date&#39;: 1536672600, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 276.3999938964844, &#39;low&#39;: 272.0199890136719, &#39;open&#39;: 272.8599853515625, &#39;volume&#39;: 6077800}, {&#39;adjclose&#39;: 266.6083679199219, &#39;close&#39;: 268.20001220703125, &#39;date&#39;: 1536759000, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 271.9800109863281, &#39;low&#39;: 261.9200134277344, &#39;open&#39;: 271.19000244140625, &#39;volume&#39;: 10477300}, {&#39;adjclose&#39;: 269.7297668457031, &#39;close&#39;: 271.3399963378906, &#39;date&#39;: 1536845400, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 275.0, &#39;low&#39;: 270.1600036621094, &#39;open&#39;: 270.8599853515625, &#39;volume&#39;: 7638400}, {&#39;adjclose&#39;: 274.78955078125, &#39;close&#39;: 276.42999267578125, &#39;date&#39;: 1536931800, &#39;formatted_date&#39;: &#39;2018-09-14&#39;, &#39;high&#39;: 279.1000061035156, &#39;low&#39;: 273.5, &#39;open&#39;: 274.989990234375, &#39;volume&#39;: 9673400}, {&#39;adjclose&#39;: 272.3043518066406, &#39;close&#39;: 273.92999267578125, &#39;date&#39;: 1537191000, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 277.3800048828125, &#39;low&#39;: 273.1499938964844, &#39;open&#39;: 275.3999938964844, &#39;volume&#39;: 5138200}, {&#39;adjclose&#39;: 269.41162109375, &#39;close&#39;: 271.0199890136719, &#39;date&#39;: 1537277400, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 278.239990234375, &#39;low&#39;: 270.75, &#39;open&#39;: 274.0899963378906, &#39;volume&#39;: 7488000}, {&#39;adjclose&#39;: 270.365966796875, &#39;close&#39;: 271.9800109863281, &#39;date&#39;: 1537363800, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 272.70001220703125, &#39;low&#39;: 268.25, &#39;open&#39;: 270.2699890136719, &#39;volume&#39;: 5621500}, {&#39;adjclose&#39;: 264.69976806640625, &#39;close&#39;: 266.2799987792969, &#39;date&#39;: 1537450200, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 268.760009765625, &#39;low&#39;: 264.1000061035156, &#39;open&#39;: 267.04998779296875, &#39;volume&#39;: 10764600}, {&#39;adjclose&#39;: 261.8865966796875, &#39;close&#39;: 263.45001220703125, &#39;date&#39;: 1537536600, &#39;formatted_date&#39;: &#39;2018-09-21&#39;, &#39;high&#39;: 268.6000061035156, &#39;low&#39;: 262.1099853515625, &#39;open&#39;: 266.760009765625, &#39;volume&#39;: 10878200}, {&#39;adjclose&#39;: 264.12322998046875, &#39;close&#39;: 265.70001220703125, &#39;date&#39;: 1537795800, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 265.8399963378906, &#39;low&#39;: 258.67999267578125, &#39;open&#39;: 262.20001220703125, &#39;volume&#39;: 7347800}, {&#39;adjclose&#39;: 266.817138671875, &#39;close&#39;: 268.4100036621094, &#39;date&#39;: 1537882200, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 269.4200134277344, &#39;low&#39;: 264.9100036621094, &#39;open&#39;: 268.3699951171875, &#39;volume&#39;: 7009700}, {&#39;adjclose&#39;: 265.33599853515625, &#39;close&#39;: 266.9200134277344, &#39;date&#39;: 1537968600, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 270.239990234375, &#39;low&#39;: 266.2799987792969, &#39;open&#39;: 268.6099853515625, &#39;volume&#39;: 6713700}, {&#39;adjclose&#39;: 265.8131408691406, &#39;close&#39;: 267.3999938964844, &#39;date&#39;: 1538055000, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 269.20001220703125, &#39;low&#39;: 266.1300048828125, &#39;open&#39;: 268.3399963378906, &#39;volume&#39;: 5360700}, {&#39;adjclose&#39;: 279.3523254394531, &#39;close&#39;: 281.0199890136719, &#39;date&#39;: 1538141400, &#39;formatted_date&#39;: &#39;2018-09-28&#39;, &#39;high&#39;: 281.9200134277344, &#39;low&#39;: 271.6000061035156, &#39;open&#39;: 272.7300109863281, &#39;volume&#39;: 17734900}, {&#39;adjclose&#39;: 287.642822265625, &#39;close&#39;: 289.3599853515625, &#39;date&#39;: 1538400600, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 292.05999755859375, &#39;low&#39;: 282.6000061035156, &#39;open&#39;: 284.1600036621094, &#39;volume&#39;: 15551500}, {&#39;adjclose&#39;: 284.7799072265625, &#39;close&#39;: 286.4800109863281, &#39;date&#39;: 1538487000, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 292.760009765625, &#39;low&#39;: 285.5799865722656, &#39;open&#39;: 288.25, &#39;volume&#39;: 9599100}, {&#39;adjclose&#39;: 285.02838134765625, &#39;close&#39;: 286.7300109863281, &#39;date&#39;: 1538573400, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 289.6199951171875, &#39;low&#39;: 282.5299987792969, &#39;open&#39;: 289.32000732421875, &#39;volume&#39;: 8013800}, {&#39;adjclose&#39;: 277.6325988769531, &#39;close&#39;: 279.2900085449219, &#39;date&#39;: 1538659800, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 286.25, &#39;low&#39;: 276.17999267578125, &#39;open&#39;: 285.2699890136719, &#39;volume&#39;: 9780500}, {&#39;adjclose&#39;: 268.2585144042969, &#39;close&#39;: 269.8599853515625, &#39;date&#39;: 1538746200, &#39;formatted_date&#39;: &#39;2018-10-05&#39;, &#39;high&#39;: 280.79998779296875, &#39;low&#39;: 267.5400085449219, &#39;open&#39;: 278.2900085449219, &#39;volume&#39;: 10665900}, {&#39;adjclose&#39;: 264.1927795410156, &#39;close&#39;: 265.7699890136719, &#39;date&#39;: 1539005400, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 271.1600036621094, &#39;low&#39;: 260.0799865722656, &#39;open&#39;: 266.5, &#39;volume&#39;: 10215300}, {&#39;adjclose&#39;: 263.9642028808594, &#39;close&#39;: 265.5400085449219, &#39;date&#39;: 1539091800, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 268.760009765625, &#39;low&#39;: 262.79998779296875, &#39;open&#39;: 264.94000244140625, &#39;volume&#39;: 6837500}, {&#39;adjclose&#39;: 244.23196411132812, &#39;close&#39;: 245.69000244140625, &#39;date&#39;: 1539178200, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 263.1099853515625, &#39;low&#39;: 245.60000610351562, &#39;open&#39;: 261.260009765625, &#39;volume&#39;: 17123500}, {&#39;adjclose&#39;: 233.73463439941406, &#39;close&#39;: 235.1300048828125, &#39;date&#39;: 1539264600, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 247.55999755859375, &#39;low&#39;: 234.25999450683594, &#39;open&#39;: 242.1699981689453, &#39;volume&#39;: 18135900}, {&#39;adjclose&#39;: 245.07691955566406, &#39;close&#39;: 246.5399932861328, &#39;date&#39;: 1539351000, &#39;formatted_date&#39;: &#39;2018-10-12&#39;, &#39;high&#39;: 249.5399932861328, &#39;low&#39;: 239.64999389648438, &#39;open&#39;: 245.50999450683594, &#39;volume&#39;: 15205900}, {&#39;adjclose&#39;: 233.983154296875, &#39;close&#39;: 235.3800048828125, &#39;date&#39;: 1539610200, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 246.0, &#39;low&#39;: 235.33999633789062, &#39;open&#39;: 246.0, &#39;volume&#39;: 11244000}, {&#39;adjclose&#39;: 244.37115478515625, &#39;close&#39;: 245.8300018310547, &#39;date&#39;: 1539696600, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 246.27999877929688, &#39;low&#39;: 237.94000244140625, &#39;open&#39;: 239.92999267578125, &#39;volume&#39;: 10217800}, {&#39;adjclose&#39;: 241.61756896972656, &#39;close&#39;: 243.05999755859375, &#39;date&#39;: 1539783000, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 249.8800048828125, &#39;low&#39;: 241.0800018310547, &#39;open&#39;: 248.33999633789062, &#39;volume&#39;: 8241700}, {&#39;adjclose&#39;: 238.10853576660156, &#39;close&#39;: 239.52999877929688, &#39;date&#39;: 1539869400, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 247.41000366210938, &#39;low&#39;: 237.08999633789062, &#39;open&#39;: 245.86000061035156, &#39;volume&#39;: 13100500}, {&#39;adjclose&#39;: 227.8100128173828, &#39;close&#39;: 229.1699981689453, &#39;date&#39;: 1539955800, &#39;formatted_date&#39;: &#39;2018-10-19&#39;, &#39;high&#39;: 242.5500030517578, &#39;low&#39;: 227.6999969482422, &#39;open&#39;: 241.75999450683594, &#39;volume&#39;: 15340200}, {&#39;adjclose&#39;: 229.8478546142578, &#39;close&#39;: 231.22000122070312, &#39;date&#39;: 1540215000, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 235.32000732421875, &#39;low&#39;: 227.07000732421875, &#39;open&#39;: 231.27999877929688, &#39;volume&#39;: 9221100}, {&#39;adjclose&#39;: 219.74813842773438, &#39;close&#39;: 221.05999755859375, &#39;date&#39;: 1540301400, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 224.19000244140625, &#39;low&#39;: 216.7100067138672, &#39;open&#39;: 220.42999267578125, &#39;volume&#39;: 15660900}, {&#39;adjclose&#39;: 198.2266082763672, &#39;close&#39;: 199.41000366210938, &#39;date&#39;: 1540387800, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 221.38999938964844, &#39;low&#39;: 198.85000610351562, &#39;open&#39;: 219.50999450683594, &#39;volume&#39;: 22107200}, {&#39;adjclose&#39;: 206.6065673828125, &#39;close&#39;: 207.83999633789062, &#39;date&#39;: 1540474200, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 209.75, &#39;low&#39;: 193.67999267578125, &#39;open&#39;: 195.47000122070312, &#39;volume&#39;: 23793000}, {&#39;adjclose&#39;: 197.11325073242188, &#39;close&#39;: 198.2899932861328, &#39;date&#39;: 1540560600, &#39;formatted_date&#39;: &#39;2018-10-26&#39;, &#39;high&#39;: 204.83999633789062, &#39;low&#39;: 193.1199951171875, &#39;open&#39;: 198.30999755859375, &#39;volume&#39;: 16619600}, {&#39;adjclose&#39;: 184.51844787597656, &#39;close&#39;: 185.6199951171875, &#39;date&#39;: 1540819800, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 204.1300048828125, &#39;low&#39;: 176.00999450683594, &#39;open&#39;: 203.99000549316406, &#39;volume&#39;: 18950400}, {&#39;adjclose&#39;: 201.79530334472656, &#39;close&#39;: 203.0, &#39;date&#39;: 1540906200, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 203.39999389648438, &#39;low&#39;: 185.6199951171875, &#39;open&#39;: 186.5500030517578, &#39;volume&#39;: 20179800}, {&#39;adjclose&#39;: 209.578857421875, &#39;close&#39;: 210.8300018310547, &#39;date&#39;: 1540992600, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 212.58999633789062, &#39;low&#39;: 204.00999450683594, &#39;open&#39;: 209.64999389648438, &#39;volume&#39;: 18644300}, {&#39;adjclose&#39;: 216.8156280517578, &#39;close&#39;: 218.11000061035156, &#39;date&#39;: 1541079000, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 218.49000549316406, &#39;low&#39;: 207.19000244140625, &#39;open&#39;: 212.3000030517578, &#39;volume&#39;: 14163200}, {&#39;adjclose&#39;: 213.64456176757812, &#39;close&#39;: 214.9199981689453, &#39;date&#39;: 1541165400, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 222.0, &#39;low&#39;: 210.2100067138672, &#39;open&#39;: 217.72999572753906, &#39;volume&#39;: 11324000}, {&#39;adjclose&#39;: 210.51327514648438, &#39;close&#39;: 211.77000427246094, &#39;date&#39;: 1541428200, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 215.3300018310547, &#39;low&#39;: 205.27999877929688, &#39;open&#39;: 214.38999938964844, &#39;volume&#39;: 9483300}, {&#39;adjclose&#39;: 209.8074951171875, &#39;close&#39;: 211.05999755859375, &#39;date&#39;: 1541514600, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 214.85000610351562, &#39;low&#39;: 209.55999755859375, &#39;open&#39;: 211.4499969482422, &#39;volume&#39;: 7475300}, {&#39;adjclose&#39;: 212.52127075195312, &#39;close&#39;: 213.7899932861328, &#39;date&#39;: 1541601000, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 217.41000366210938, &#39;low&#39;: 211.17999267578125, &#39;open&#39;: 213.75, &#39;volume&#39;: 12095300}, {&#39;adjclose&#39;: 204.767578125, &#39;close&#39;: 205.99000549316406, &#39;date&#39;: 1541687400, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 211.42999267578125, &#39;low&#39;: 203.8300018310547, &#39;open&#39;: 211.39999389648438, &#39;volume&#39;: 12783800}, {&#39;adjclose&#39;: 204.449462890625, &#39;close&#39;: 205.6699981689453, &#39;date&#39;: 1541773800, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 209.32000732421875, &#39;low&#39;: 201.0399932861328, &#39;open&#39;: 202.39999389648438, &#39;volume&#39;: 10331000}, {&#39;adjclose&#39;: 188.41519165039062, &#39;close&#39;: 189.5399932861328, &#39;date&#39;: 1542033000, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 202.8699951171875, &#39;low&#39;: 188.66000366210938, &#39;open&#39;: 201.97999572753906, &#39;volume&#39;: 15427900}, {&#39;adjclose&#39;: 198.12721252441406, &#39;close&#39;: 199.30999755859375, &#39;date&#39;: 1542119400, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 204.2100067138672, &#39;low&#39;: 193.24000549316406, &#39;open&#39;: 193.49000549316406, &#39;volume&#39;: 16117800}, {&#39;adjclose&#39;: 196.01979064941406, &#39;close&#39;: 197.19000244140625, &#39;date&#39;: 1542205800, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 206.8800048828125, &#39;low&#39;: 192.8300018310547, &#39;open&#39;: 206.3000030517578, &#39;volume&#39;: 13164500}, {&#39;adjclose&#39;: 201.1889190673828, &#39;close&#39;: 202.38999938964844, &#39;date&#39;: 1542292200, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 205.3000030517578, &#39;low&#39;: 195.5, &#39;open&#39;: 196.9499969482422, &#39;volume&#39;: 21017700}, {&#39;adjclose&#39;: 163.4541778564453, &#39;close&#39;: 164.42999267578125, &#39;date&#39;: 1542378600, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 170.66000366210938, &#39;low&#39;: 161.61000061035156, &#39;open&#39;: 163.32000732421875, &#39;volume&#39;: 49088000}, {&#39;adjclose&#39;: 143.84127807617188, &#39;close&#39;: 144.6999969482422, &#39;date&#39;: 1542637800, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 161.82000732421875, &#39;low&#39;: 144.6300048828125, &#39;open&#39;: 161.7899932861328, &#39;volume&#39;: 42445500}, {&#39;adjclose&#39;: 148.19529724121094, &#39;close&#39;: 149.0800018310547, &#39;date&#39;: 1542724200, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 154.25999450683594, &#39;low&#39;: 133.30999755859375, &#39;open&#39;: 134.05999755859375, &#39;volume&#39;: 42300800}, {&#39;adjclose&#39;: 143.8512420654297, &#39;close&#39;: 144.7100067138672, &#39;date&#39;: 1542810600, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 155.3000030517578, &#39;low&#39;: 143.61000061035156, &#39;open&#39;: 154.6199951171875, &#39;volume&#39;: 25637400}, {&#39;adjclose&#39;: 144.13951110839844, &#39;close&#39;: 145.0, &#39;date&#39;: 1542983400, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 149.58999633789062, &#39;low&#39;: 142.7899932861328, &#39;open&#39;: 143.30999755859375, &#39;volume&#39;: 10299200}, {&#39;adjclose&#39;: 152.14173889160156, &#39;close&#39;: 153.0500030517578, &#39;date&#39;: 1543242600, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 153.47000122070312, &#39;low&#39;: 146.55999755859375, &#39;open&#39;: 149.88999938964844, &#39;volume&#39;: 20370800}, {&#39;adjclose&#39;: 152.8177032470703, &#39;close&#39;: 153.72999572753906, &#39;date&#39;: 1543329000, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 157.00999450683594, &#39;low&#39;: 150.5500030517578, &#39;open&#39;: 152.0, &#39;volume&#39;: 18451500}, {&#39;adjclose&#39;: 159.12010192871094, &#39;close&#39;: 160.07000732421875, &#39;date&#39;: 1543415400, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 160.27999877929688, &#39;low&#39;: 153.1300048828125, &#39;open&#39;: 158.47999572753906, &#39;volume&#39;: 20113100}, {&#39;adjclose&#39;: 156.58267211914062, &#39;close&#39;: 157.36000061035156, &#39;date&#39;: 1543501800, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 161.5, &#39;low&#39;: 156.13999938964844, &#39;open&#39;: 160.0, &#39;volume&#39;: 13729300}, {&#39;adjclose&#39;: 162.6226806640625, &#39;close&#39;: 163.42999267578125, &#39;date&#39;: 1543588200, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 163.86000061035156, &#39;low&#39;: 155.72000122070312, &#39;open&#39;: 157.75, &#39;volume&#39;: 18239100}, {&#39;adjclose&#39;: 169.20004272460938, &#39;close&#39;: 170.0399932861328, &#39;date&#39;: 1543847400, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 174.67999267578125, &#39;low&#39;: 167.33999633789062, &#39;open&#39;: 172.60000610351562, &#39;volume&#39;: 22270100}, {&#39;adjclose&#39;: 156.3339080810547, &#39;close&#39;: 157.11000061035156, &#39;date&#39;: 1543933800, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 168.44000244140625, &#39;low&#39;: 156.5, &#39;open&#39;: 168.24000549316406, &#39;volume&#39;: 20302800}, {&#39;adjclose&#39;: 157.50807189941406, &#39;close&#39;: 158.2899932861328, &#39;date&#39;: 1544106600, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 158.49000549316406, &#39;low&#39;: 150.80999755859375, &#39;open&#39;: 151.44000244140625, &#39;volume&#39;: 17307700}, {&#39;adjclose&#39;: 146.88084411621094, &#39;close&#39;: 147.61000061035156, &#39;date&#39;: 1544193000, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 158.8699951171875, &#39;low&#39;: 145.6199951171875, &#39;open&#39;: 158.4600067138672, &#39;volume&#39;: 17041900}, {&#39;adjclose&#39;: 151.10984802246094, &#39;close&#39;: 151.86000061035156, &#39;date&#39;: 1544452200, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 152.86000061035156, &#39;low&#39;: 145.64999389648438, &#39;open&#39;: 145.8000030517578, &#39;volume&#39;: 15736800}, {&#39;adjclose&#39;: 147.45797729492188, &#39;close&#39;: 148.19000244140625, &#39;date&#39;: 1544538600, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 155.88999938964844, &#39;low&#39;: 145.0, &#39;open&#39;: 155.55999755859375, &#39;volume&#39;: 16797800}, {&#39;adjclose&#39;: 148.1644744873047, &#39;close&#39;: 148.89999389648438, &#39;date&#39;: 1544625000, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 152.77999877929688, &#39;low&#39;: 144.82000732421875, &#39;open&#39;: 148.4199981689453, &#39;volume&#39;: 16353400}, {&#39;adjclose&#39;: 148.1544952392578, &#39;close&#39;: 148.88999938964844, &#39;date&#39;: 1544711400, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 153.3800048828125, &#39;low&#39;: 147.44000244140625, &#39;open&#39;: 150.7899932861328, &#39;volume&#39;: 11784600}, {&#39;adjclose&#39;: 145.7265625, &#39;close&#39;: 146.4499969482422, &#39;date&#39;: 1544797800, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 150.58999633789062, &#39;low&#39;: 145.5, &#39;open&#39;: 147.2100067138672, &#39;volume&#39;: 11795500}, {&#39;adjclose&#39;: 142.8707275390625, &#39;close&#39;: 143.5800018310547, &#39;date&#39;: 1545057000, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 148.14999389648438, &#39;low&#39;: 141.24000549316406, &#39;open&#39;: 145.24000549316406, &#39;volume&#39;: 16571700}, {&#39;adjclose&#39;: 146.21414184570312, &#39;close&#39;: 146.94000244140625, &#39;date&#39;: 1545143400, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 150.3300018310547, &#39;low&#39;: 144.25, &#39;open&#39;: 145.35000610351562, &#39;volume&#39;: 14109300}, {&#39;adjclose&#39;: 137.8258056640625, &#39;close&#39;: 138.50999450683594, &#39;date&#39;: 1545229800, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 147.74000549316406, &#39;low&#39;: 136.42999267578125, &#39;open&#39;: 145.5800018310547, &#39;volume&#39;: 18634100}, {&#39;adjclose&#39;: 134.43263244628906, &#39;close&#39;: 135.10000610351562, &#39;date&#39;: 1545316200, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 141.8000030517578, &#39;low&#39;: 132.69000244140625, &#39;open&#39;: 138.1699981689453, &#39;volume&#39;: 18739700}, {&#39;adjclose&#39;: 128.9299774169922, &#39;close&#39;: 129.57000732421875, &#39;date&#39;: 1545402600, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 137.5, &#39;low&#39;: 128.4600067138672, &#39;open&#39;: 136.1699981689453, &#39;volume&#39;: 21593500}, {&#39;adjclose&#39;: 126.45225524902344, &#39;close&#39;: 127.08000183105469, &#39;date&#39;: 1545661800, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 129.97999572753906, &#39;low&#39;: 124.5, &#39;open&#39;: 126.48999786376953, &#39;volume&#39;: 11596000}, {&#39;adjclose&#39;: 132.44253540039062, &#39;close&#39;: 133.10000610351562, &#39;date&#39;: 1545834600, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 133.13999938964844, &#39;low&#39;: 124.45999908447266, &#39;open&#39;: 128.94000244140625, &#39;volume&#39;: 17377500}, {&#39;adjclose&#39;: 130.5220489501953, &#39;close&#39;: 131.1699981689453, &#39;date&#39;: 1545921000, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 132.3800048828125, &#39;low&#39;: 125.18000030517578, &#39;open&#39;: 130.99000549316406, &#39;volume&#39;: 15926100}, {&#39;adjclose&#39;: 132.98980712890625, &#39;close&#39;: 133.64999389648438, &#39;date&#39;: 1546007400, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 137.38999938964844, &#39;low&#39;: 130.30999755859375, &#39;open&#39;: 132.0, &#39;volume&#39;: 15718200}, {&#39;adjclose&#39;: 132.8405303955078, &#39;close&#39;: 133.5, &#39;date&#39;: 1546266600, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 136.7100067138672, &#39;low&#39;: 132.25999450683594, &#39;open&#39;: 135.39999389648438, &#39;volume&#39;: 11628500}, {&#39;adjclose&#39;: 135.54710388183594, &#39;close&#39;: 136.22000122070312, &#39;date&#39;: 1546439400, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 138.47999572753906, &#39;low&#39;: 130.0500030517578, &#39;open&#39;: 130.63999938964844, &#39;volume&#39;: 12718800}, {&#39;adjclose&#39;: 127.35774993896484, &#39;close&#39;: 127.98999786376953, &#39;date&#39;: 1546525800, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 135.16000366210938, &#39;low&#39;: 127.69000244140625, &#39;open&#39;: 133.7899932861328, &#39;volume&#39;: 17638800}, {&#39;adjclose&#39;: 135.5172576904297, &#39;close&#39;: 136.19000244140625, &#39;date&#39;: 1546612200, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 137.72999572753906, &#39;low&#39;: 129.6999969482422, &#39;open&#39;: 130.94000244140625, &#39;volume&#39;: 14640500}, {&#39;adjclose&#39;: 142.69161987304688, &#39;close&#39;: 143.39999389648438, &#39;date&#39;: 1546871400, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 144.88999938964844, &#39;low&#39;: 136.42999267578125, &#39;open&#39;: 138.5, &#39;volume&#39;: 17729000}, {&#39;adjclose&#39;: 139.1392822265625, &#39;close&#39;: 139.8300018310547, &#39;date&#39;: 1546957800, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 146.77999877929688, &#39;low&#39;: 136.89999389648438, &#39;open&#39;: 146.69000244140625, &#39;volume&#39;: 19650400}, {&#39;adjclose&#39;: 141.87570190429688, &#39;close&#39;: 142.5800018310547, &#39;date&#39;: 1547044200, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 144.49000549316406, &#39;low&#39;: 139.86000061035156, &#39;open&#39;: 141.89999389648438, &#39;volume&#39;: 15431500}, {&#39;adjclose&#39;: 144.51260375976562, &#39;close&#39;: 145.22999572753906, &#39;date&#39;: 1547130600, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 145.5800018310547, &#39;low&#39;: 139.36000061035156, &#39;open&#39;: 141.8000030517578, &#39;volume&#39;: 13078900}, {&#39;adjclose&#39;: 148.0948028564453, &#39;close&#39;: 148.8300018310547, &#39;date&#39;: 1547217000, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 149.75, &#39;low&#39;: 143.2100067138672, &#39;open&#39;: 144.3300018310547, &#39;volume&#39;: 21869100}, {&#39;adjclose&#39;: 149.6968536376953, &#39;close&#39;: 150.44000244140625, &#39;date&#39;: 1547476200, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 151.4600067138672, &#39;low&#39;: 145.77000427246094, &#39;open&#39;: 146.72000122070312, &#39;volume&#39;: 18254200}, {&#39;adjclose&#39;: 149.12966918945312, &#39;close&#39;: 149.8699951171875, &#39;date&#39;: 1547562600, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 153.35000610351562, &#39;low&#39;: 149.1300048828125, &#39;open&#39;: 151.75999450683594, &#39;volume&#39;: 15425300}, {&#39;adjclose&#39;: 148.10476684570312, &#39;close&#39;: 148.83999633789062, &#39;date&#39;: 1547649000, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 152.3000030517578, &#39;low&#39;: 148.6199951171875, &#39;open&#39;: 150.97000122070312, &#39;volume&#39;: 11752600}, {&#39;adjclose&#39;: 150.97056579589844, &#39;close&#39;: 151.72000122070312, &#39;date&#39;: 1547735400, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 153.3300018310547, &#39;low&#39;: 146.41000366210938, &#39;open&#39;: 147.50999450683594, &#39;volume&#39;: 12335900}, {&#39;adjclose&#39;: 156.15480041503906, &#39;close&#39;: 156.92999267578125, &#39;date&#39;: 1547821800, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 157.97999572753906, &#39;low&#39;: 151.64999389648438, &#39;open&#39;: 153.72999572753906, &#39;volume&#39;: 16283400}, {&#39;adjclose&#39;: 148.03512573242188, &#39;close&#39;: 148.77000427246094, &#39;date&#39;: 1548167400, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 156.17999267578125, &#39;low&#39;: 147.5500030517578, &#39;open&#39;: 155.7100067138672, &#39;volume&#39;: 16538800}, {&#39;adjclose&#39;: 148.55252075195312, &#39;close&#39;: 149.2899932861328, &#39;date&#39;: 1548253800, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 154.5800018310547, &#39;low&#39;: 148.02999877929688, &#39;open&#39;: 151.0, &#39;volume&#39;: 14775500}, {&#39;adjclose&#39;: 157.06028747558594, &#39;close&#39;: 157.83999633789062, &#39;date&#39;: 1548340200, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 158.5500030517578, &#39;low&#39;: 152.50999450683594, &#39;open&#39;: 152.6999969482422, &#39;volume&#39;: 17724300}, {&#39;adjclose&#39;: 159.35888671875, &#39;close&#39;: 160.14999389648438, &#39;date&#39;: 1548426600, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 160.8800048828125, &#39;low&#39;: 151.3000030517578, &#39;open&#39;: 155.44000244140625, &#39;volume&#39;: 28864300}, {&#39;adjclose&#39;: 137.32826232910156, &#39;close&#39;: 138.00999450683594, &#39;date&#39;: 1548685800, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 141.63999938964844, &#39;low&#39;: 131.0, &#39;open&#39;: 136.5500030517578, &#39;volume&#39;: 62788200}, {&#39;adjclose&#39;: 130.94993591308594, &#39;close&#39;: 131.60000610351562, &#39;date&#39;: 1548772200, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 138.10000610351562, &#39;low&#39;: 131.00999450683594, &#39;open&#39;: 136.14999389648438, &#39;volume&#39;: 28848300}, {&#39;adjclose&#39;: 136.71131896972656, &#39;close&#39;: 137.38999938964844, &#39;date&#39;: 1548858600, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 137.97000122070312, &#39;low&#39;: 131.4600067138672, &#39;open&#39;: 134.6699981689453, &#39;volume&#39;: 24355700}, {&#39;adjclose&#39;: 143.03990173339844, &#39;close&#39;: 143.75, &#39;date&#39;: 1548945000, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 145.19000244140625, &#39;low&#39;: 136.3800048828125, &#39;open&#39;: 137.25999450683594, &#39;volume&#39;: 21071300}, {&#39;adjclose&#39;: 144.01507568359375, &#39;close&#39;: 144.72999572753906, &#39;date&#39;: 1549031400, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 146.7899932861328, &#39;low&#39;: 142.5800018310547, &#39;open&#39;: 144.5, &#39;volume&#39;: 15626200}, {&#39;adjclose&#39;: 148.4430694580078, &#39;close&#39;: 149.17999267578125, &#39;date&#39;: 1549290600, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 150.67999267578125, &#39;low&#39;: 144.47999572753906, &#39;open&#39;: 145.3699951171875, &#39;volume&#39;: 13214800}, {&#39;adjclose&#39;: 149.2092742919922, &#39;close&#39;: 149.9499969482422, &#39;date&#39;: 1549377000, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 151.42999267578125, &#39;low&#39;: 148.3000030517578, &#39;open&#39;: 149.66000366210938, &#39;volume&#39;: 13560600}, {&#39;adjclose&#39;: 152.2442169189453, &#39;close&#39;: 153.0, &#39;date&#39;: 1549463400, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 155.60000610351562, &#39;low&#39;: 151.07000732421875, &#39;open&#39;: 151.2899932861328, &#39;volume&#39;: 17561600}, {&#39;adjclose&#39;: 146.6917724609375, &#39;close&#39;: 147.4199981689453, &#39;date&#39;: 1549549800, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 151.22000122070312, &#39;low&#39;: 145.69000244140625, &#39;open&#39;: 151.1300048828125, &#39;volume&#39;: 15928000}, {&#39;adjclose&#39;: 147.4380645751953, &#39;close&#39;: 148.1699981689453, &#39;date&#39;: 1549636200, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 148.60000610351562, &#39;low&#39;: 144.1300048828125, &#39;open&#39;: 144.7100067138672, &#39;volume&#39;: 11540100}, {&#39;adjclose&#39;: 145.7265625, &#39;close&#39;: 146.4499969482422, &#39;date&#39;: 1549895400, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 148.5800018310547, &#39;low&#39;: 144.5, &#39;open&#39;: 146.38999938964844, &#39;volume&#39;: 12379500}, {&#39;adjclose&#39;: 150.42324829101562, &#39;close&#39;: 151.1699981689453, &#39;date&#39;: 1549981800, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 151.8000030517578, &#39;low&#39;: 147.4199981689453, &#39;open&#39;: 148.0, &#39;volume&#39;: 14776500}, {&#39;adjclose&#39;: 152.12481689453125, &#39;close&#39;: 152.8800048828125, &#39;date&#39;: 1550068200, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 155.8300018310547, &#39;low&#39;: 151.80999755859375, &#39;open&#39;: 152.36000061035156, &#39;volume&#39;: 15134300}, {&#39;adjclose&#39;: 153.7666473388672, &#39;close&#39;: 154.52999877929688, &#39;date&#39;: 1550154600, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 155.6699981689453, &#39;low&#39;: 151.10000610351562, &#39;open&#39;: 152.83999633789062, &#39;volume&#39;: 20681600}, {&#39;adjclose&#39;: 156.56277465820312, &#39;close&#39;: 157.33999633789062, &#39;date&#39;: 1550241000, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 163.8699951171875, &#39;low&#39;: 156.4199981689453, &#39;open&#39;: 162.9499969482422, &#39;volume&#39;: 37918700}, {&#39;adjclose&#39;: 155.86622619628906, &#39;close&#39;: 156.63999938964844, &#39;date&#39;: 1550586600, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 159.88999938964844, &#39;low&#39;: 156.13999938964844, &#39;open&#39;: 156.91000366210938, &#39;volume&#39;: 13797300}, {&#39;adjclose&#39;: 157.76678466796875, &#39;close&#39;: 158.5500030517578, &#39;date&#39;: 1550673000, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 161.25999450683594, &#39;low&#39;: 157.3699951171875, &#39;open&#39;: 157.82000732421875, &#39;volume&#39;: 13524700}, {&#39;adjclose&#39;: 155.00051879882812, &#39;close&#39;: 155.77000427246094, &#39;date&#39;: 1550759400, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 160.0500030517578, &#39;low&#39;: 155.17999267578125, &#39;open&#39;: 159.05999755859375, &#39;volume&#39;: 11213700}, {&#39;adjclose&#39;: 158.4036407470703, &#39;close&#39;: 159.19000244140625, &#39;date&#39;: 1550845800, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 159.9499969482422, &#39;low&#39;: 157.30999755859375, &#39;open&#39;: 157.86000061035156, &#39;volume&#39;: 10043500}, {&#39;adjclose&#39;: 157.90611267089844, &#39;close&#39;: 158.69000244140625, &#39;date&#39;: 1551105000, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 165.27999877929688, &#39;low&#39;: 158.33999633789062, &#39;open&#39;: 162.55999755859375, &#39;volume&#39;: 16400500}, {&#39;adjclose&#39;: 156.32395935058594, &#39;close&#39;: 157.10000610351562, &#39;date&#39;: 1551191400, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 160.75999450683594, &#39;low&#39;: 155.75, &#39;open&#39;: 158.5, &#39;volume&#39;: 12211600}, {&#39;adjclose&#39;: 154.64230346679688, &#39;close&#39;: 155.41000366210938, &#39;date&#39;: 1551277800, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 157.58999633789062, &#39;low&#39;: 153.11000061035156, &#39;open&#39;: 156.52000427246094, &#39;volume&#39;: 12506400}, {&#39;adjclose&#39;: 153.6561737060547, &#39;close&#39;: 154.25999450683594, &#39;date&#39;: 1551364200, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 155.89999389648438, &#39;low&#39;: 153.36000061035156, &#39;open&#39;: 155.0, &#39;volume&#39;: 8123600}, {&#39;adjclose&#39;: 155.8376007080078, &#39;close&#39;: 156.4499969482422, &#39;date&#39;: 1551450600, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 158.14999389648438, &#39;low&#39;: 153.9199981689453, &#39;open&#39;: 156.27000427246094, &#39;volume&#39;: 8929700}, {&#39;adjclose&#39;: 156.16632080078125, &#39;close&#39;: 156.77999877929688, &#39;date&#39;: 1551709800, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 158.9199981689453, &#39;low&#39;: 154.5, &#39;open&#39;: 158.0, &#39;volume&#39;: 10249800}, {&#39;adjclose&#39;: 155.9073486328125, &#39;close&#39;: 156.52000427246094, &#39;date&#39;: 1551796200, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 158.05999755859375, &#39;low&#39;: 153.9600067138672, &#39;open&#39;: 156.14999389648438, &#39;volume&#39;: 9073100}, {&#39;adjclose&#39;: 151.454833984375, &#39;close&#39;: 152.0500030517578, &#39;date&#39;: 1551882600, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 156.5, &#39;low&#39;: 151.94000244140625, &#39;open&#39;: 156.16000366210938, &#39;volume&#39;: 10088100}, {&#39;adjclose&#39;: 148.67575073242188, &#39;close&#39;: 149.25999450683594, &#39;date&#39;: 1551969000, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 151.49000549316406, &#39;low&#39;: 147.39999389648438, &#39;open&#39;: 151.10000610351562, &#39;volume&#39;: 11252600}, {&#39;adjclose&#39;: 150.0503387451172, &#39;close&#39;: 150.63999938964844, &#39;date&#39;: 1552055400, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 151.07000732421875, &#39;low&#39;: 144.8000030517578, &#39;open&#39;: 145.66000366210938, &#39;volume&#39;: 10560400}, {&#39;adjclose&#39;: 160.50926208496094, &#39;close&#39;: 161.13999938964844, &#39;date&#39;: 1552311000, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 162.05999755859375, &#39;low&#39;: 149.69000244140625, &#39;open&#39;: 151.58999633789062, &#39;volume&#39;: 21493200}, {&#39;adjclose&#39;: 161.88385009765625, &#39;close&#39;: 162.52000427246094, &#39;date&#39;: 1552397400, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 164.38999938964844, &#39;low&#39;: 159.19000244140625, &#39;open&#39;: 162.25999450683594, &#39;volume&#39;: 14489400}, {&#39;adjclose&#39;: 167.95999145507812, &#39;close&#39;: 168.6199951171875, &#39;date&#39;: 1552483800, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 169.8000030517578, &#39;low&#39;: 163.72999572753906, &#39;open&#39;: 164.02999877929688, &#39;volume&#39;: 19222500}, {&#39;adjclose&#39;: 164.91195678710938, &#39;close&#39;: 165.55999755859375, &#39;date&#39;: 1552570200, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 169.47000122070312, &#39;low&#39;: 165.25, &#39;open&#39;: 168.99000549316406, &#39;volume&#39;: 12984600}, {&#39;adjclose&#39;: 169.1453094482422, &#39;close&#39;: 169.80999755859375, &#39;date&#39;: 1552656600, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 171.52999877929688, &#39;low&#39;: 167.16000366210938, &#39;open&#39;: 167.3000030517578, &#39;volume&#39;: 16537100}, {&#39;adjclose&#39;: 168.2886962890625, &#39;close&#39;: 168.9499969482422, &#39;date&#39;: 1552915800, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 173.25, &#39;low&#39;: 167.86000061035156, &#39;open&#39;: 171.0800018310547, &#39;volume&#39;: 12174800}, {&#39;adjclose&#39;: 175.022216796875, &#39;close&#39;: 175.7100067138672, &#39;date&#39;: 1553002200, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 177.5, &#39;low&#39;: 172.0800018310547, &#39;open&#39;: 172.75999450683594, &#39;volume&#39;: 21374300}, {&#39;adjclose&#39;: 173.71734619140625, &#39;close&#39;: 174.39999389648438, &#39;date&#39;: 1553088600, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 179.02999877929688, &#39;low&#39;: 173.0, &#39;open&#39;: 176.8800048828125, &#39;volume&#39;: 17978700}, {&#39;adjclose&#39;: 183.2200164794922, &#39;close&#39;: 183.94000244140625, &#39;date&#39;: 1553175000, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 185.0, &#39;low&#39;: 175.1300048828125, &#39;open&#39;: 175.3300018310547, &#39;volume&#39;: 20607800}, {&#39;adjclose&#39;: 176.80520629882812, &#39;close&#39;: 177.5, &#39;date&#39;: 1553261400, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 184.8000030517578, &#39;low&#39;: 176.94000244140625, &#39;open&#39;: 182.83999633789062, &#39;volume&#39;: 18691100}, {&#39;adjclose&#39;: 173.09976196289062, &#39;close&#39;: 173.77999877929688, &#39;date&#39;: 1553520600, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 178.4499969482422, &#39;low&#39;: 171.11000061035156, &#39;open&#39;: 175.86000061035156, &#39;volume&#39;: 13130300}, {&#39;adjclose&#39;: 176.17767333984375, &#39;close&#39;: 176.8699951171875, &#39;date&#39;: 1553607000, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 181.75, &#39;low&#39;: 174.60000610351562, &#39;open&#39;: 179.49000549316406, &#39;volume&#39;: 17587700}, {&#39;adjclose&#39;: 175.8091278076172, &#39;close&#39;: 176.5, &#39;date&#39;: 1553693400, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 179.77000427246094, &#39;low&#39;: 173.6999969482422, &#39;open&#39;: 177.89999389648438, &#39;volume&#39;: 11859300}, {&#39;adjclose&#39;: 176.5561981201172, &#39;close&#39;: 177.25, &#39;date&#39;: 1553779800, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 179.89999389648438, &#39;low&#39;: 175.11000061035156, &#39;open&#39;: 177.5500030517578, &#39;volume&#39;: 12006600}, {&#39;adjclose&#39;: 178.85716247558594, &#39;close&#39;: 179.55999755859375, &#39;date&#39;: 1553866200, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 180.5399932861328, &#39;low&#39;: 177.91000366210938, &#39;open&#39;: 179.94000244140625, &#39;volume&#39;: 11422400}, {&#39;adjclose&#39;: 181.56649780273438, &#39;close&#39;: 182.27999877929688, &#39;date&#39;: 1554125400, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 183.5, &#39;low&#39;: 180.3699951171875, &#39;open&#39;: 183.25999450683594, &#39;volume&#39;: 12095600}, {&#39;adjclose&#39;: 182.28366088867188, &#39;close&#39;: 183.0, &#39;date&#39;: 1554211800, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 184.7899932861328, &#39;low&#39;: 181.52000427246094, &#39;open&#39;: 183.25, &#39;volume&#39;: 11023000}, {&#39;adjclose&#39;: 187.88169860839844, &#39;close&#39;: 188.6199951171875, &#39;date&#39;: 1554298200, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 191.0, &#39;low&#39;: 184.8000030517578, &#39;open&#39;: 185.0, &#39;volume&#39;: 19719500}, {&#39;adjclose&#39;: 187.52310180664062, &#39;close&#39;: 188.25999450683594, &#39;date&#39;: 1554384600, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 189.97000122070312, &#39;low&#39;: 185.72999572753906, &#39;open&#39;: 188.0, &#39;volume&#39;: 11434400}, {&#39;adjclose&#39;: 190.20254516601562, &#39;close&#39;: 190.9499969482422, &#39;date&#39;: 1554471000, &#39;formatted_date&#39;: &#39;2019-04-05&#39;, &#39;high&#39;: 191.64999389648438, &#39;low&#39;: 188.52999877929688, &#39;open&#39;: 190.0, &#39;volume&#39;: 12043600}, {&#39;adjclose&#39;: 191.03927612304688, &#39;close&#39;: 191.7899932861328, &#39;date&#39;: 1554730200, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 192.8000030517578, &#39;low&#39;: 188.75, &#39;open&#39;: 189.72000122070312, &#39;volume&#39;: 10604800}, {&#39;adjclose&#39;: 188.51919555664062, &#39;close&#39;: 189.25999450683594, &#39;date&#39;: 1554816600, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 190.88999938964844, &#39;low&#39;: 187.55999755859375, &#39;open&#39;: 190.44000244140625, &#39;volume&#39;: 10999300}, {&#39;adjclose&#39;: 191.3480682373047, &#39;close&#39;: 192.10000610351562, &#39;date&#39;: 1554903000, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 193.13999938964844, &#39;low&#39;: 189.0500030517578, &#39;open&#39;: 189.22999572753906, &#39;volume&#39;: 11119300}, {&#39;adjclose&#39;: 190.7902374267578, &#39;close&#39;: 191.5399932861328, &#39;date&#39;: 1554989400, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 193.47000122070312, &#39;low&#39;: 189.5500030517578, &#39;open&#39;: 192.1999969482422, &#39;volume&#39;: 9365000}, {&#39;adjclose&#39;: 189.2662353515625, &#39;close&#39;: 190.00999450683594, &#39;date&#39;: 1555075800, &#39;formatted_date&#39;: &#39;2019-04-12&#39;, &#39;high&#39;: 193.25999450683594, &#39;low&#39;: 189.66000366210938, &#39;open&#39;: 193.10000610351562, &#39;volume&#39;: 11792700}, {&#39;adjclose&#39;: 183.97702026367188, &#39;close&#39;: 184.6999969482422, &#39;date&#39;: 1555335000, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 189.89999389648438, &#39;low&#39;: 183.10000610351562, &#39;open&#39;: 189.6999969482422, &#39;volume&#39;: 11002300}, {&#39;adjclose&#39;: 187.4733123779297, &#39;close&#39;: 188.2100067138672, &#39;date&#39;: 1555421400, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 188.97000122070312, &#39;low&#39;: 184.9600067138672, &#39;open&#39;: 186.27999877929688, &#39;volume&#39;: 9874100}, {&#39;adjclose&#39;: 186.556884765625, &#39;close&#39;: 187.2899932861328, &#39;date&#39;: 1555507800, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 190.4600067138672, &#39;low&#39;: 186.38999938964844, &#39;open&#39;: 189.6199951171875, &#39;volume&#39;: 8775100}, {&#39;adjclose&#39;: 185.57077026367188, &#39;close&#39;: 186.3000030517578, &#39;date&#39;: 1555594200, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 188.92999267578125, &#39;low&#39;: 185.17999267578125, &#39;open&#39;: 187.55999755859375, &#39;volume&#39;: 9524700}, {&#39;adjclose&#39;: 187.73226928710938, &#39;close&#39;: 188.47000122070312, &#39;date&#39;: 1555939800, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 189.10000610351562, &#39;low&#39;: 184.0800018310547, &#39;open&#39;: 185.35000610351562, &#39;volume&#39;: 6998400}, {&#39;adjclose&#39;: 189.9236602783203, &#39;close&#39;: 190.6699981689453, &#39;date&#39;: 1556026200, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 191.92999267578125, &#39;low&#39;: 188.61000061035156, &#39;open&#39;: 189.0, &#39;volume&#39;: 8671400}, {&#39;adjclose&#39;: 190.4217071533203, &#39;close&#39;: 191.1699981689453, &#39;date&#39;: 1556112600, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 192.80999755859375, &#39;low&#39;: 188.63999938964844, &#39;open&#39;: 191.08999633789062, &#39;volume&#39;: 7955100}, {&#39;adjclose&#39;: 186.1783905029297, &#39;close&#39;: 186.91000366210938, &#39;date&#39;: 1556199000, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 190.4499969482422, &#39;low&#39;: 183.6999969482422, &#39;open&#39;: 189.5500030517578, &#39;volume&#39;: 12482400}, {&#39;adjclose&#39;: 177.3928985595703, &#39;close&#39;: 178.08999633789062, &#39;date&#39;: 1556285400, &#39;formatted_date&#39;: &#39;2019-04-26&#39;, &#39;high&#39;: 180.88999938964844, &#39;low&#39;: 173.3000030517578, &#39;open&#39;: 180.7100067138672, &#39;volume&#39;: 21724700}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: -14400}}} . currency_daily . 展开查看 {&#39;CNY=X&#39;: {&#39;currency&#39;: &#39;CNY&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 991263600, &#39;formatted_date&#39;: &#39;2001-05-30&#39;}, &#39;instrumentType&#39;: &#39;CURRENCY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 6.336999893188477, &#39;close&#39;: 6.336999893188477, &#39;date&#39;: 1525042800, &#39;formatted_date&#39;: &#39;2018-04-29&#39;, &#39;high&#39;: 6.336400032043457, &#39;low&#39;: 6.323299884796143, &#39;open&#39;: 6.334799766540527, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.332099914550781, &#39;close&#39;: 6.332099914550781, &#39;date&#39;: 1525129200, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 6.332399845123291, &#39;low&#39;: 6.323299884796143, &#39;open&#39;: 6.3317999839782715, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.332300186157227, &#39;close&#39;: 6.332300186157227, &#39;date&#39;: 1525215600, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 6.363999843597412, &#39;low&#39;: 6.323299884796143, &#39;open&#39;: 6.323299884796143, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.361499786376953, &#39;close&#39;: 6.361499786376953, &#39;date&#39;: 1525302000, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 6.369100093841553, &#39;low&#39;: 6.337299823760986, &#39;open&#39;: 6.352499961853027, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.352700233459473, &#39;close&#39;: 6.352700233459473, &#39;date&#39;: 1525388400, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 6.364999771118164, &#39;low&#39;: 6.334700107574463, &#39;open&#39;: 6.343699932098389, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.361700057983398, &#39;close&#39;: 6.361700057983398, &#39;date&#39;: 1525647600, &#39;formatted_date&#39;: &#39;2018-05-06&#39;, &#39;high&#39;: 6.367000102996826, &#39;low&#39;: 6.345799922943115, &#39;open&#39;: 6.352700233459473, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.366099834442139, &#39;close&#39;: 6.366099834442139, &#39;date&#39;: 1525734000, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 6.369699954986572, &#39;low&#39;: 6.350100040435791, &#39;open&#39;: 6.366300106048584, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.369699954986572, &#39;close&#39;: 6.369699954986572, &#39;date&#39;: 1525820400, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 6.381199836730957, &#39;low&#39;: 6.35830020904541, &#39;open&#39;: 6.3607001304626465, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.361400127410889, &#39;close&#39;: 6.361400127410889, &#39;date&#39;: 1525906800, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 6.3678998947143555, &#39;low&#39;: 6.333000183105469, &#39;open&#39;: 6.352399826049805, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.348199844360352, &#39;close&#39;: 6.348199844360352, &#39;date&#39;: 1525993200, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 6.348199844360352, &#39;low&#39;: 6.321499824523926, &#39;open&#39;: 6.339200019836426, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.333099842071533, &#39;close&#39;: 6.333099842071533, &#39;date&#39;: 1526252400, &#39;formatted_date&#39;: &#39;2018-05-13&#39;, &#39;high&#39;: 6.340199947357178, &#39;low&#39;: 6.324100017547607, &#39;open&#39;: 6.324100017547607, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.3383002281188965, &#39;close&#39;: 6.3383002281188965, &#39;date&#39;: 1526338800, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 6.378300189971924, &#39;low&#39;: 6.3292999267578125, &#39;open&#39;: 6.3292999267578125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.376800060272217, &#39;close&#39;: 6.376800060272217, &#39;date&#39;: 1526425200, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 6.379000186920166, &#39;low&#39;: 6.35860013961792, &#39;open&#39;: 6.367800235748291, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.370500087738037, &#39;close&#39;: 6.370500087738037, &#39;date&#39;: 1526511600, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 6.370500087738037, &#39;low&#39;: 6.352200031280518, &#39;open&#39;: 6.361499786376953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.366199970245361, &#39;close&#39;: 6.366199970245361, &#39;date&#39;: 1526598000, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 6.379799842834473, &#39;low&#39;: 6.3572001457214355, &#39;open&#39;: 6.3572001457214355, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.382800102233887, &#39;close&#39;: 6.382800102233887, &#39;date&#39;: 1526857200, &#39;formatted_date&#39;: &#39;2018-05-20&#39;, &#39;high&#39;: 6.395100116729736, &#39;low&#39;: 6.3719000816345215, &#39;open&#39;: 6.383200168609619, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.381100177764893, &#39;close&#39;: 6.381100177764893, &#39;date&#39;: 1526943600, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 6.382500171661377, &#39;low&#39;: 6.3628997802734375, &#39;open&#39;: 6.38070011138916, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.364200115203857, &#39;close&#39;: 6.364200115203857, &#39;date&#39;: 1527030000, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 6.390600204467773, &#39;low&#39;: 6.363999843597412, &#39;open&#39;: 6.3649001121521, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.388800144195557, &#39;close&#39;: 6.388800144195557, &#39;date&#39;: 1527116400, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 6.394000053405762, &#39;low&#39;: 6.370999813079834, &#39;open&#39;: 6.378499984741211, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.376399993896484, &#39;close&#39;: 6.376399993896484, &#39;date&#39;: 1527202800, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 6.392000198364258, &#39;low&#39;: 6.375699996948242, &#39;open&#39;: 6.378600120544434, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.368599891662598, &#39;close&#39;: 6.368599891662598, &#39;date&#39;: 1527462000, &#39;formatted_date&#39;: &#39;2018-05-27&#39;, &#39;high&#39;: 6.39900016784668, &#39;low&#39;: 6.355800151824951, &#39;open&#39;: 6.368500232696533, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.3983001708984375, &#39;close&#39;: 6.3983001708984375, &#39;date&#39;: 1527548400, &#39;formatted_date&#39;: &#39;2018-05-28&#39;, &#39;high&#39;: 6.421599864959717, &#39;low&#39;: 6.3892998695373535, &#39;open&#39;: 6.3892998695373535, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.416600227355957, &#39;close&#39;: 6.416600227355957, &#39;date&#39;: 1527634800, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 6.432600021362305, &#39;low&#39;: 6.407599925994873, &#39;open&#39;: 6.407599925994873, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.418000221252441, &#39;close&#39;: 6.418000221252441, &#39;date&#39;: 1527721200, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 6.418000221252441, &#39;low&#39;: 6.394800186157227, &#39;open&#39;: 6.408999919891357, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.409299850463867, &#39;close&#39;: 6.409299850463867, &#39;date&#39;: 1527807600, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 6.420899868011475, &#39;low&#39;: 6.39769983291626, &#39;open&#39;: 6.400300025939941, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.419400215148926, &#39;close&#39;: 6.419400215148926, &#39;date&#39;: 1528066800, &#39;formatted_date&#39;: &#39;2018-06-03&#39;, &#39;high&#39;: 6.421999931335449, &#39;low&#39;: 6.397600173950195, &#39;open&#39;: 6.410399913787842, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.4070000648498535, &#39;close&#39;: 6.4070000648498535, &#39;date&#39;: 1528153200, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 6.412300109863281, &#39;low&#39;: 6.3942999839782715, &#39;open&#39;: 6.407100200653076, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.40500020980835, &#39;close&#39;: 6.40500020980835, &#39;date&#39;: 1528239600, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 6.405600070953369, &#39;low&#39;: 6.377600193023682, &#39;open&#39;: 6.404900074005127, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.387899875640869, &#39;close&#39;: 6.387899875640869, &#39;date&#39;: 1528326000, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 6.395299911499023, &#39;low&#39;: 6.381800174713135, &#39;open&#39;: 6.38700008392334, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.392099857330322, &#39;close&#39;: 6.392099857330322, &#39;date&#39;: 1528412400, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 6.412199974060059, &#39;low&#39;: 6.386099815368652, &#39;open&#39;: 6.392000198364258, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.405700206756592, &#39;close&#39;: 6.405700206756592, &#39;date&#39;: 1528671600, &#39;formatted_date&#39;: &#39;2018-06-10&#39;, &#39;high&#39;: 6.407800197601318, &#39;low&#39;: 6.391499996185303, &#39;open&#39;: 6.396699905395508, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.391600131988525, &#39;close&#39;: 6.391600131988525, &#39;date&#39;: 1528758000, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 6.4079999923706055, &#39;low&#39;: 6.391600131988525, &#39;open&#39;: 6.3917999267578125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.4004998207092285, &#39;close&#39;: 6.4004998207092285, &#39;date&#39;: 1528844400, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 6.407299995422363, &#39;low&#39;: 6.3902997970581055, &#39;open&#39;: 6.402299880981445, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.397299766540527, &#39;close&#39;: 6.397299766540527, &#39;date&#39;: 1528930800, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 6.403800010681152, &#39;low&#39;: 6.38070011138916, &#39;open&#39;: 6.398099899291992, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.4045000076293945, &#39;close&#39;: 6.4045000076293945, &#39;date&#39;: 1529017200, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 6.438899993896484, &#39;low&#39;: 6.395999908447266, &#39;open&#39;: 6.399899959564209, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.433000087738037, &#39;close&#39;: 6.433000087738037, &#39;date&#39;: 1529276400, &#39;formatted_date&#39;: &#39;2018-06-17&#39;, &#39;high&#39;: 6.442800045013428, &#39;low&#39;: 6.427599906921387, &#39;open&#39;: 6.4293999671936035, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.438799858093262, &#39;close&#39;: 6.438799858093262, &#39;date&#39;: 1529362800, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 6.48390007019043, &#39;low&#39;: 6.4293999671936035, &#39;open&#39;: 6.4293999671936035, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.485499858856201, &#39;close&#39;: 6.485499858856201, &#39;date&#39;: 1529449200, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 6.488699913024902, &#39;low&#39;: 6.4604997634887695, &#39;open&#39;: 6.48769998550415, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.47160005569458, &#39;close&#39;: 6.47160005569458, &#39;date&#39;: 1529535600, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 6.50540018081665, &#39;low&#39;: 6.4704999923706055, &#39;open&#39;: 6.471499919891357, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.492099761962891, &#39;close&#39;: 6.492099761962891, &#39;date&#39;: 1529622000, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 6.5065999031066895, &#39;low&#39;: 6.487599849700928, &#39;open&#39;: 6.492099761962891, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.504300117492676, &#39;close&#39;: 6.504300117492676, &#39;date&#39;: 1529881200, &#39;formatted_date&#39;: &#39;2018-06-24&#39;, &#39;high&#39;: 6.543499946594238, &#39;low&#39;: 6.504000186920166, &#39;open&#39;: 6.504000186920166, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.539000034332275, &#39;close&#39;: 6.539000034332275, &#39;date&#39;: 1529967600, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 6.581699848175049, &#39;low&#39;: 6.525300025939941, &#39;open&#39;: 6.53000020980835, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.5782999992370605, &#39;close&#39;: 6.5782999992370605, &#39;date&#39;: 1530054000, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 6.613800048828125, &#39;low&#39;: 6.569300174713135, &#39;open&#39;: 6.569300174713135, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.601900100708008, &#39;close&#39;: 6.601900100708008, &#39;date&#39;: 1530140400, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 6.630499839782715, &#39;low&#39;: 6.596499919891357, &#39;open&#39;: 6.600800037384033, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.627399921417236, &#39;close&#39;: 6.627399921417236, &#39;date&#39;: 1530226800, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 6.639100074768066, &#39;low&#39;: 6.597799777984619, &#39;open&#39;: 6.626399993896484, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.624300003051758, &#39;close&#39;: 6.624300003051758, &#39;date&#39;: 1530486000, &#39;formatted_date&#39;: &#39;2018-07-01&#39;, &#39;high&#39;: 6.668799877166748, &#39;low&#39;: 6.621600151062012, &#39;open&#39;: 6.621799945831299, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.6666998863220215, &#39;close&#39;: 6.6666998863220215, &#39;date&#39;: 1530572400, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 6.714300155639648, &#39;low&#39;: 6.635499954223633, &#39;open&#39;: 6.667500019073486, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.640999794006348, &#39;close&#39;: 6.640999794006348, &#39;date&#39;: 1530658800, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 6.643400192260742, &#39;low&#39;: 6.597799777984619, &#39;open&#39;: 6.640200138092041, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.63129997253418, &#39;close&#39;: 6.63129997253418, &#39;date&#39;: 1530745200, &#39;formatted_date&#39;: &#39;2018-07-04&#39;, &#39;high&#39;: 6.644700050354004, &#39;low&#39;: 6.623600006103516, &#39;open&#39;: 6.63129997253418, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.6367998123168945, &#39;close&#39;: 6.6367998123168945, &#39;date&#39;: 1530831600, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 6.66480016708374, &#39;low&#39;: 6.631999969482422, &#39;open&#39;: 6.637800216674805, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.639200210571289, &#39;close&#39;: 6.639200210571289, &#39;date&#39;: 1531090800, &#39;formatted_date&#39;: &#39;2018-07-08&#39;, &#39;high&#39;: 6.6427998542785645, &#39;low&#39;: 6.600100040435791, &#39;open&#39;: 6.641200065612793, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.615200042724609, &#39;close&#39;: 6.615200042724609, &#39;date&#39;: 1531177200, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 6.638000011444092, &#39;low&#39;: 6.590400218963623, &#39;open&#39;: 6.615600109100342, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.631400108337402, &#39;close&#39;: 6.631400108337402, &#39;date&#39;: 1531263600, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 6.679500102996826, &#39;low&#39;: 6.628900051116943, &#39;open&#39;: 6.629700183868408, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.682799816131592, &#39;close&#39;: 6.682799816131592, &#39;date&#39;: 1531350000, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 6.701300144195557, &#39;low&#39;: 6.6529998779296875, &#39;open&#39;: 6.68120002746582, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.665900230407715, &#39;close&#39;: 6.665900230407715, &#39;date&#39;: 1531436400, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 6.704400062561035, &#39;low&#39;: 6.6508002281188965, &#39;open&#39;: 6.666100025177002, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.6946001052856445, &#39;close&#39;: 6.6946001052856445, &#39;date&#39;: 1531695600, &#39;formatted_date&#39;: &#39;2018-07-15&#39;, &#39;high&#39;: 6.70419979095459, &#39;low&#39;: 6.661399841308594, &#39;open&#39;: 6.694200038909912, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.6915998458862305, &#39;close&#39;: 6.6915998458862305, &#39;date&#39;: 1531782000, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 6.705900192260742, &#39;low&#39;: 6.665500164031982, &#39;open&#39;: 6.681099891662598, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7067999839782715, &#39;close&#39;: 6.7067999839782715, &#39;date&#39;: 1531868400, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 6.723400115966797, &#39;low&#39;: 6.687399864196777, &#39;open&#39;: 6.706999778747559, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.717700004577637, &#39;close&#39;: 6.717700004577637, &#39;date&#39;: 1531954800, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 6.782899856567383, &#39;low&#39;: 6.714399814605713, &#39;open&#39;: 6.717100143432617, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.771699905395508, &#39;close&#39;: 6.771699905395508, &#39;date&#39;: 1532041200, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 6.809199810028076, &#39;low&#39;: 6.765200138092041, &#39;open&#39;: 6.772900104522705, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7581000328063965, &#39;close&#39;: 6.7581000328063965, &#39;date&#39;: 1532300400, &#39;formatted_date&#39;: &#39;2018-07-22&#39;, &#39;high&#39;: 6.796899795532227, &#39;low&#39;: 6.741700172424316, &#39;open&#39;: 6.758299827575684, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.791999816894531, &#39;close&#39;: 6.791999816894531, &#39;date&#39;: 1532386800, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 6.825300216674805, &#39;low&#39;: 6.7829999923706055, &#39;open&#39;: 6.7829999923706055, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.790500164031982, &#39;close&#39;: 6.790500164031982, &#39;date&#39;: 1532473200, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 6.804599761962891, &#39;low&#39;: 6.747200012207031, &#39;open&#39;: 6.781499862670898, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.768700122833252, &#39;close&#39;: 6.768700122833252, &#39;date&#39;: 1532559600, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 6.791800022125244, &#39;low&#39;: 6.731800079345703, &#39;open&#39;: 6.759699821472168, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.782800197601318, &#39;close&#39;: 6.782800197601318, &#39;date&#39;: 1532646000, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 6.838399887084961, &#39;low&#39;: 6.782800197601318, &#39;open&#39;: 6.782800197601318, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.812699794769287, &#39;close&#39;: 6.812699794769287, &#39;date&#39;: 1532905200, &#39;formatted_date&#39;: &#39;2018-07-29&#39;, &#39;high&#39;: 6.838699817657471, &#39;low&#39;: 6.803699970245361, &#39;open&#39;: 6.803699970245361, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.814899921417236, &#39;close&#39;: 6.814899921417236, &#39;date&#39;: 1532991600, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 6.840099811553955, &#39;low&#39;: 6.804999828338623, &#39;open&#39;: 6.804999828338623, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.811699867248535, &#39;close&#39;: 6.811699867248535, &#39;date&#39;: 1533078000, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 6.830100059509277, &#39;low&#39;: 6.784299850463867, &#39;open&#39;: 6.811800003051758, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8225998878479, &#39;close&#39;: 6.8225998878479, &#39;date&#39;: 1533164400, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 6.847799777984619, &#39;low&#39;: 6.794899940490723, &#39;open&#39;: 6.822299957275391, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.832799911499023, &#39;close&#39;: 6.832799911499023, &#39;date&#39;: 1533250800, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 6.8927001953125, &#39;low&#39;: 6.826300144195557, &#39;open&#39;: 6.832799911499023, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.833199977874756, &#39;close&#39;: 6.833199977874756, &#39;date&#39;: 1533510000, &#39;formatted_date&#39;: &#39;2018-08-05&#39;, &#39;high&#39;: 6.8531999588012695, &#39;low&#39;: 6.811399936676025, &#39;open&#39;: 6.833399772644043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.854100227355957, &#39;close&#39;: 6.854100227355957, &#39;date&#39;: 1533596400, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 6.861199855804443, &#39;low&#39;: 6.817699909210205, &#39;open&#39;: 6.85290002822876, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.833600044250488, &#39;close&#39;: 6.833600044250488, &#39;date&#39;: 1533682800, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 6.841000080108643, &#39;low&#39;: 6.797999858856201, &#39;open&#39;: 6.834499835968018, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.83519983291626, &#39;close&#39;: 6.83519983291626, &#39;date&#39;: 1533769200, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 6.837900161743164, &#39;low&#39;: 6.807000160217285, &#39;open&#39;: 6.834799766540527, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.817200183868408, &#39;close&#39;: 6.817200183868408, &#39;date&#39;: 1533855600, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 6.860000133514404, &#39;low&#39;: 6.815499782562256, &#39;open&#39;: 6.817200183868408, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.846199989318848, &#39;close&#39;: 6.846199989318848, &#39;date&#39;: 1534114800, &#39;formatted_date&#39;: &#39;2018-08-12&#39;, &#39;high&#39;: 6.8902997970581055, &#39;low&#39;: 6.837200164794922, &#39;open&#39;: 6.837200164794922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.889400005340576, &#39;close&#39;: 6.889400005340576, &#39;date&#39;: 1534201200, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 6.892499923706055, &#39;low&#39;: 6.872000217437744, &#39;open&#39;: 6.890100002288818, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.884699821472168, &#39;close&#39;: 6.884699821472168, &#39;date&#39;: 1534287600, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 6.933800220489502, &#39;low&#39;: 6.881700038909912, &#39;open&#39;: 6.884699821472168, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.933800220489502, &#39;close&#39;: 6.933800220489502, &#39;date&#39;: 1534374000, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 6.933800220489502, &#39;low&#39;: 6.880000114440918, &#39;open&#39;: 6.924799919128418, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.881499767303467, &#39;close&#39;: 6.881499767303467, &#39;date&#39;: 1534460400, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 6.892899990081787, &#39;low&#39;: 6.858500003814697, &#39;open&#39;: 6.872499942779541, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8765997886657715, &#39;close&#39;: 6.8765997886657715, &#39;date&#39;: 1534719600, &#39;formatted_date&#39;: &#39;2018-08-19&#39;, &#39;high&#39;: 6.8780999183654785, &#39;low&#39;: 6.8394999504089355, &#39;open&#39;: 6.876500129699707, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.856800079345703, &#39;close&#39;: 6.856800079345703, &#39;date&#39;: 1534806000, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 6.85699987411499, &#39;low&#39;: 6.8242998123168945, &#39;open&#39;: 6.847799777984619, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8454999923706055, &#39;close&#39;: 6.8454999923706055, &#39;date&#39;: 1534892400, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 6.848299980163574, &#39;low&#39;: 6.8302998542785645, &#39;open&#39;: 6.845900058746338, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.843200206756592, &#39;close&#39;: 6.843200206756592, &#39;date&#39;: 1534978800, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 6.877600193023682, &#39;low&#39;: 6.8308000564575195, &#39;open&#39;: 6.841000080108643, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.877500057220459, &#39;close&#39;: 6.877500057220459, &#39;date&#39;: 1535065200, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 6.889699935913086, &#39;low&#39;: 6.806399822235107, &#39;open&#39;: 6.876699924468994, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.800600051879883, &#39;close&#39;: 6.800600051879883, &#39;date&#39;: 1535324400, &#39;formatted_date&#39;: &#39;2018-08-26&#39;, &#39;high&#39;: 6.825900077819824, &#39;low&#39;: 6.792900085449219, &#39;open&#39;: 6.796999931335449, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.813300132751465, &#39;close&#39;: 6.813300132751465, &#39;date&#39;: 1535410800, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 6.821400165557861, &#39;low&#39;: 6.7906999588012695, &#39;open&#39;: 6.810500144958496, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.804200172424316, &#39;close&#39;: 6.804200172424316, &#39;date&#39;: 1535497200, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 6.828400135040283, &#39;low&#39;: 6.799499988555908, &#39;open&#39;: 6.802299976348877, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.818699836730957, &#39;close&#39;: 6.818699836730957, &#39;date&#39;: 1535583600, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 6.843999862670898, &#39;low&#39;: 6.817399978637695, &#39;open&#39;: 6.818699836730957, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.843100070953369, &#39;close&#39;: 6.843100070953369, &#39;date&#39;: 1535670000, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 6.8454999923706055, &#39;low&#39;: 6.825099945068359, &#39;open&#39;: 6.843200206756592, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.83459997177124, &#39;close&#39;: 6.83459997177124, &#39;date&#39;: 1535929200, &#39;formatted_date&#39;: &#39;2018-09-02&#39;, &#39;high&#39;: 6.841400146484375, &#39;low&#39;: 6.81279993057251, &#39;open&#39;: 6.832399845123291, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8221001625061035, &#39;close&#39;: 6.8221001625061035, &#39;date&#39;: 1536015600, &#39;formatted_date&#39;: &#39;2018-09-03&#39;, &#39;high&#39;: 6.844099998474121, &#39;low&#39;: 6.797500133514404, &#39;open&#39;: 6.822800159454346, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.84250020980835, &#39;close&#39;: 6.84250020980835, &#39;date&#39;: 1536102000, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 6.8445000648498535, &#39;low&#39;: 6.826600074768066, &#39;open&#39;: 6.841400146484375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.829999923706055, &#39;close&#39;: 6.829999923706055, &#39;date&#39;: 1536188400, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 6.840099811553955, &#39;low&#39;: 6.818299770355225, &#39;open&#39;: 6.829599857330322, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.834400177001953, &#39;close&#39;: 6.834400177001953, &#39;date&#39;: 1536274800, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 6.849100112915039, &#39;low&#39;: 6.826200008392334, &#39;open&#39;: 6.8358001708984375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.839099884033203, &#39;close&#39;: 6.839099884033203, &#39;date&#39;: 1536534000, &#39;formatted_date&#39;: &#39;2018-09-09&#39;, &#39;high&#39;: 6.865300178527832, &#39;low&#39;: 6.833799839019775, &#39;open&#39;: 6.833799839019775, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.855299949645996, &#39;close&#39;: 6.855299949645996, &#39;date&#39;: 1536620400, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 6.877500057220459, &#39;low&#39;: 6.8520002365112305, &#39;open&#39;: 6.855100154876709, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8744001388549805, &#39;close&#39;: 6.8744001388549805, &#39;date&#39;: 1536706800, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 6.878300189971924, &#39;low&#39;: 6.851500034332275, &#39;open&#39;: 6.872499942779541, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.859899997711182, &#39;close&#39;: 6.859899997711182, &#39;date&#39;: 1536793200, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 6.862599849700928, &#39;low&#39;: 6.8242998123168945, &#39;open&#39;: 6.859899997711182, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.842899799346924, &#39;close&#39;: 6.842899799346924, &#39;date&#39;: 1536879600, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 6.867400169372559, &#39;low&#39;: 6.837100028991699, &#39;open&#39;: 6.843599796295166, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.865600109100342, &#39;close&#39;: 6.865600109100342, &#39;date&#39;: 1537138800, &#39;formatted_date&#39;: &#39;2018-09-16&#39;, &#39;high&#39;: 6.877500057220459, &#39;low&#39;: 6.855100154876709, &#39;open&#39;: 6.865799903869629, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.855500221252441, &#39;close&#39;: 6.855500221252441, &#39;date&#39;: 1537225200, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 6.877799987792969, &#39;low&#39;: 6.853400230407715, &#39;open&#39;: 6.855899810791016, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.860199928283691, &#39;close&#39;: 6.860199928283691, &#39;date&#39;: 1537311600, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 6.864999771118164, &#39;low&#39;: 6.846499919891357, &#39;open&#39;: 6.861000061035156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.84689998626709, &#39;close&#39;: 6.84689998626709, &#39;date&#39;: 1537398000, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 6.8566999435424805, &#39;low&#39;: 6.831999778747559, &#39;open&#39;: 6.847099781036377, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.845900058746338, &#39;close&#39;: 6.845900058746338, &#39;date&#39;: 1537484400, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 6.860499858856201, &#39;low&#39;: 6.829500198364258, &#39;open&#39;: 6.845799922943115, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8566999435424805, &#39;close&#39;: 6.8566999435424805, &#39;date&#39;: 1537743600, &#39;formatted_date&#39;: &#39;2018-09-23&#39;, &#39;high&#39;: 6.85860013961792, &#39;low&#39;: 6.842299938201904, &#39;open&#39;: 6.856100082397461, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8734002113342285, &#39;close&#39;: 6.8734002113342285, &#39;date&#39;: 1537830000, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 6.879799842834473, &#39;low&#39;: 6.85230016708374, &#39;open&#39;: 6.8734002113342285, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.866300106048584, &#39;close&#39;: 6.866300106048584, &#39;date&#39;: 1537916400, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 6.878900051116943, &#39;low&#39;: 6.86359977722168, &#39;open&#39;: 6.866300106048584, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.876100063323975, &#39;close&#39;: 6.876100063323975, &#39;date&#39;: 1538002800, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 6.890999794006348, &#39;low&#39;: 6.8684000968933105, &#39;open&#39;: 6.877500057220459, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.880300045013428, &#39;close&#39;: 6.880300045013428, &#39;date&#39;: 1538089200, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 6.889400005340576, &#39;low&#39;: 6.862500190734863, &#39;open&#39;: 6.880300045013428, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8678998947143555, &#39;close&#39;: 6.8678998947143555, &#39;date&#39;: 1538348400, &#39;formatted_date&#39;: &#39;2018-09-30&#39;, &#39;high&#39;: 6.868000030517578, &#39;low&#39;: 6.85890007019043, &#39;open&#39;: 6.868000030517578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8678998947143555, &#39;close&#39;: 6.8678998947143555, &#39;date&#39;: 1538434800, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 6.8678998947143555, &#39;low&#39;: 6.85890007019043, &#39;open&#39;: 6.85890007019043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8678998947143555, &#39;close&#39;: 6.8678998947143555, &#39;date&#39;: 1538521200, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 6.868000030517578, &#39;low&#39;: 6.85890007019043, &#39;open&#39;: 6.85890007019043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.867800235748291, &#39;close&#39;: 6.867800235748291, &#39;date&#39;: 1538607600, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 6.8678998947143555, &#39;low&#39;: 6.85890007019043, &#39;open&#39;: 6.85890007019043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8678998947143555, &#39;close&#39;: 6.8678998947143555, &#39;date&#39;: 1538694000, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 6.8678998947143555, &#39;low&#39;: 6.8678998947143555, &#39;open&#39;: 6.8678998947143555, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.85890007019043, &#39;close&#39;: 6.85890007019043, &#39;date&#39;: 1538953200, &#39;formatted_date&#39;: &#39;2018-10-07&#39;, &#39;high&#39;: 6.932300090789795, &#39;low&#39;: 6.85890007019043, &#39;open&#39;: 6.85890007019043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.929800033569336, &#39;close&#39;: 6.929800033569336, &#39;date&#39;: 1539039600, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 6.929800033569336, &#39;low&#39;: 6.904099941253662, &#39;open&#39;: 6.92080020904541, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.921800136566162, &#39;close&#39;: 6.921800136566162, &#39;date&#39;: 1539126000, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 6.925099849700928, &#39;low&#39;: 6.907299995422363, &#39;open&#39;: 6.912799835205078, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.923299789428711, &#39;close&#39;: 6.923299789428711, &#39;date&#39;: 1539212400, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 6.93179988861084, &#39;low&#39;: 6.885799884796143, &#39;open&#39;: 6.914299964904785, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.888599872589111, &#39;close&#39;: 6.888599872589111, &#39;date&#39;: 1539298800, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 6.927999973297119, &#39;low&#39;: 6.888599872589111, &#39;open&#39;: 6.888599872589111, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.921199798583984, &#39;close&#39;: 6.921199798583984, &#39;date&#39;: 1539558000, &#39;formatted_date&#39;: &#39;2018-10-14&#39;, &#39;high&#39;: 6.929100036621094, &#39;low&#39;: 6.90880012512207, &#39;open&#39;: 6.921500205993652, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.915900230407715, &#39;close&#39;: 6.915900230407715, &#39;date&#39;: 1539644400, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 6.925000190734863, &#39;low&#39;: 6.901299953460693, &#39;open&#39;: 6.915800094604492, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.910999774932861, &#39;close&#39;: 6.910999774932861, &#39;date&#39;: 1539730800, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 6.928599834442139, &#39;low&#39;: 6.9019999504089355, &#39;open&#39;: 6.9019999504089355, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.926300048828125, &#39;close&#39;: 6.926300048828125, &#39;date&#39;: 1539817200, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 6.939899921417236, &#39;low&#39;: 6.924900054931641, &#39;open&#39;: 6.926499843597412, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.936699867248535, &#39;close&#39;: 6.936699867248535, &#39;date&#39;: 1539903600, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 6.940299987792969, &#39;low&#39;: 6.917399883270264, &#39;open&#39;: 6.936699867248535, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.928599834442139, &#39;close&#39;: 6.928599834442139, &#39;date&#39;: 1540162800, &#39;formatted_date&#39;: &#39;2018-10-21&#39;, &#39;high&#39;: 6.946499824523926, &#39;low&#39;: 6.924200057983398, &#39;open&#39;: 6.928699970245361, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.946499824523926, &#39;close&#39;: 6.946499824523926, &#39;date&#39;: 1540249200, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 6.946499824523926, &#39;low&#39;: 6.92609977722168, &#39;open&#39;: 6.9375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.937399864196777, &#39;close&#39;: 6.937399864196777, &#39;date&#39;: 1540335600, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 6.943399906158447, &#39;low&#39;: 6.927700042724609, &#39;open&#39;: 6.937399864196777, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.942999839782715, &#39;close&#39;: 6.942999839782715, &#39;date&#39;: 1540422000, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 6.950900077819824, &#39;low&#39;: 6.9328999519348145, &#39;open&#39;: 6.934000015258789, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.947999954223633, &#39;close&#39;: 6.947999954223633, &#39;date&#39;: 1540508400, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 6.963200092315674, &#39;low&#39;: 6.933499813079834, &#39;open&#39;: 6.939000129699707, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.942500114440918, &#39;close&#39;: 6.942500114440918, &#39;date&#39;: 1540771200, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 6.962299823760986, &#39;low&#39;: 6.9415998458862305, &#39;open&#39;: 6.942500114440918, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.951900005340576, &#39;close&#39;: 6.951900005340576, &#39;date&#39;: 1540857600, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 6.969900131225586, &#39;low&#39;: 6.951900005340576, &#39;open&#39;: 6.951900005340576, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.966300010681152, &#39;close&#39;: 6.966300010681152, &#39;date&#39;: 1540944000, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 6.976099967956543, &#39;low&#39;: 6.9567999839782715, &#39;open&#39;: 6.96619987487793, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.974699974060059, &#39;close&#39;: 6.974699974060059, &#39;date&#39;: 1541030400, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 6.974800109863281, &#39;low&#39;: 6.922399997711182, &#39;open&#39;: 6.974699974060059, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.922399997711182, &#39;close&#39;: 6.922399997711182, &#39;date&#39;: 1541116800, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 6.931000232696533, &#39;low&#39;: 6.867599964141846, &#39;open&#39;: 6.922399997711182, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.889900207519531, &#39;close&#39;: 6.889900207519531, &#39;date&#39;: 1541376000, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 6.9293999671936035, &#39;low&#39;: 6.889699935913086, &#39;open&#39;: 6.889900207519531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.924799919128418, &#39;close&#39;: 6.924799919128418, &#39;date&#39;: 1541462400, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 6.9274001121521, &#39;low&#39;: 6.904200077056885, &#39;open&#39;: 6.924799919128418, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.918499946594238, &#39;close&#39;: 6.918499946594238, &#39;date&#39;: 1541548800, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 6.940000057220459, &#39;low&#39;: 6.904699802398682, &#39;open&#39;: 6.918499946594238, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.909999847412109, &#39;close&#39;: 6.909999847412109, &#39;date&#39;: 1541635200, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 6.935999870300293, &#39;low&#39;: 6.909999847412109, &#39;open&#39;: 6.909999847412109, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.933499813079834, &#39;close&#39;: 6.933499813079834, &#39;date&#39;: 1541721600, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 6.955999851226807, &#39;low&#39;: 6.933000087738037, &#39;open&#39;: 6.933199882507324, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.955900192260742, &#39;close&#39;: 6.955900192260742, &#39;date&#39;: 1541980800, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 6.9679999351501465, &#39;low&#39;: 6.946800231933594, &#39;open&#39;: 6.955900192260742, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.962500095367432, &#39;close&#39;: 6.962500095367432, &#39;date&#39;: 1542067200, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 6.968800067901611, &#39;low&#39;: 6.943699836730957, &#39;open&#39;: 6.962500095367432, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.9552001953125, &#39;close&#39;: 6.9552001953125, &#39;date&#39;: 1542153600, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 6.95550012588501, &#39;low&#39;: 6.940499782562256, &#39;open&#39;: 6.9552001953125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.94950008392334, &#39;close&#39;: 6.94950008392334, &#39;date&#39;: 1542240000, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 6.9496002197265625, &#39;low&#39;: 6.928999900817871, &#39;open&#39;: 6.94950008392334, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.938199996948242, &#39;close&#39;: 6.938199996948242, &#39;date&#39;: 1542326400, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 6.951000213623047, &#39;low&#39;: 6.929800033569336, &#39;open&#39;: 6.938000202178955, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.936999797821045, &#39;close&#39;: 6.936999797821045, &#39;date&#39;: 1542585600, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 6.943999767303467, &#39;low&#39;: 6.927999973297119, &#39;open&#39;: 6.936999797821045, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.940999984741211, &#39;close&#39;: 6.940999984741211, &#39;date&#39;: 1542672000, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 6.945799827575684, &#39;low&#39;: 6.927299976348877, &#39;open&#39;: 6.940999984741211, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.944399833679199, &#39;close&#39;: 6.944399833679199, &#39;date&#39;: 1542758400, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 6.948400020599365, &#39;low&#39;: 6.921000003814697, &#39;open&#39;: 6.944399833679199, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.926199913024902, &#39;close&#39;: 6.926199913024902, &#39;date&#39;: 1542844800, &#39;formatted_date&#39;: &#39;2018-11-22&#39;, &#39;high&#39;: 6.936999797821045, &#39;low&#39;: 6.916999816894531, &#39;open&#39;: 6.926300048828125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.931000232696533, &#39;close&#39;: 6.931000232696533, &#39;date&#39;: 1542931200, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 6.948299884796143, &#39;low&#39;: 6.921999931335449, &#39;open&#39;: 6.93120002746582, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.947500228881836, &#39;close&#39;: 6.947500228881836, &#39;date&#39;: 1543190400, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 6.947500228881836, &#39;low&#39;: 6.926400184631348, &#39;open&#39;: 6.947500228881836, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.930799961090088, &#39;close&#39;: 6.930799961090088, &#39;date&#39;: 1543276800, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 6.952499866485596, &#39;low&#39;: 6.930799961090088, &#39;open&#39;: 6.930799961090088, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.9506001472473145, &#39;close&#39;: 6.9506001472473145, &#39;date&#39;: 1543363200, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 6.956200122833252, &#39;low&#39;: 6.942699909210205, &#39;open&#39;: 6.950500011444092, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.952899932861328, &#39;close&#39;: 6.952899932861328, &#39;date&#39;: 1543449600, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 6.952899932861328, &#39;low&#39;: 6.92710018157959, &#39;open&#39;: 6.952899932861328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.941500186920166, &#39;close&#39;: 6.941500186920166, &#39;date&#39;: 1543536000, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 6.958899974822998, &#39;low&#39;: 6.932499885559082, &#39;open&#39;: 6.9415998458862305, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.958000183105469, &#39;close&#39;: 6.958000183105469, &#39;date&#39;: 1543795200, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 6.959499835968018, &#39;low&#39;: 6.875999927520752, &#39;open&#39;: 6.958000183105469, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.882299900054932, &#39;close&#39;: 6.882299900054932, &#39;date&#39;: 1543881600, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 6.882299900054932, &#39;low&#39;: 6.821800231933594, &#39;open&#39;: 6.8821001052856445, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.836299896240234, &#39;close&#39;: 6.836299896240234, &#39;date&#39;: 1543968000, &#39;formatted_date&#39;: &#39;2018-12-05&#39;, &#39;high&#39;: 6.868299961090088, &#39;low&#39;: 6.8354997634887695, &#39;open&#39;: 6.836299896240234, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.855800151824951, &#39;close&#39;: 6.855800151824951, &#39;date&#39;: 1544054400, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 6.896699905395508, &#39;low&#39;: 6.8557000160217285, &#39;open&#39;: 6.855800151824951, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.881700038909912, &#39;close&#39;: 6.881700038909912, &#39;date&#39;: 1544140800, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 6.888599872589111, &#39;low&#39;: 6.8649001121521, &#39;open&#39;: 6.881700038909912, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.87470006942749, &#39;close&#39;: 6.87470006942749, &#39;date&#39;: 1544400000, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 6.913300037384033, &#39;low&#39;: 6.865699768066406, &#39;open&#39;: 6.87470006942749, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.910999774932861, &#39;close&#39;: 6.910999774932861, &#39;date&#39;: 1544486400, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 6.91379976272583, &#39;low&#39;: 6.890200138092041, &#39;open&#39;: 6.910900115966797, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.89900016784668, &#39;close&#39;: 6.89900016784668, &#39;date&#39;: 1544572800, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 6.89900016784668, &#39;low&#39;: 6.869100093841553, &#39;open&#39;: 6.89900016784668, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.879000186920166, &#39;close&#39;: 6.879000186920166, &#39;date&#39;: 1544659200, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 6.882900238037109, &#39;low&#39;: 6.862599849700928, &#39;open&#39;: 6.879000186920166, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.88070011138916, &#39;close&#39;: 6.88070011138916, &#39;date&#39;: 1544745600, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 6.906599998474121, &#39;low&#39;: 6.8805999755859375, &#39;open&#39;: 6.88070011138916, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.906599998474121, &#39;close&#39;: 6.906599998474121, &#39;date&#39;: 1545004800, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 6.906700134277344, &#39;low&#39;: 6.8856000900268555, &#39;open&#39;: 6.906599998474121, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.896200180053711, &#39;close&#39;: 6.896200180053711, &#39;date&#39;: 1545091200, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 6.899600028991699, &#39;low&#39;: 6.881999969482422, &#39;open&#39;: 6.896200180053711, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.894199848175049, &#39;close&#39;: 6.894199848175049, &#39;date&#39;: 1545177600, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 6.8979997634887695, &#39;low&#39;: 6.886099815368652, &#39;open&#39;: 6.894199848175049, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.890999794006348, &#39;close&#39;: 6.890999794006348, &#39;date&#39;: 1545264000, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 6.910999774932861, &#39;low&#39;: 6.875100135803223, &#39;open&#39;: 6.8907999992370605, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.884099960327148, &#39;close&#39;: 6.884099960327148, &#39;date&#39;: 1545350400, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 6.905700206756592, &#39;low&#39;: 6.877799987792969, &#39;open&#39;: 6.884099960327148, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.905399799346924, &#39;close&#39;: 6.905399799346924, &#39;date&#39;: 1545609600, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 6.910900115966797, &#39;low&#39;: 6.887899875640869, &#39;open&#39;: 6.905399799346924, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.898099899291992, &#39;close&#39;: 6.898099899291992, &#39;date&#39;: 1545696000, &#39;formatted_date&#39;: &#39;2018-12-25&#39;, &#39;high&#39;: 6.8983001708984375, &#39;low&#39;: 6.8755998611450195, &#39;open&#39;: 6.898099899291992, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8983001708984375, &#39;close&#39;: 6.8983001708984375, &#39;date&#39;: 1545782400, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 6.898399829864502, &#39;low&#39;: 6.881100177764893, &#39;open&#39;: 6.8983001708984375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.898099899291992, &#39;close&#39;: 6.898099899291992, &#39;date&#39;: 1545868800, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 6.898399829864502, &#39;low&#39;: 6.855599880218506, &#39;open&#39;: 6.898099899291992, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.865300178527832, &#39;close&#39;: 6.865300178527832, &#39;date&#39;: 1545955200, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 6.877500057220459, &#39;low&#39;: 6.8445000648498535, &#39;open&#39;: 6.865300178527832, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.877200126647949, &#39;close&#39;: 6.877200126647949, &#39;date&#39;: 1546214400, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 6.877500057220459, &#39;low&#39;: 6.877200126647949, &#39;open&#39;: 6.877200126647949, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.877600193023682, &#39;close&#39;: 6.877600193023682, &#39;date&#39;: 1546300800, &#39;formatted_date&#39;: &#39;2019-01-01&#39;, &#39;high&#39;: 6.877600193023682, &#39;low&#39;: 6.873000144958496, &#39;open&#39;: 6.877600193023682, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.877500057220459, &#39;close&#39;: 6.877500057220459, &#39;date&#39;: 1546387200, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 6.878499984741211, &#39;low&#39;: 6.843299865722656, &#39;open&#39;: 6.877500057220459, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.861100196838379, &#39;close&#39;: 6.861100196838379, &#39;date&#39;: 1546473600, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 6.881700038909912, &#39;low&#39;: 6.861100196838379, &#39;open&#39;: 6.861100196838379, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.871099948883057, &#39;close&#39;: 6.871099948883057, &#39;date&#39;: 1546560000, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 6.870999813079834, &#39;low&#39;: 6.854899883270264, &#39;open&#39;: 6.870999813079834, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8684000968933105, &#39;close&#39;: 6.8684000968933105, &#39;date&#39;: 1546819200, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 6.869699954986572, &#39;low&#39;: 6.839600086212158, &#39;open&#39;: 6.8684000968933105, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.849999904632568, &#39;close&#39;: 6.849999904632568, &#39;date&#39;: 1546905600, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 6.859799861907959, &#39;low&#39;: 6.834199905395508, &#39;open&#39;: 6.849999904632568, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.852200031280518, &#39;close&#39;: 6.852200031280518, &#39;date&#39;: 1546992000, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 6.85230016708374, &#39;low&#39;: 6.816400051116943, &#39;open&#39;: 6.852200031280518, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.8155999183654785, &#39;close&#39;: 6.8155999183654785, &#39;date&#39;: 1547078400, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 6.820899963378906, &#39;low&#39;: 6.772500038146973, &#39;open&#39;: 6.815700054168701, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.787499904632568, &#39;close&#39;: 6.787499904632568, &#39;date&#39;: 1547164800, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 6.789100170135498, &#39;low&#39;: 6.731299877166748, &#39;open&#39;: 6.787499904632568, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.76200008392334, &#39;close&#39;: 6.76200008392334, &#39;date&#39;: 1547424000, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 6.7692999839782715, &#39;low&#39;: 6.752299785614014, &#39;open&#39;: 6.76200008392334, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.767099857330322, &#39;close&#39;: 6.767099857330322, &#39;date&#39;: 1547510400, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 6.768499851226807, &#39;low&#39;: 6.736599922180176, &#39;open&#39;: 6.767099857330322, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.750999927520752, &#39;close&#39;: 6.750999927520752, &#39;date&#39;: 1547596800, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 6.771200180053711, &#39;low&#39;: 6.744999885559082, &#39;open&#39;: 6.750999927520752, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.75600004196167, &#39;close&#39;: 6.75600004196167, &#39;date&#39;: 1547683200, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 6.7769999504089355, &#39;low&#39;: 6.736499786376953, &#39;open&#39;: 6.75600004196167, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.775400161743164, &#39;close&#39;: 6.775400161743164, &#39;date&#39;: 1547769600, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 6.779699802398682, &#39;low&#39;: 6.760000228881836, &#39;open&#39;: 6.775400161743164, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7778000831604, &#39;close&#39;: 6.7778000831604, &#39;date&#39;: 1548028800, &#39;formatted_date&#39;: &#39;2019-01-21&#39;, &#39;high&#39;: 6.798399925231934, &#39;low&#39;: 6.7778000831604, &#39;open&#39;: 6.7778000831604, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.797299861907959, &#39;close&#39;: 6.797299861907959, &#39;date&#39;: 1548115200, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 6.809599876403809, &#39;low&#39;: 6.791999816894531, &#39;open&#39;: 6.7972002029418945, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.807000160217285, &#39;close&#39;: 6.807000160217285, &#39;date&#39;: 1548201600, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 6.807199954986572, &#39;low&#39;: 6.775300025939941, &#39;open&#39;: 6.807000160217285, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.790999889373779, &#39;close&#39;: 6.790999889373779, &#39;date&#39;: 1548288000, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 6.796299934387207, &#39;low&#39;: 6.768199920654297, &#39;open&#39;: 6.790900230407715, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.787600040435791, &#39;close&#39;: 6.787600040435791, &#39;date&#39;: 1548374400, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 6.7895002365112305, &#39;low&#39;: 6.746600151062012, &#39;open&#39;: 6.787700176239014, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.746399879455566, &#39;close&#39;: 6.746399879455566, &#39;date&#39;: 1548633600, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 6.746399879455566, &#39;low&#39;: 6.727700233459473, &#39;open&#39;: 6.746300220489502, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.74429988861084, &#39;close&#39;: 6.74429988861084, &#39;date&#39;: 1548720000, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 6.751999855041504, &#39;low&#39;: 6.723800182342529, &#39;open&#39;: 6.744200229644775, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.73199987411499, &#39;close&#39;: 6.73199987411499, &#39;date&#39;: 1548806400, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 6.73199987411499, &#39;low&#39;: 6.703199863433838, &#39;open&#39;: 6.73199987411499, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7154998779296875, &#39;close&#39;: 6.7154998779296875, &#39;date&#39;: 1548892800, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 6.716700077056885, &#39;low&#39;: 6.686800003051758, &#39;open&#39;: 6.7154998779296875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.69980001449585, &#39;close&#39;: 6.69980001449585, &#39;date&#39;: 1548979200, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 6.743899822235107, &#39;low&#39;: 6.690800189971924, &#39;open&#39;: 6.69980001449585, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.743800163269043, &#39;close&#39;: 6.743800163269043, &#39;date&#39;: 1549238400, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 6.743899822235107, &#39;low&#39;: 6.734799861907959, &#39;open&#39;: 6.743800163269043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.743800163269043, &#39;close&#39;: 6.743800163269043, &#39;date&#39;: 1549324800, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 6.743899822235107, &#39;low&#39;: 6.734799861907959, &#39;open&#39;: 6.743800163269043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.734799861907959, &#39;close&#39;: 6.734799861907959, &#39;date&#39;: 1549411200, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 6.743899822235107, &#39;low&#39;: 6.734799861907959, &#39;open&#39;: 6.743800163269043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.743800163269043, &#39;close&#39;: 6.743800163269043, &#39;date&#39;: 1549497600, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 6.743800163269043, &#39;low&#39;: 6.734799861907959, &#39;open&#39;: 6.74370002746582, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.743800163269043, &#39;close&#39;: 6.743800163269043, &#39;date&#39;: 1549584000, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 6.743800163269043, &#39;low&#39;: 6.742599964141846, &#39;open&#39;: 6.743800163269043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.743800163269043, &#39;close&#39;: 6.743800163269043, &#39;date&#39;: 1549843200, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 6.791999816894531, &#39;low&#39;: 6.743500232696533, &#39;open&#39;: 6.743800163269043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.791399955749512, &#39;close&#39;: 6.791399955749512, &#39;date&#39;: 1549929600, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 6.792600154876709, &#39;low&#39;: 6.760300159454346, &#39;open&#39;: 6.791399955749512, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7729997634887695, &#39;close&#39;: 6.7729997634887695, &#39;date&#39;: 1550016000, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 6.773200035095215, &#39;low&#39;: 6.749499797821045, &#39;open&#39;: 6.7729997634887695, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.759399890899658, &#39;close&#39;: 6.759399890899658, &#39;date&#39;: 1550102400, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 6.776199817657471, &#39;low&#39;: 6.753799915313721, &#39;open&#39;: 6.759399890899658, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.771200180053711, &#39;close&#39;: 6.771200180053711, &#39;date&#39;: 1550188800, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 6.780099868774414, &#39;low&#39;: 6.76200008392334, &#39;open&#39;: 6.771200180053711, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.77209997177124, &#39;close&#39;: 6.77209997177124, &#39;date&#39;: 1550448000, &#39;formatted_date&#39;: &#39;2019-02-18&#39;, &#39;high&#39;: 6.772500038146973, &#39;low&#39;: 6.751500129699707, &#39;open&#39;: 6.77209997177124, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.765699863433838, &#39;close&#39;: 6.765699863433838, &#39;date&#39;: 1550534400, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 6.7789998054504395, &#39;low&#39;: 6.7519001960754395, &#39;open&#39;: 6.765699863433838, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.757699966430664, &#39;close&#39;: 6.757699966430664, &#39;date&#39;: 1550620800, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 6.757699966430664, &#39;low&#39;: 6.70959997177124, &#39;open&#39;: 6.757699966430664, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.720300197601318, &#39;close&#39;: 6.720300197601318, &#39;date&#39;: 1550707200, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 6.724699974060059, &#39;low&#39;: 6.690999984741211, &#39;open&#39;: 6.720300197601318, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.719099998474121, &#39;close&#39;: 6.719099998474121, &#39;date&#39;: 1550793600, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 6.729000091552734, &#39;low&#39;: 6.703800201416016, &#39;open&#39;: 6.719099998474121, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.713200092315674, &#39;close&#39;: 6.713200092315674, &#39;date&#39;: 1551052800, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 6.718400001525879, &#39;low&#39;: 6.676700115203857, &#39;open&#39;: 6.713200092315674, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.688399791717529, &#39;close&#39;: 6.688399791717529, &#39;date&#39;: 1551139200, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 6.703499794006348, &#39;low&#39;: 6.6793999671936035, &#39;open&#39;: 6.688399791717529, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.69920015335083, &#39;close&#39;: 6.69920015335083, &#39;date&#39;: 1551225600, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 6.69920015335083, &#39;low&#39;: 6.668799877166748, &#39;open&#39;: 6.69920015335083, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.686200141906738, &#39;close&#39;: 6.686200141906738, &#39;date&#39;: 1551312000, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 6.6930999755859375, &#39;low&#39;: 6.67140007019043, &#39;open&#39;: 6.686200141906738, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.692999839782715, &#39;close&#39;: 6.692999839782715, &#39;date&#39;: 1551398400, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 6.709099769592285, &#39;low&#39;: 6.687900066375732, &#39;open&#39;: 6.692800045013428, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.705399990081787, &#39;close&#39;: 6.705399990081787, &#39;date&#39;: 1551657600, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 6.706200122833252, &#39;low&#39;: 6.683499813079834, &#39;open&#39;: 6.705399990081787, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.706299781799316, &#39;close&#39;: 6.706299781799316, &#39;date&#39;: 1551744000, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 6.706600189208984, &#39;low&#39;: 6.688399791717529, &#39;open&#39;: 6.706200122833252, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.706600189208984, &#39;close&#39;: 6.706600189208984, &#39;date&#39;: 1551830400, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 6.717299938201904, &#39;low&#39;: 6.6975998878479, &#39;open&#39;: 6.706500053405762, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.710899829864502, &#39;close&#39;: 6.710899829864502, &#39;date&#39;: 1551916800, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 6.714000225067139, &#39;low&#39;: 6.696800231933594, &#39;open&#39;: 6.7108001708984375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.714099884033203, &#39;close&#39;: 6.714099884033203, &#39;date&#39;: 1552003200, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 6.7256999015808105, &#39;low&#39;: 6.710000038146973, &#39;open&#39;: 6.714099884033203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.720600128173828, &#39;close&#39;: 6.720600128173828, &#39;date&#39;: 1552262400, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 6.725599765777588, &#39;low&#39;: 6.711599826812744, &#39;open&#39;: 6.720600128173828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.725500106811523, &#39;close&#39;: 6.725500106811523, &#39;date&#39;: 1552348800, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 6.725500106811523, &#39;low&#39;: 6.697999954223633, &#39;open&#39;: 6.725399971008301, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.707600116729736, &#39;close&#39;: 6.707600116729736, &#39;date&#39;: 1552435200, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 6.710599899291992, &#39;low&#39;: 6.696899890899658, &#39;open&#39;: 6.707499980926514, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.706099987030029, &#39;close&#39;: 6.706099987030029, &#39;date&#39;: 1552521600, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 6.726799964904785, &#39;low&#39;: 6.6971001625061035, &#39;open&#39;: 6.705999851226807, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7220001220703125, &#39;close&#39;: 6.7220001220703125, &#39;date&#39;: 1552608000, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 6.728300094604492, &#39;low&#39;: 6.703499794006348, &#39;open&#39;: 6.72189998626709, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.712800025939941, &#39;close&#39;: 6.712800025939941, &#39;date&#39;: 1552867200, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 6.716000080108643, &#39;low&#39;: 6.701099872589111, &#39;open&#39;: 6.712800025939941, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.703100204467773, &#39;close&#39;: 6.703100204467773, &#39;date&#39;: 1552953600, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 6.718500137329102, &#39;low&#39;: 6.7027997970581055, &#39;open&#39;: 6.703100204467773, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.710999965667725, &#39;close&#39;: 6.710999965667725, &#39;date&#39;: 1553040000, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 6.715799808502197, &#39;low&#39;: 6.684599876403809, &#39;open&#39;: 6.710999965667725, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.693600177764893, &#39;close&#39;: 6.693600177764893, &#39;date&#39;: 1553126400, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 6.698400020599365, &#39;low&#39;: 6.66480016708374, &#39;open&#39;: 6.69350004196167, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.698200225830078, &#39;close&#39;: 6.698200225830078, &#39;date&#39;: 1553212800, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 6.717199802398682, &#39;low&#39;: 6.689300060272217, &#39;open&#39;: 6.697999954223633, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.717100143432617, &#39;close&#39;: 6.717100143432617, &#39;date&#39;: 1553472000, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 6.718599796295166, &#39;low&#39;: 6.699999809265137, &#39;open&#39;: 6.717299938201904, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.708399772644043, &#39;close&#39;: 6.708399772644043, &#39;date&#39;: 1553558400, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 6.715099811553955, &#39;low&#39;: 6.699399948120117, &#39;open&#39;: 6.708399772644043, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.714700222015381, &#39;close&#39;: 6.714700222015381, &#39;date&#39;: 1553644800, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 6.726200103759766, &#39;low&#39;: 6.704999923706055, &#39;open&#39;: 6.714700222015381, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.726200103759766, &#39;close&#39;: 6.726200103759766, &#39;date&#39;: 1553731200, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 6.738699913024902, &#39;low&#39;: 6.717199802398682, &#39;open&#39;: 6.726200103759766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.738100051879883, &#39;close&#39;: 6.738100051879883, &#39;date&#39;: 1553817600, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 6.73829984664917, &#39;low&#39;: 6.697700023651123, &#39;open&#39;: 6.738100051879883, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.711100101470947, &#39;close&#39;: 6.711100101470947, &#39;date&#39;: 1554073200, &#39;formatted_date&#39;: &#39;2019-03-31&#39;, &#39;high&#39;: 6.711999893188477, &#39;low&#39;: 6.701200008392334, &#39;open&#39;: 6.702099800109863, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7104997634887695, &#39;close&#39;: 6.7104997634887695, &#39;date&#39;: 1554159600, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 6.723299980163574, &#39;low&#39;: 6.701499938964844, &#39;open&#39;: 6.701499938964844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.722400188446045, &#39;close&#39;: 6.722400188446045, &#39;date&#39;: 1554246000, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 6.722400188446045, &#39;low&#39;: 6.697299957275391, &#39;open&#39;: 6.722300052642822, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.701399803161621, &#39;close&#39;: 6.701399803161621, &#39;date&#39;: 1554332400, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 6.719299793243408, &#39;low&#39;: 6.701399803161621, &#39;open&#39;: 6.701399803161621, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.716599941253662, &#39;close&#39;: 6.716599941253662, &#39;date&#39;: 1554418800, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 6.717700004577637, &#39;low&#39;: 6.716400146484375, &#39;open&#39;: 6.716700077056885, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.716899871826172, &#39;close&#39;: 6.716899871826172, &#39;date&#39;: 1554678000, &#39;formatted_date&#39;: &#39;2019-04-07&#39;, &#39;high&#39;: 6.720399856567383, &#39;low&#39;: 6.705599784851074, &#39;open&#39;: 6.71750020980835, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.715400218963623, &#39;close&#39;: 6.715400218963623, &#39;date&#39;: 1554764400, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 6.717800140380859, &#39;low&#39;: 6.701099872589111, &#39;open&#39;: 6.706399917602539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.7108001708984375, &#39;close&#39;: 6.7108001708984375, &#39;date&#39;: 1554850800, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 6.717400074005127, &#39;low&#39;: 6.701700210571289, &#39;open&#39;: 6.710899829864502, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.715400218963623, &#39;close&#39;: 6.715400218963623, &#39;date&#39;: 1554937200, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 6.718500137329102, &#39;low&#39;: 6.703999996185303, &#39;open&#39;: 6.715199947357178, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.718500137329102, &#39;close&#39;: 6.718500137329102, &#39;date&#39;: 1555023600, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 6.72189998626709, &#39;low&#39;: 6.69920015335083, &#39;open&#39;: 6.718400001525879, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.703199863433838, &#39;close&#39;: 6.703199863433838, &#39;date&#39;: 1555282800, &#39;formatted_date&#39;: &#39;2019-04-14&#39;, &#39;high&#39;: 6.708499908447266, &#39;low&#39;: 6.695499897003174, &#39;open&#39;: 6.7032999992370605, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.707699775695801, &#39;close&#39;: 6.707699775695801, &#39;date&#39;: 1555369200, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 6.711299896240234, &#39;low&#39;: 6.697199821472168, &#39;open&#39;: 6.698699951171875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.71120023727417, &#39;close&#39;: 6.71120023727417, &#39;date&#39;: 1555455600, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 6.71120023727417, &#39;low&#39;: 6.67710018157959, &#39;open&#39;: 6.702199935913086, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.68720006942749, &#39;close&#39;: 6.68720006942749, &#39;date&#39;: 1555542000, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 6.70959997177124, &#39;low&#39;: 6.678199768066406, &#39;open&#39;: 6.678199768066406, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.708099842071533, &#39;close&#39;: 6.708099842071533, &#39;date&#39;: 1555628400, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 6.708199977874756, &#39;low&#39;: 6.699100017547607, &#39;open&#39;: 6.699100017547607, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.703400135040283, &#39;close&#39;: 6.703400135040283, &#39;date&#39;: 1555887600, &#39;formatted_date&#39;: &#39;2019-04-21&#39;, &#39;high&#39;: 6.713099956512451, &#39;low&#39;: 6.703000068664551, &#39;open&#39;: 6.7058000564575195, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.708499908447266, &#39;close&#39;: 6.708499908447266, &#39;date&#39;: 1555974000, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 6.726399898529053, &#39;low&#39;: 6.708199977874756, &#39;open&#39;: 6.7083001136779785, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.724899768829346, &#39;close&#39;: 6.724899768829346, &#39;date&#39;: 1556060400, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 6.724999904632568, &#39;low&#39;: 6.7067999839782715, &#39;open&#39;: 6.71589994430542, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.720900058746338, &#39;close&#39;: 6.720900058746338, &#39;date&#39;: 1556146800, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 6.747900009155273, &#39;low&#39;: 6.711900234222412, &#39;open&#39;: 6.711900234222412, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.742099761962891, &#39;close&#39;: 6.742099761962891, &#39;date&#39;: 1556233200, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 6.742099761962891, &#39;low&#39;: 6.719399929046631, &#39;open&#39;: 6.733099937438965, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 6.728799819946289, &#39;close&#39;: 6.728799819946289, &#39;date&#39;: 1556492400, &#39;formatted_date&#39;: &#39;2019-04-28&#39;, &#39;high&#39;: 6.734799861907959, &#39;low&#39;: 6.719699859619141, &#39;open&#39;: 6.719799995422363, &#39;volume&#39;: 0}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: 3600}}, &#39;EURUSD=X&#39;: {&#39;currency&#39;: &#39;USD&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 1070236800, &#39;formatted_date&#39;: &#39;2003-12-01&#39;}, &#39;instrumentType&#39;: &#39;CURRENCY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 1.2122827768325806, &#39;close&#39;: 1.2122827768325806, &#39;date&#39;: 1525042800, &#39;formatted_date&#39;: &#39;2018-04-29&#39;, &#39;high&#39;: 1.2138574123382568, &#39;low&#39;: 1.2066364288330078, &#39;open&#39;: 1.2128562927246094, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.2081234455108643, &#39;close&#39;: 1.2081234455108643, &#39;date&#39;: 1525129200, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 1.2084592580795288, &#39;low&#39;: 1.1983511447906494, &#39;open&#39;: 1.208313226699829, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1991558074951172, &#39;close&#39;: 1.1991558074951172, &#39;date&#39;: 1525215600, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 1.2031089067459106, &#39;low&#39;: 1.1954143047332764, &#39;open&#39;: 1.1992132663726807, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.19510018825531, &#39;close&#39;: 1.19510018825531, &#39;date&#39;: 1525302000, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 1.2009127140045166, &#39;low&#39;: 1.1950715780258179, &#39;open&#39;: 1.1951714754104614, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1989257335662842, &#39;close&#39;: 1.1989257335662842, &#39;date&#39;: 1525388400, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 1.1997599601745605, &#39;low&#39;: 1.1914832592010498, &#39;open&#39;: 1.1989257335662842, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.195500135421753, &#39;close&#39;: 1.195500135421753, &#39;date&#39;: 1525647600, &#39;formatted_date&#39;: &#39;2018-05-06&#39;, &#39;high&#39;: 1.1978917121887207, &#39;low&#39;: 1.18995201587677, &#39;open&#39;: 1.1955716609954834, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1933743953704834, &#39;close&#39;: 1.1933743953704834, &#39;date&#39;: 1525734000, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 1.1938873529434204, &#39;low&#39;: 1.183936357498169, &#39;open&#39;: 1.1932604312896729, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1867886781692505, &#39;close&#39;: 1.1867886781692505, &#39;date&#39;: 1525820400, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 1.1896122694015503, &#39;low&#39;: 1.1823545694351196, &#39;open&#39;: 1.186676025390625, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.184721827507019, &#39;close&#39;: 1.184721827507019, &#39;date&#39;: 1525906800, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 1.1942437887191772, &#39;low&#39;: 1.184469223022461, &#39;open&#39;: 1.1847639083862305, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1917530298233032, &#39;close&#39;: 1.1917530298233032, &#39;date&#39;: 1525993200, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 1.1967878341674805, &#39;low&#39;: 1.1893434524536133, &#39;open&#39;: 1.191525936126709, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1952143907546997, &#39;close&#39;: 1.1952143907546997, &#39;date&#39;: 1526252400, &#39;formatted_date&#39;: &#39;2018-05-13&#39;, &#39;high&#39;: 1.1996996402740479, &#39;low&#39;: 1.1951572895050049, &#39;open&#39;: 1.1951572895050049, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1931180953979492, &#39;close&#39;: 1.1931180953979492, &#39;date&#39;: 1526338800, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 1.1940299272537231, &#39;low&#39;: 1.182396411895752, &#39;open&#39;: 1.1932035684585571, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1820889711380005, &#39;close&#39;: 1.1820889711380005, &#39;date&#39;: 1526425200, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 1.1853959560394287, &#39;low&#39;: 1.176567554473877, &#39;open&#39;: 1.1822566986083984, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1816978454589844, &#39;close&#39;: 1.1816978454589844, &#39;date&#39;: 1526511600, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 1.1836841106414795, &#39;low&#39;: 1.1778563261032104, &#39;open&#39;: 1.1814186573028564, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1795234680175781, &#39;close&#39;: 1.1795234680175781, &#39;date&#39;: 1526598000, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 1.182228684425354, &#39;low&#39;: 1.175046682357788, &#39;open&#39;: 1.1792036294937134, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1766643524169922, &#39;close&#39;: 1.1766643524169922, &#39;date&#39;: 1526857200, &#39;formatted_date&#39;: &#39;2018-05-20&#39;, &#39;high&#39;: 1.1778979301452637, &#39;low&#39;: 1.1718658208847046, &#39;open&#39;: 1.1763737201690674, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1792453527450562, &#39;close&#39;: 1.1792453527450562, &#39;date&#39;: 1526943600, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 1.1828161478042603, &#39;low&#39;: 1.1759449243545532, &#39;open&#39;: 1.1788839101791382, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1788560152053833, &#39;close&#39;: 1.1788560152053833, &#39;date&#39;: 1527030000, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 1.1791006326675415, &#39;low&#39;: 1.168620228767395, &#39;open&#39;: 1.1789672374725342, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1710150241851807, &#39;close&#39;: 1.1710150241851807, &#39;date&#39;: 1527116400, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 1.174936294555664, &#39;low&#39;: 1.1692214012145996, &#39;open&#39;: 1.1707134246826172, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1722642183303833, &#39;close&#39;: 1.1722642183303833, &#39;date&#39;: 1527202800, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 1.1733232736587524, &#39;low&#39;: 1.1648359298706055, &#39;open&#39;: 1.1723191738128662, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1688934564590454, &#39;close&#39;: 1.1688934564590454, &#39;date&#39;: 1527462000, &#39;formatted_date&#39;: &#39;2018-05-27&#39;, &#39;high&#39;: 1.1730204820632935, &#39;low&#39;: 1.1608469486236572, &#39;open&#39;: 1.1687567234039307, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.162696123123169, &#39;close&#39;: 1.162696123123169, &#39;date&#39;: 1527548400, &#39;formatted_date&#39;: &#39;2018-05-28&#39;, &#39;high&#39;: 1.1639816761016846, &#39;low&#39;: 1.1514369249343872, &#39;open&#39;: 1.1627501249313354, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1539349555969238, &#39;close&#39;: 1.1539349555969238, &#39;date&#39;: 1527634800, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 1.1670994758605957, &#39;low&#39;: 1.1520073413848877, &#39;open&#39;: 1.153761863708496, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1667250394821167, &#39;close&#39;: 1.1667250394821167, &#39;date&#39;: 1527721200, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 1.1724016666412354, &#39;low&#39;: 1.1642934083938599, &#39;open&#39;: 1.1666160821914673, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1693171262741089, &#39;close&#39;: 1.1693171262741089, &#39;date&#39;: 1527807600, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 1.1715501546859741, &#39;low&#39;: 1.1629935503005981, &#39;open&#39;: 1.1693308353424072, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1668611764907837, &#39;close&#39;: 1.1668611764907837, &#39;date&#39;: 1528066800, &#39;formatted_date&#39;: &#39;2018-06-03&#39;, &#39;high&#39;: 1.174425721168518, &#39;low&#39;: 1.1668747663497925, &#39;open&#39;: 1.1669973134994507, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1700559854507446, &#39;close&#39;: 1.1700559854507446, &#39;date&#39;: 1528153200, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 1.171385407447815, &#39;low&#39;: 1.1655282974243164, &#39;open&#39;: 1.1701792478561401, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1726216077804565, &#39;close&#39;: 1.1726216077804565, &#39;date&#39;: 1528239600, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 1.1797001361846924, &#39;low&#39;: 1.1714677810668945, &#39;open&#39;: 1.1726628541946411, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.178550362586975, &#39;close&#39;: 1.178550362586975, &#39;date&#39;: 1528326000, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 1.1841003894805908, &#39;low&#39;: 1.1783559322357178, &#39;open&#39;: 1.1783976554870605, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1795234680175781, &#39;close&#39;: 1.1795234680175781, &#39;date&#39;: 1528412400, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 1.181199550628662, &#39;low&#39;: 1.1728416681289673, &#39;open&#39;: 1.1793843507766724, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1783976554870605, &#39;close&#39;: 1.1783976554870605, &#39;date&#39;: 1528671600, &#39;formatted_date&#39;: &#39;2018-06-10&#39;, &#39;high&#39;: 1.1820330619812012, &#39;low&#39;: 1.1776067018508911, &#39;open&#39;: 1.1786893606185913, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.177412509918213, &#39;close&#39;: 1.177412509918213, &#39;date&#39;: 1528758000, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 1.1808466911315918, &#39;low&#39;: 1.174315333366394, &#39;open&#39;: 1.1773293018341064, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.17482590675354, &#39;close&#39;: 1.17482590675354, &#39;date&#39;: 1528844400, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 1.1789672374725342, &#39;low&#39;: 1.1733646392822266, &#39;open&#39;: 1.1747568845748901, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1807769536972046, &#39;close&#39;: 1.1807769536972046, &#39;date&#39;: 1528930800, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 1.1841607093811035, &#39;low&#39;: 1.1628854274749756, &#39;open&#39;: 1.1806375980377197, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1566576957702637, &#39;close&#39;: 1.1566576957702637, &#39;date&#39;: 1529017200, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 1.1626555919647217, &#39;low&#39;: 1.1545344591140747, &#39;open&#39;: 1.156336784362793, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.159595012664795, &#39;close&#39;: 1.159595012664795, &#39;date&#39;: 1529276400, &#39;formatted_date&#39;: &#39;2018-06-17&#39;, &#39;high&#39;: 1.1623716354370117, &#39;low&#39;: 1.156644344329834, &#39;open&#39;: 1.1597026586532593, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1630746126174927, &#39;close&#39;: 1.1630746126174927, &#39;date&#39;: 1529362800, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 1.164686679840088, &#39;low&#39;: 1.153322696685791, &#39;open&#39;: 1.163007140159607, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1588560342788696, &#39;close&#39;: 1.1588560342788696, &#39;date&#39;: 1529449200, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 1.1600120067596436, &#39;low&#39;: 1.1546010971069336, &#39;open&#39;: 1.1589365005493164, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1579033136367798, &#39;close&#39;: 1.1579033136367798, &#39;date&#39;: 1529535600, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 1.1628313064575195, &#39;low&#39;: 1.151410460472107, &#39;open&#39;: 1.1577022075653076, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1605775356292725, &#39;close&#39;: 1.1605775356292725, &#39;date&#39;: 1529622000, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 1.1675995588302612, &#39;low&#39;: 1.1601735353469849, &#39;open&#39;: 1.1606987714767456, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1661399602890015, &#39;close&#39;: 1.1661399602890015, &#39;date&#39;: 1529881200, &#39;formatted_date&#39;: &#39;2018-06-24&#39;, &#39;high&#39;: 1.1700011491775513, &#39;low&#39;: 1.1629935503005981, &#39;open&#39;: 1.1660583019256592, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1702749729156494, &#39;close&#39;: 1.1702749729156494, &#39;date&#39;: 1529967600, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 1.17205810546875, &#39;low&#39;: 1.1652023792266846, &#39;open&#39;: 1.1701792478561401, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1650259494781494, &#39;close&#39;: 1.1650259494781494, &#39;date&#39;: 1530054000, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 1.1671879291534424, &#39;low&#39;: 1.1583592891693115, &#39;open&#39;: 1.164808750152588, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1563634872436523, &#39;close&#39;: 1.1563634872436523, &#39;date&#39;: 1530140400, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 1.1596999168395996, &#39;low&#39;: 1.1528042554855347, &#39;open&#39;: 1.156243085861206, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1562966108322144, &#39;close&#39;: 1.1562966108322144, &#39;date&#39;: 1530226800, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 1.1682379245758057, &#39;low&#39;: 1.15644371509552, &#39;open&#39;: 1.15644371509552, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1678558588027954, &#39;close&#39;: 1.1678558588027954, &#39;date&#39;: 1530486000, &#39;formatted_date&#39;: &#39;2018-07-01&#39;, &#39;high&#39;: 1.1678422689437866, &#39;low&#39;: 1.1592589616775513, &#39;open&#39;: 1.1678422689437866, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1642121076583862, &#39;close&#39;: 1.1642121076583862, &#39;date&#39;: 1530572400, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 1.1675423383712769, &#39;low&#39;: 1.1622636318206787, &#39;open&#39;: 1.1640766859054565, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1659224033355713, &#39;close&#39;: 1.1659224033355713, &#39;date&#39;: 1530658800, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 1.1681833267211914, &#39;low&#39;: 1.1631423234939575, &#39;open&#39;: 1.16593599319458, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.166235089302063, &#39;close&#39;: 1.166235089302063, &#39;date&#39;: 1530745200, &#39;formatted_date&#39;: &#39;2018-07-04&#39;, &#39;high&#39;: 1.1719757318496704, &#39;low&#39;: 1.165080189704895, &#39;open&#39;: 1.1661807298660278, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1695905923843384, &#39;close&#39;: 1.1695905923843384, &#39;date&#39;: 1530831600, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 1.1767336130142212, &#39;low&#39;: 1.1680742502212524, &#39;open&#39;: 1.169385552406311, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1752262115478516, &#39;close&#39;: 1.1752262115478516, &#39;date&#39;: 1531090800, &#39;formatted_date&#39;: &#39;2018-07-08&#39;, &#39;high&#39;: 1.179078459739685, &#39;low&#39;: 1.1742877960205078, &#39;open&#39;: 1.1751710176467896, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1756960153579712, &#39;close&#39;: 1.1756960153579712, &#39;date&#39;: 1531177200, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 1.1762906312942505, &#39;low&#39;: 1.1691941022872925, &#39;open&#39;: 1.1757513284683228, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1727042198181152, &#39;close&#39;: 1.1727042198181152, &#39;date&#39;: 1531263600, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 1.1755163669586182, &#39;low&#39;: 1.1698368787765503, &#39;open&#39;: 1.1730343103408813, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1676785945892334, &#39;close&#39;: 1.1676785945892334, &#39;date&#39;: 1531350000, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 1.169700026512146, &#39;low&#39;: 1.1650530099868774, &#39;open&#39;: 1.167569637298584, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1665889024734497, &#39;close&#39;: 1.1665889024734497, &#39;date&#39;: 1531436400, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 1.1675423383712769, &#39;low&#39;: 1.1614537239074707, &#39;open&#39;: 1.16637122631073, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1679104566574097, &#39;close&#39;: 1.1679104566574097, &#39;date&#39;: 1531695600, &#39;formatted_date&#39;: &#39;2018-07-15&#39;, &#39;high&#39;: 1.1726078987121582, &#39;low&#39;: 1.1676650047302246, &#39;open&#39;: 1.1678968667984009, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.170946478843689, &#39;close&#39;: 1.170946478843689, &#39;date&#39;: 1531782000, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 1.1745359897613525, &#39;low&#39;: 1.1664528846740723, &#39;open&#39;: 1.1710561513900757, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1653246879577637, &#39;close&#39;: 1.1653246879577637, &#39;date&#39;: 1531868400, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 1.166534423828125, &#39;low&#39;: 1.1603754758834839, &#39;open&#39;: 1.1657729148864746, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.164564609527588, &#39;close&#39;: 1.164564609527588, &#39;date&#39;: 1531954800, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 1.1657049655914307, &#39;low&#39;: 1.157594919204712, &#39;open&#39;: 1.1646188497543335, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1655147075653076, &#39;close&#39;: 1.1655147075653076, &#39;date&#39;: 1532041200, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 1.172236680984497, &#39;low&#39;: 1.1628042459487915, &#39;open&#39;: 1.1654739379882812, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1741912364959717, &#39;close&#39;: 1.1741912364959717, &#39;date&#39;: 1532300400, &#39;formatted_date&#39;: &#39;2018-07-22&#39;, &#39;high&#39;: 1.1750881671905518, &#39;low&#39;: 1.1688660383224487, &#39;open&#39;: 1.1741775274276733, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1694128513336182, &#39;close&#39;: 1.1694128513336182, &#39;date&#39;: 1532386800, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 1.1716599464416504, &#39;low&#39;: 1.1657185554504395, &#39;open&#39;: 1.169864296913147, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1685519218444824, &#39;close&#39;: 1.1685519218444824, &#39;date&#39;: 1532473200, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 1.1713716983795166, &#39;low&#39;: 1.1667522192001343, &#39;open&#39;: 1.168770432472229, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1737502813339233, &#39;close&#39;: 1.1737502813339233, &#39;date&#39;: 1532559600, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 1.174315333366394, &#39;low&#39;: 1.1650937795639038, &#39;open&#39;: 1.1739845275878906, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1642934083938599, &#39;close&#39;: 1.1642934083938599, &#39;date&#39;: 1532646000, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 1.1663167476654053, &#39;low&#39;: 1.1623716354370117, &#39;open&#39;: 1.1644561290740967, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.16604483127594, &#39;close&#39;: 1.16604483127594, &#39;date&#39;: 1532905200, &#39;formatted_date&#39;: &#39;2018-07-29&#39;, &#39;high&#39;: 1.1719207763671875, &#39;low&#39;: 1.1649445295333862, &#39;open&#39;: 1.1663167476654053, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1707408428192139, &#39;close&#39;: 1.1707408428192139, &#39;date&#39;: 1532991600, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 1.1748120784759521, &#39;low&#39;: 1.1692761182785034, &#39;open&#39;: 1.170864224433899, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.168961763381958, &#39;close&#39;: 1.168961763381958, &#39;date&#39;: 1533078000, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 1.169864296913147, &#39;low&#39;: 1.166534423828125, &#39;open&#39;: 1.168961763381958, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1665889024734497, &#39;close&#39;: 1.1665889024734497, &#39;date&#39;: 1533164400, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 1.1669973134994507, &#39;low&#39;: 1.1604158878326416, &#39;open&#39;: 1.1663848161697388, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1586008071899414, &#39;close&#39;: 1.1586008071899414, &#39;date&#39;: 1533250800, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 1.1612001657485962, &#39;low&#39;: 1.1562163829803467, &#39;open&#39;: 1.1585606336593628, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1562297344207764, &#39;close&#39;: 1.1562297344207764, &#39;date&#39;: 1533510000, &#39;formatted_date&#39;: &#39;2018-08-05&#39;, &#39;high&#39;: 1.1570056676864624, &#39;low&#39;: 1.1530966758728027, &#39;open&#39;: 1.156136155128479, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1558021306991577, &#39;close&#39;: 1.1558021306991577, &#39;date&#39;: 1533596400, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 1.1609008312225342, &#39;low&#39;: 1.1552013158798218, &#39;open&#39;: 1.155748724937439, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1602946519851685, &#39;close&#39;: 1.1602946519851685, &#39;date&#39;: 1533682800, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 1.1629259586334229, &#39;low&#39;: 1.1574609279632568, &#39;open&#39;: 1.1603351831436157, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1610760688781738, &#39;close&#39;: 1.1610760688781738, &#39;date&#39;: 1533769200, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 1.1621150970458984, &#39;low&#39;: 1.156176209449768, &#39;open&#39;: 1.1610087156295776, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1523923873901367, &#39;close&#39;: 1.1523923873901367, &#39;date&#39;: 1533855600, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 1.1539349555969238, &#39;low&#39;: 1.1396141052246094, &#39;open&#39;: 1.1528706550598145, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1394712924957275, &#39;close&#39;: 1.1394712924957275, &#39;date&#39;: 1534114800, &#39;formatted_date&#39;: &#39;2018-08-12&#39;, &#39;high&#39;: 1.143379807472229, &#39;low&#39;: 1.1365960836410522, &#39;open&#39;: 1.1395881175994873, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1402509212493896, &#39;close&#39;: 1.1402509212493896, &#39;date&#39;: 1534201200, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 1.1431001424789429, &#39;low&#39;: 1.134751796722412, &#39;open&#39;: 1.139847993850708, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1345715522766113, &#39;close&#39;: 1.1345715522766113, &#39;date&#39;: 1534287600, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 1.1349449157714844, &#39;low&#39;: 1.1302244663238525, &#39;open&#39;: 1.1348161697387695, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.134429931640625, &#39;close&#39;: 1.134429931640625, &#39;date&#39;: 1534374000, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 1.140836238861084, &#39;low&#39;: 1.1338382959365845, &#39;open&#39;: 1.134429931640625, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1371389627456665, &#39;close&#39;: 1.1371389627456665, &#39;date&#39;: 1534460400, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 1.1422044038772583, &#39;low&#39;: 1.1367381811141968, &#39;open&#39;: 1.137229561805725, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1437721252441406, &#39;close&#39;: 1.1437721252441406, &#39;date&#39;: 1534719600, &#39;formatted_date&#39;: &#39;2018-08-19&#39;, &#39;high&#39;: 1.1449376344680786, &#39;low&#39;: 1.1395231485366821, &#39;open&#39;: 1.1437852382659912, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.149134635925293, &#39;close&#39;: 1.149134635925293, &#39;date&#39;: 1534806000, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 1.1539082527160645, &#39;low&#39;: 1.1486594676971436, &#39;open&#39;: 1.1489102840423584, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1576753854751587, &#39;close&#39;: 1.1576753854751587, &#39;date&#39;: 1534892400, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 1.162520408630371, &#39;low&#39;: 1.1554415225982666, &#39;open&#39;: 1.15763521194458, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1584800481796265, &#39;close&#39;: 1.1584800481796265, &#39;date&#39;: 1534978800, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 1.1589634418487549, &#39;low&#39;: 1.154521107673645, &#39;open&#39;: 1.1586277484893799, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.154334545135498, &#39;close&#39;: 1.154334545135498, &#39;date&#39;: 1535065200, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 1.1636972427368164, &#39;low&#39;: 1.1539349555969238, &#39;open&#39;: 1.1542812585830688, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.164890170097351, &#39;close&#39;: 1.164890170097351, &#39;date&#39;: 1535324400, &#39;formatted_date&#39;: &#39;2018-08-26&#39;, &#39;high&#39;: 1.1680878400802612, &#39;low&#39;: 1.1597161293029785, &#39;open&#39;: 1.164442539215088, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1683608293533325, &#39;close&#39;: 1.1683608293533325, &#39;date&#39;: 1535410800, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 1.1732999086380005, &#39;low&#39;: 1.1663440465927124, &#39;open&#39;: 1.1683471202850342, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1691256761550903, &#39;close&#39;: 1.1691256761550903, &#39;date&#39;: 1535497200, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 1.1706311702728271, &#39;low&#39;: 1.1654006242752075, &#39;open&#39;: 1.1693034172058105, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1709738969802856, &#39;close&#39;: 1.1709738969802856, &#39;date&#39;: 1535583600, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 1.1717559099197388, &#39;low&#39;: 1.1644154787063599, &#39;open&#39;: 1.1709327697753906, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1664663553237915, &#39;close&#39;: 1.1664663553237915, &#39;date&#39;: 1535670000, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 1.1689343452453613, &#39;low&#39;: 1.1596487760543823, &#39;open&#39;: 1.1665889024734497, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1601063013076782, &#39;close&#39;: 1.1601063013076782, &#39;date&#39;: 1535929200, &#39;formatted_date&#39;: &#39;2018-09-02&#39;, &#39;high&#39;: 1.1627906560897827, &#39;low&#39;: 1.1590977907180786, &#39;open&#39;: 1.1598505973815918, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.161548137664795, &#39;close&#39;: 1.161548137664795, &#39;date&#39;: 1536015600, &#39;formatted_date&#39;: &#39;2018-09-03&#39;, &#39;high&#39;: 1.1615750789642334, &#39;low&#39;: 1.153322696685791, &#39;open&#39;: 1.16130530834198, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1586545705795288, &#39;close&#39;: 1.1586545705795288, &#39;date&#39;: 1536102000, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 1.1632641553878784, &#39;low&#39;: 1.1546810865402222, &#39;open&#39;: 1.1588022708892822, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1635212898254395, &#39;close&#39;: 1.1635212898254395, &#39;date&#39;: 1536188400, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 1.165623426437378, &#39;low&#39;: 1.1607661247253418, &#39;open&#39;: 1.1634942293167114, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1620069742202759, &#39;close&#39;: 1.1620069742202759, &#39;date&#39;: 1536274800, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 1.1650937795639038, &#39;low&#39;: 1.1563901901245117, &#39;open&#39;: 1.1623852252960205, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1561094522476196, &#39;close&#39;: 1.1561094522476196, &#39;date&#39;: 1536534000, &#39;formatted_date&#39;: &#39;2018-09-09&#39;, &#39;high&#39;: 1.161440134048462, &#39;low&#39;: 1.1527643203735352, &#39;open&#39;: 1.1558955907821655, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.159595012664795, &#39;close&#39;: 1.159595012664795, &#39;date&#39;: 1536620400, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 1.1642799377441406, &#39;low&#39;: 1.1566845178604126, &#39;open&#39;: 1.1593396663665771, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1596084833145142, &#39;close&#39;: 1.1596084833145142, &#39;date&#39;: 1536706800, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 1.1648223400115967, &#39;low&#39;: 1.1570860147476196, &#39;open&#39;: 1.159595012664795, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1629259586334229, &#39;close&#39;: 1.1629259586334229, &#39;date&#39;: 1536793200, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 1.1700832843780518, &#39;low&#39;: 1.16096830368042, &#39;open&#39;: 1.1626555919647217, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1691803932189941, &#39;close&#39;: 1.1691803932189941, &#39;date&#39;: 1536879600, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 1.1721267700195312, &#39;low&#39;: 1.1655691862106323, &#39;open&#39;: 1.1690436601638794, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1628988981246948, &#39;close&#39;: 1.1628988981246948, &#39;date&#39;: 1537138800, &#39;formatted_date&#39;: &#39;2018-09-16&#39;, &#39;high&#39;: 1.1695905923843384, &#39;low&#39;: 1.162358283996582, &#39;open&#39;: 1.162358283996582, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1669156551361084, &#39;close&#39;: 1.1669156551361084, &#39;date&#39;: 1537225200, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 1.1720443964004517, &#39;low&#39;: 1.1669156551361084, &#39;open&#39;: 1.1669156551361084, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.167992353439331, &#39;close&#39;: 1.167992353439331, &#39;date&#39;: 1537311600, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 1.1716461181640625, &#39;low&#39;: 1.165338158607483, &#39;open&#39;: 1.167883276939392, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.167460560798645, &#39;close&#39;: 1.167460560798645, &#39;date&#39;: 1537398000, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 1.1776995658874512, &#39;low&#39;: 1.1672834157943726, &#39;open&#39;: 1.1674060821533203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1775927543640137, &#39;close&#39;: 1.1775927543640137, &#39;date&#39;: 1537484400, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 1.180163860321045, &#39;low&#39;: 1.1735711097717285, &#39;open&#39;: 1.1776067018508911, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1751019954681396, &#39;close&#39;: 1.1751019954681396, &#39;date&#39;: 1537743600, &#39;formatted_date&#39;: &#39;2018-09-23&#39;, &#39;high&#39;: 1.1815024614334106, &#39;low&#39;: 1.172525405883789, &#39;open&#39;: 1.1751019954681396, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.175295352935791, &#39;close&#39;: 1.175295352935791, &#39;date&#39;: 1537830000, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 1.1792453527450562, &#39;low&#39;: 1.1732544898986816, &#39;open&#39;: 1.1753228902816772, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1763184070587158, &#39;close&#39;: 1.1763184070587158, &#39;date&#39;: 1537916400, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 1.1776995658874512, &#39;low&#39;: 1.1728966236114502, &#39;open&#39;: 1.1766090393066406, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1748534440994263, &#39;close&#39;: 1.1748534440994263, &#39;date&#39;: 1538002800, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 1.1759172677993774, &#39;low&#39;: 1.1664528846740723, &#39;open&#39;: 1.1747153997421265, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1637378931045532, &#39;close&#39;: 1.1637378931045532, &#39;date&#39;: 1538089200, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 1.1653001308441162, &#39;low&#39;: 1.1570591926574707, &#39;open&#39;: 1.1636837720870972, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1605371236801147, &#39;close&#39;: 1.1605371236801147, &#39;date&#39;: 1538348400, &#39;formatted_date&#39;: &#39;2018-09-30&#39;, &#39;high&#39;: 1.1621285676956177, &#39;low&#39;: 1.156510591506958, &#39;open&#39;: 1.160496711730957, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.157755732536316, &#39;close&#39;: 1.157755732536316, &#39;date&#39;: 1538434800, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 1.1582117080688477, &#39;low&#39;: 1.1506686210632324, &#39;open&#39;: 1.157755732536316, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1551746129989624, &#39;close&#39;: 1.1551746129989624, &#39;date&#39;: 1538521200, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 1.159326195716858, &#39;low&#39;: 1.1516358852386475, &#39;open&#39;: 1.155041217803955, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.147631287574768, &#39;close&#39;: 1.147631287574768, &#39;date&#39;: 1538607600, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 1.153599500656128, &#39;low&#39;: 1.1464602947235107, &#39;open&#39;: 1.147736668586731, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1518083810806274, &#39;close&#39;: 1.1518083810806274, &#39;date&#39;: 1538694000, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 1.1542545557022095, &#39;low&#39;: 1.1487782001495361, &#39;open&#39;: 1.1517553329467773, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1522595882415771, &#39;close&#39;: 1.1522595882415771, &#39;date&#39;: 1538953200, &#39;formatted_date&#39;: &#39;2018-10-07&#39;, &#39;high&#39;: 1.1531364917755127, &#39;low&#39;: 1.146092414855957, &#39;open&#39;: 1.1523923873901367, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1494120359420776, &#39;close&#39;: 1.1494120359420776, &#39;date&#39;: 1539039600, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 1.150483250617981, &#39;low&#39;: 1.1433275938034058, &#39;open&#39;: 1.1494648456573486, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1506949663162231, &#39;close&#39;: 1.1506949663162231, &#39;date&#39;: 1539126000, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 1.1541999578475952, &#39;low&#39;: 1.1480661630630493, &#39;open&#39;: 1.1504037380218506, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1533360481262207, &#39;close&#39;: 1.1533360481262207, &#39;date&#39;: 1539212400, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 1.1597565412521362, &#39;low&#39;: 1.1532163619995117, &#39;open&#39;: 1.1532163619995117, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1590440273284912, &#39;close&#39;: 1.1590440273284912, &#39;date&#39;: 1539298800, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 1.1609547138214111, &#39;low&#39;: 1.1536953449249268, &#39;open&#39;: 1.1590440273284912, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1551345586776733, &#39;close&#39;: 1.1551345586776733, &#39;date&#39;: 1539558000, &#39;formatted_date&#39;: &#39;2018-10-14&#39;, &#39;high&#39;: 1.1605640649795532, &#39;low&#39;: 1.1543611288070679, &#39;open&#39;: 1.1550945043563843, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1583458185195923, &#39;close&#39;: 1.1583458185195923, &#39;date&#39;: 1539644400, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 1.1620069742202759, &#39;low&#39;: 1.156711220741272, &#39;open&#39;: 1.1583324670791626, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1575279235839844, &#39;close&#39;: 1.1575279235839844, &#39;date&#39;: 1539730800, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 1.1582117080688477, &#39;low&#39;: 1.1521799564361572, &#39;open&#39;: 1.15763521194458, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1500862836837769, &#39;close&#39;: 1.1500862836837769, &#39;date&#39;: 1539817200, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 1.1527377367019653, &#39;low&#39;: 1.1482902765274048, &#39;open&#39;: 1.1500862836837769, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1460003852844238, &#39;close&#39;: 1.1460003852844238, &#39;date&#39;: 1539903600, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 1.151450276374817, &#39;low&#39;: 1.1433666944503784, &#39;open&#39;: 1.145514726638794, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1509466171264648, &#39;close&#39;: 1.1509466171264648, &#39;date&#39;: 1540162800, &#39;formatted_date&#39;: &#39;2018-10-21&#39;, &#39;high&#39;: 1.1551998853683472, &#39;low&#39;: 1.1462368965148926, &#39;open&#39;: 1.1511188745498657, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1467890739440918, &#39;close&#39;: 1.1467890739440918, &#39;date&#39;: 1540249200, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 1.1489763259887695, &#39;low&#39;: 1.1439945697784424, &#39;open&#39;: 1.1464734077453613, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.147315263748169, &#39;close&#39;: 1.147315263748169, &#39;date&#39;: 1540335600, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 1.1475785970687866, &#39;low&#39;: 1.138407588005066, &#39;open&#39;: 1.1472625732421875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1399258375167847, &#39;close&#39;: 1.1399258375167847, &#39;date&#39;: 1540422000, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 1.143079161643982, &#39;low&#39;: 1.1366219520568848, &#39;open&#39;: 1.1398738622665405, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1377859115600586, &#39;close&#39;: 1.1377859115600586, &#39;date&#39;: 1540508400, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 1.139847993850708, &#39;low&#39;: 1.133619785308838, &#39;open&#39;: 1.1375141143798828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1398738622665405, &#39;close&#39;: 1.1398738622665405, &#39;date&#39;: 1540771200, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 1.1415785551071167, &#39;low&#39;: 1.1364411115646362, &#39;open&#39;: 1.1398738622665405, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.137617588043213, &#39;close&#39;: 1.137617588043213, &#39;date&#39;: 1540857600, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 1.1387057304382324, &#39;low&#39;: 1.1347389221191406, &#39;open&#39;: 1.1375141143798828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1346358060836792, &#39;close&#39;: 1.1346358060836792, &#39;date&#39;: 1540944000, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 1.1360150575637817, &#39;low&#39;: 1.1311705112457275, &#39;open&#39;: 1.1345844268798828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1316697597503662, &#39;close&#39;: 1.1316697597503662, &#39;date&#39;: 1541030400, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 1.1413179636001587, &#39;low&#39;: 1.1313753128051758, &#39;open&#39;: 1.1313880681991577, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1403288841247559, &#39;close&#39;: 1.1403288841247559, &#39;date&#39;: 1541116800, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 1.1455409526824951, &#39;low&#39;: 1.1375658512115479, &#39;open&#39;: 1.1402769088745117, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1397570371627808, &#39;close&#39;: 1.1397570371627808, &#39;date&#39;: 1541376000, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 1.1406410932540894, &#39;low&#39;: 1.135524868965149, &#39;open&#39;: 1.1397050619125366, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.141291856765747, &#39;close&#39;: 1.141291856765747, &#39;date&#39;: 1541462400, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 1.1438113451004028, &#39;low&#39;: 1.1393284797668457, &#39;open&#39;: 1.140862226486206, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1438506841659546, &#39;close&#39;: 1.1438506841659546, &#39;date&#39;: 1541548800, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 1.149993658065796, &#39;low&#39;: 1.1400558948516846, &#39;open&#39;: 1.144099235534668, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1434059143066406, &#39;close&#39;: 1.1434059143066406, &#39;date&#39;: 1541635200, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 1.144426703453064, &#39;low&#39;: 1.1405109167099, &#39;open&#39;: 1.1433275938034058, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1368415355682373, &#39;close&#39;: 1.1368415355682373, &#39;date&#39;: 1541721600, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 1.1369191408157349, &#39;low&#39;: 1.132502794265747, &#39;open&#39;: 1.1368545293807983, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.132502794265747, &#39;close&#39;: 1.132502794265747, &#39;date&#39;: 1541980800, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 1.1332728862762451, &#39;low&#39;: 1.1241639852523804, &#39;open&#39;: 1.1324771642684937, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1233429908752441, &#39;close&#39;: 1.1233429908752441, &#39;date&#39;: 1542067200, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 1.1291906833648682, &#39;low&#39;: 1.1223218441009521, &#39;open&#39;: 1.1224100589752197, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1311193704605103, &#39;close&#39;: 1.1311193704605103, &#39;date&#39;: 1542153600, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 1.1339668035507202, &#39;low&#39;: 1.126481294631958, &#39;open&#39;: 1.1316057443618774, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.131183385848999, &#39;close&#39;: 1.131183385848999, &#39;date&#39;: 1542240000, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 1.1351124048233032, &#39;low&#39;: 1.1274974346160889, &#39;open&#39;: 1.1313625574111938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1324899196624756, &#39;close&#39;: 1.1324899196624756, &#39;date&#39;: 1542326400, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 1.141422152519226, &#39;low&#39;: 1.1322592496871948, &#39;open&#39;: 1.13252854347229, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.141396164894104, &#39;close&#39;: 1.141396164894104, &#39;date&#39;: 1542585600, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 1.1462894678115845, &#39;low&#39;: 1.1394453048706055, &#39;open&#39;: 1.1412137746810913, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1455016136169434, &#39;close&#39;: 1.1455016136169434, &#39;date&#39;: 1542672000, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 1.1472758054733276, &#39;low&#39;: 1.1387057304382324, &#39;open&#39;: 1.1454753875732422, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1372424364089966, &#39;close&#39;: 1.1372424364089966, &#39;date&#39;: 1542758400, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 1.1422044038772583, &#39;low&#39;: 1.1366348266601562, &#39;open&#39;: 1.137268304824829, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1388354301452637, &#39;close&#39;: 1.1388354301452637, &#39;date&#39;: 1542844800, &#39;formatted_date&#39;: &#39;2018-11-22&#39;, &#39;high&#39;: 1.1434059143066406, &#39;low&#39;: 1.1386280059814453, &#39;open&#39;: 1.1388872861862183, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1403158903121948, &#39;close&#39;: 1.1403158903121948, &#39;date&#39;: 1542931200, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 1.1419435739517212, &#39;low&#39;: 1.1332343816757202, &#39;open&#39;: 1.1402637958526611, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1337354183197021, &#39;close&#39;: 1.1337354183197021, &#39;date&#39;: 1543190400, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 1.1383557319641113, &#39;low&#39;: 1.132733702659607, &#39;open&#39;: 1.1338896751403809, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1333370208740234, &#39;close&#39;: 1.1333370208740234, &#39;date&#39;: 1543276800, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 1.1344943046569824, &#39;low&#39;: 1.1279425621032715, &#39;open&#39;: 1.1334270238876343, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1298797130584717, &#39;close&#39;: 1.1298797130584717, &#39;date&#39;: 1543363200, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 1.130799651145935, &#39;low&#39;: 1.1267732381820679, &#39;open&#39;: 1.129713773727417, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1368545293807983, &#39;close&#39;: 1.1368545293807983, &#39;date&#39;: 1543449600, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 1.1401468515396118, &#39;low&#39;: 1.1349579095840454, &#39;open&#39;: 1.1366606950759888, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1392766237258911, &#39;close&#39;: 1.1392766237258911, &#39;date&#39;: 1543536000, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 1.1401208639144897, &#39;low&#39;: 1.1314777135849, &#39;open&#39;: 1.1392766237258911, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1342240571975708, &#39;close&#39;: 1.1342240571975708, &#39;date&#39;: 1543795200, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 1.1380059719085693, &#39;low&#39;: 1.132169485092163, &#39;open&#39;: 1.1341854333877563, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.135486125946045, &#39;close&#39;: 1.135486125946045, &#39;date&#39;: 1543881600, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 1.14177405834198, &#39;low&#39;: 1.1343270540237427, &#39;open&#39;: 1.135589361190796, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1342884302139282, &#39;close&#39;: 1.1342884302139282, &#39;date&#39;: 1543968000, &#39;formatted_date&#39;: &#39;2018-12-05&#39;, &#39;high&#39;: 1.1360280513763428, &#39;low&#39;: 1.1315033435821533, &#39;open&#39;: 1.1343655586242676, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.13490629196167, &#39;close&#39;: 1.13490629196167, &#39;date&#39;: 1544054400, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 1.1412267684936523, &#39;low&#39;: 1.132336139678955, &#39;open&#39;: 1.1347260475158691, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1374752521514893, &#39;close&#39;: 1.1374752521514893, &#39;date&#39;: 1544140800, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 1.1410704851150513, &#39;low&#39;: 1.1361312866210938, &#39;open&#39;: 1.137682318687439, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1400948762893677, &#39;close&#39;: 1.1400948762893677, &#39;date&#39;: 1544400000, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 1.1445575952529907, &#39;low&#39;: 1.1362345218658447, &#39;open&#39;: 1.140380859375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1356538534164429, &#39;close&#39;: 1.1356538534164429, &#39;date&#39;: 1544486400, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 1.1399389505386353, &#39;low&#39;: 1.1307612657546997, &#39;open&#39;: 1.135499119758606, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1323105096817017, &#39;close&#39;: 1.1323105096817017, &#39;date&#39;: 1544572800, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 1.138044834136963, &#39;low&#39;: 1.1316184997558594, &#39;open&#39;: 1.1322848796844482, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1373459100723267, &#39;close&#39;: 1.1373459100723267, &#39;date&#39;: 1544659200, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 1.139250636100769, &#39;low&#39;: 1.1333627700805664, &#39;open&#39;: 1.137268304824829, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1363636255264282, &#39;close&#39;: 1.1363636255264282, &#39;date&#39;: 1544745600, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 1.1366219520568848, &#39;low&#39;: 1.1270780563354492, &#39;open&#39;: 1.1363248825073242, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1305949687957764, &#39;close&#39;: 1.1305949687957764, &#39;date&#39;: 1545004800, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 1.1353960037231445, &#39;low&#39;: 1.1304799318313599, &#39;open&#39;: 1.130671739578247, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1349835395812988, &#39;close&#39;: 1.1349835395812988, &#39;date&#39;: 1545091200, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 1.1403002738952637, &#39;low&#39;: 1.133863925933838, &#39;open&#39;: 1.1349965333938599, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1375399827957153, &#39;close&#39;: 1.1375399827957153, &#39;date&#39;: 1545177600, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 1.1439684629440308, &#39;low&#39;: 1.1375658512115479, &#39;open&#39;: 1.1375658512115479, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1389521360397339, &#39;close&#39;: 1.1389521360397339, &#39;date&#39;: 1545264000, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 1.1484880447387695, &#39;low&#39;: 1.1378376483917236, &#39;open&#39;: 1.138783574104309, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1456853151321411, &#39;close&#39;: 1.1456853151321411, &#39;date&#39;: 1545350400, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 1.147446870803833, &#39;low&#39;: 1.138783574104309, &#39;open&#39;: 1.1457772254943848, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1372811794281006, &#39;close&#39;: 1.1372811794281006, &#39;date&#39;: 1545609600, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 1.143837571144104, &#39;low&#39;: 1.137203574180603, &#39;open&#39;: 1.137203574180603, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.140393853187561, &#39;close&#39;: 1.140393853187561, &#39;date&#39;: 1545696000, &#39;formatted_date&#39;: &#39;2018-12-25&#39;, &#39;high&#39;: 1.1422044038772583, &#39;low&#39;: 1.1370097398757935, &#39;open&#39;: 1.1405109167099, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1415525674819946, &#39;close&#39;: 1.1415525674819946, &#39;date&#39;: 1545782400, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 1.1419435739517212, &#39;low&#39;: 1.137617588043213, &#39;open&#39;: 1.1413440704345703, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1361312866210938, &#39;close&#39;: 1.1361312866210938, &#39;date&#39;: 1545868800, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 1.1434321403503418, &#39;low&#39;: 1.1359118223190308, &#39;open&#39;: 1.1363636255264282, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.143105387687683, &#39;close&#39;: 1.143105387687683, &#39;date&#39;: 1545955200, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 1.147315263748169, &#39;low&#39;: 1.1430922746658325, &#39;open&#39;: 1.1430922746658325, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1439945697784424, &#39;close&#39;: 1.1439945697784424, &#39;date&#39;: 1546214400, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 1.1465917825698853, &#39;low&#39;: 1.14223051071167, &#39;open&#39;: 1.1438899040222168, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1493064165115356, &#39;close&#39;: 1.1493064165115356, &#39;date&#39;: 1546300800, &#39;formatted_date&#39;: &#39;2019-01-01&#39;, &#39;high&#39;: 1.155001163482666, &#39;low&#39;: 1.146499752998352, &#39;open&#39;: 1.1494252681732178, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.14617121219635, &#39;close&#39;: 1.14617121219635, &#39;date&#39;: 1546387200, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 1.1497001647949219, &#39;low&#39;: 1.1345715522766113, &#39;open&#39;: 1.1461317539215088, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1318106651306152, &#39;close&#39;: 1.1318106651306152, &#39;date&#39;: 1546473600, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 1.1409143209457397, &#39;low&#39;: 1.131733775138855, &#39;open&#39;: 1.131733775138855, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1391078233718872, &#39;close&#39;: 1.1391078233718872, &#39;date&#39;: 1546560000, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 1.14177405834198, &#39;low&#39;: 1.1348161697387695, &#39;open&#39;: 1.1390948295593262, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1410444974899292, &#39;close&#39;: 1.1410444974899292, &#39;date&#39;: 1546819200, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 1.147446870803833, &#39;low&#39;: 1.1405240297317505, &#39;open&#39;: 1.141291856765747, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1479737758636475, &#39;close&#39;: 1.1479737758636475, &#39;date&#39;: 1546905600, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 1.1486331224441528, &#39;low&#39;: 1.1424654722213745, &#39;open&#39;: 1.1479343175888062, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1456066370010376, &#39;close&#39;: 1.1456066370010376, &#39;date&#39;: 1546992000, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 1.1540148258209229, &#39;low&#39;: 1.144164800643921, &#39;open&#39;: 1.1457247734069824, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1554949283599854, &#39;close&#39;: 1.1554949283599854, &#39;date&#39;: 1547078400, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 1.157139539718628, &#39;low&#39;: 1.151145339012146, &#39;open&#39;: 1.1555217504501343, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.151012897491455, &#39;close&#39;: 1.151012897491455, &#39;date&#39;: 1547164800, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 1.1539002656936646, &#39;low&#39;: 1.1459741592407227, &#39;open&#39;: 1.1515165567398071, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.146013617515564, &#39;close&#39;: 1.146013617515564, &#39;date&#39;: 1547424000, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 1.148369312286377, &#39;low&#39;: 1.1451605558395386, &#39;open&#39;: 1.1462763547897339, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1472889184951782, &#39;close&#39;: 1.1472889184951782, &#39;date&#39;: 1547510400, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 1.1491611003875732, &#39;low&#39;: 1.1386150121688843, &#39;open&#39;: 1.147315263748169, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1416828632354736, &#39;close&#39;: 1.1416828632354736, &#39;date&#39;: 1547596800, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 1.14223051071167, &#39;low&#39;: 1.1378893852233887, &#39;open&#39;: 1.141409158706665, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1398088932037354, &#39;close&#39;: 1.1398088932037354, &#39;date&#39;: 1547683200, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 1.1407711505889893, &#39;low&#39;: 1.1372424364089966, &#39;open&#39;: 1.1398999691009521, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.13926362991333, &#39;close&#39;: 1.13926362991333, &#39;date&#39;: 1547769600, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 1.1410315036773682, &#39;low&#39;: 1.1354217529296875, &#39;open&#39;: 1.1391856670379639, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1365574598312378, &#39;close&#39;: 1.1365574598312378, &#39;date&#39;: 1548028800, &#39;formatted_date&#39;: &#39;2019-01-21&#39;, &#39;high&#39;: 1.1388224363327026, &#39;low&#39;: 1.1357957124710083, &#39;open&#39;: 1.1365444660186768, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.136932134628296, &#39;close&#39;: 1.136932134628296, &#39;date&#39;: 1548115200, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 1.1375269889831543, &#39;low&#39;: 1.1336840391159058, &#39;open&#39;: 1.1369578838348389, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1364023685455322, &#39;close&#39;: 1.1364023685455322, &#39;date&#39;: 1548201600, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 1.1393154859542847, &#39;low&#39;: 1.1351640224456787, &#39;open&#39;: 1.1363766193389893, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1388224363327026, &#39;close&#39;: 1.1388224363327026, &#39;date&#39;: 1548288000, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 1.1393414735794067, &#39;low&#39;: 1.131324052810669, &#39;open&#39;: 1.1387057304382324, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1313496828079224, &#39;close&#39;: 1.1313496828079224, &#39;date&#39;: 1548374400, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 1.1411616802215576, &#39;low&#39;: 1.1305822134017944, &#39;open&#39;: 1.1309914588928223, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1413049697875977, &#39;close&#39;: 1.1413049697875977, &#39;date&#39;: 1548633600, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 1.1445575952529907, &#39;low&#39;: 1.1390948295593262, &#39;open&#39;: 1.141265869140625, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.143000841140747, &#39;close&#39;: 1.143000841140747, &#39;date&#39;: 1548720000, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 1.1450556516647339, &#39;low&#39;: 1.1411746740341187, &#39;open&#39;: 1.1429747343063354, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1435366868972778, &#39;close&#39;: 1.1435366868972778, &#39;date&#39;: 1548806400, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 1.1450294256210327, &#39;low&#39;: 1.140862226486206, &#39;open&#39;: 1.1435105800628662, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1487650871276855, &#39;close&#39;: 1.1487650871276855, &#39;date&#39;: 1548892800, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 1.1513707637786865, &#39;low&#39;: 1.1450556516647339, &#39;open&#39;: 1.1485539674758911, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1449507474899292, &#39;close&#39;: 1.1449507474899292, &#39;date&#39;: 1548979200, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 1.1488442420959473, &#39;low&#39;: 1.1435105800628662, &#39;open&#39;: 1.145081877708435, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1455278396606445, &#39;close&#39;: 1.1455278396606445, &#39;date&#39;: 1549238400, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 1.1462632417678833, &#39;low&#39;: 1.1425436735153198, &#39;open&#39;: 1.1457247734069824, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1436283588409424, &#39;close&#39;: 1.1436283588409424, &#39;date&#39;: 1549324800, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 1.1442956924438477, &#39;low&#39;: 1.1403288841247559, &#39;open&#39;: 1.14357590675354, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.140992522239685, &#39;close&#39;: 1.140992522239685, &#39;date&#39;: 1549411200, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 1.141096591949463, &#39;low&#39;: 1.1375399827957153, &#39;open&#39;: 1.1408753395080566, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1365960836410522, &#39;close&#39;: 1.1365960836410522, &#39;date&#39;: 1549497600, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 1.1370097398757935, &#39;low&#39;: 1.1326054334640503, &#39;open&#39;: 1.1366348266601562, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1338768005371094, &#39;close&#39;: 1.1338768005371094, &#39;date&#39;: 1549584000, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 1.1350995302200317, &#39;low&#39;: 1.132182240486145, &#39;open&#39;: 1.1339925527572632, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1324259042739868, &#39;close&#39;: 1.1324259042739868, &#39;date&#39;: 1549843200, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 1.133144497871399, &#39;low&#39;: 1.1273448467254639, &#39;open&#39;: 1.1324259042739868, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1279042959213257, &#39;close&#39;: 1.1279042959213257, &#39;date&#39;: 1549929600, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 1.1319899559020996, &#39;low&#39;: 1.125885248184204, &#39;open&#39;: 1.128031611442566, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1334655284881592, &#39;close&#39;: 1.1334655284881592, &#39;date&#39;: 1550016000, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 1.134429931640625, &#39;low&#39;: 1.1282861232757568, &#39;open&#39;: 1.1332728862762451, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.12649405002594, &#39;close&#39;: 1.12649405002594, &#39;date&#39;: 1550102400, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 1.130825161933899, &#39;low&#39;: 1.1250618696212769, &#39;open&#39;: 1.126405119895935, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1295350790023804, &#39;close&#39;: 1.1295350790023804, &#39;date&#39;: 1550188800, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 1.1298158168792725, &#39;low&#39;: 1.1234945058822632, &#39;open&#39;: 1.1294713020324707, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1298030614852905, &#39;close&#39;: 1.1298030614852905, &#39;date&#39;: 1550448000, &#39;formatted_date&#39;: &#39;2019-02-18&#39;, &#39;high&#39;: 1.1334141492843628, &#39;low&#39;: 1.1294840574264526, &#39;open&#39;: 1.1294840574264526, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.131196141242981, &#39;close&#39;: 1.131196141242981, &#39;date&#39;: 1550534400, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 1.1341854333877563, &#39;low&#39;: 1.1277008056640625, &#39;open&#39;: 1.131208896636963, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1343011856079102, &#39;close&#39;: 1.1343011856079102, &#39;date&#39;: 1550620800, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 1.1369578838348389, &#39;low&#39;: 1.1325926780700684, &#39;open&#39;: 1.1343011856079102, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1346358060836792, &#39;close&#39;: 1.1346358060836792, &#39;date&#39;: 1550707200, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 1.1365832090377808, &#39;low&#39;: 1.1322592496871948, &#39;open&#39;: 1.1346358060836792, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1343011856079102, &#39;close&#39;: 1.1343011856079102, &#39;date&#39;: 1550793600, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 1.1355764865875244, &#39;low&#39;: 1.131874680519104, &#39;open&#39;: 1.1339796781539917, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1342240571975708, &#39;close&#39;: 1.1342240571975708, &#39;date&#39;: 1551052800, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 1.1367511749267578, &#39;low&#39;: 1.13379967212677, &#39;open&#39;: 1.1340183019638062, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1367511749267578, &#39;close&#39;: 1.1367511749267578, &#39;date&#39;: 1551139200, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 1.1378635168075562, &#39;low&#39;: 1.1346487998962402, &#39;open&#39;: 1.1366219520568848, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1393154859542847, &#39;close&#39;: 1.1393154859542847, &#39;date&#39;: 1551225600, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 1.140380859375, &#39;low&#39;: 1.1363893747329712, &#39;open&#39;: 1.1394193172454834, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1380189657211304, &#39;close&#39;: 1.1380189657211304, &#39;date&#39;: 1551312000, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 1.1422044038772583, &#39;low&#39;: 1.1360796689987183, &#39;open&#39;: 1.1377859115600586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1373459100723267, &#39;close&#39;: 1.1373459100723267, &#39;date&#39;: 1551398400, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 1.1408882141113281, &#39;low&#39;: 1.135434627532959, &#39;open&#39;: 1.137255311012268, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1375917196273804, &#39;close&#39;: 1.1375917196273804, &#39;date&#39;: 1551657600, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 1.1375269889831543, &#39;low&#39;: 1.1310553550720215, &#39;open&#39;: 1.1375269889831543, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1337354183197021, &#39;close&#39;: 1.1337354183197021, &#39;date&#39;: 1551744000, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 1.1339154243469238, &#39;low&#39;: 1.1293182373046875, &#39;open&#39;: 1.133825421333313, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1307101249694824, &#39;close&#39;: 1.1307101249694824, &#39;date&#39;: 1551830400, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 1.132502794265747, &#39;low&#39;: 1.1291651725769043, &#39;open&#39;: 1.1306205987930298, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1314009428024292, &#39;close&#39;: 1.1314009428024292, &#39;date&#39;: 1551916800, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 1.1319899559020996, &#39;low&#39;: 1.1208752393722534, &#39;open&#39;: 1.1312474012374878, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1198333501815796, &#39;close&#39;: 1.1198333501815796, &#39;date&#39;: 1552003200, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 1.1244546175003052, &#39;low&#39;: 1.1186057329177856, &#39;open&#39;: 1.1201971769332886, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1232421398162842, &#39;close&#39;: 1.1232421398162842, &#39;date&#39;: 1552262400, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 1.1257457733154297, &#39;low&#39;: 1.1222589015960693, &#39;open&#39;: 1.123103380203247, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1259232759475708, &#39;close&#39;: 1.1259232759475708, &#39;date&#39;: 1552348800, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 1.129433035850525, &#39;low&#39;: 1.1250239610671997, &#39;open&#39;: 1.125885248184204, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1287446022033691, &#39;close&#39;: 1.1287446022033691, &#39;date&#39;: 1552435200, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 1.1313753128051758, &#39;low&#39;: 1.1279042959213257, &#39;open&#39;: 1.1286808252334595, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.133105993270874, &#39;close&#39;: 1.133105993270874, &#39;date&#39;: 1552521600, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 1.133594036102295, &#39;low&#39;: 1.1294713020324707, &#39;open&#39;: 1.1332857608795166, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1308379173278809, &#39;close&#39;: 1.1308379173278809, &#39;date&#39;: 1552608000, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 1.1343011856079102, &#39;low&#39;: 1.1302244663238525, &#39;open&#39;: 1.1307612657546997, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1319772005081177, &#39;close&#39;: 1.1319772005081177, &#39;date&#39;: 1552867200, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 1.1359764337539673, &#39;low&#39;: 1.1234692335128784, &#39;open&#39;: 1.1319899559020996, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.133619785308838, &#39;close&#39;: 1.133619785308838, &#39;date&#39;: 1552953600, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 1.1363636255264282, &#39;low&#39;: 1.1334270238876343, &#39;open&#39;: 1.13355553150177, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.135486125946045, &#39;close&#39;: 1.135486125946045, &#39;date&#39;: 1553040000, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 1.1367511749267578, &#39;low&#39;: 1.1336454153060913, &#39;open&#39;: 1.1353057622909546, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1427918672561646, &#39;close&#39;: 1.1427918672561646, &#39;date&#39;: 1553126400, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 1.1439945697784424, &#39;low&#39;: 1.1355119943618774, &#39;open&#39;: 1.143000841140747, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1375011205673218, &#39;close&#39;: 1.1375011205673218, &#39;date&#39;: 1553212800, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 1.139211654663086, &#39;low&#39;: 1.1275609731674194, &#39;open&#39;: 1.1373976469039917, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.129586100578308, &#39;close&#39;: 1.129586100578308, &#39;date&#39;: 1553472000, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 1.1331701278686523, &#39;low&#39;: 1.1290504932403564, &#39;open&#39;: 1.129611611366272, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.131580114364624, &#39;close&#39;: 1.131580114364624, &#39;date&#39;: 1553558400, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 1.1328877210617065, &#39;low&#39;: 1.1279551982879639, &#39;open&#39;: 1.1314520835876465, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.127484679222107, &#39;close&#39;: 1.127484679222107, &#39;date&#39;: 1553644800, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 1.1285535097122192, &#39;low&#39;: 1.1242650747299194, &#39;open&#39;: 1.1274465322494507, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1251758337020874, &#39;close&#39;: 1.1251758337020874, &#39;date&#39;: 1553731200, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 1.1262998580932617, &#39;low&#39;: 1.121516227722168, &#39;open&#39;: 1.1251378059387207, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1230024099349976, &#39;close&#39;: 1.1230024099349976, &#39;date&#39;: 1553817600, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 1.1246063709259033, &#39;low&#39;: 1.1210887432098389, &#39;open&#39;: 1.1229519844055176, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1223849058151245, &#39;close&#39;: 1.1223849058151245, &#39;date&#39;: 1554073200, &#39;formatted_date&#39;: &#39;2019-03-31&#39;, &#39;high&#39;: 1.1250239610671997, &#39;low&#39;: 1.1209882497787476, &#39;open&#39;: 1.1223469972610474, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1205737590789795, &#39;close&#39;: 1.1205737590789795, &#39;date&#39;: 1554159600, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 1.1214005947113037, &#39;low&#39;: 1.1184556484222412, &#39;open&#39;: 1.1205987930297852, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1203854084014893, &#39;close&#39;: 1.1203854084014893, &#39;date&#39;: 1554246000, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 1.125499963760376, &#39;low&#39;: 1.1202473640441895, &#39;open&#39;: 1.1202850341796875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1246949434280396, &#39;close&#39;: 1.1246949434280396, &#39;date&#39;: 1554332400, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 1.124985933303833, &#39;low&#39;: 1.1209254264831543, &#39;open&#39;: 1.124530553817749, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1225864887237549, &#39;close&#39;: 1.1225864887237549, &#39;date&#39;: 1554418800, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 1.1241512298583984, &#39;low&#39;: 1.1211642026901245, &#39;open&#39;: 1.1224603652954102, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.121956706047058, &#39;close&#39;: 1.121956706047058, &#39;date&#39;: 1554678000, &#39;formatted_date&#39;: &#39;2019-04-07&#39;, &#39;high&#39;: 1.1274083852767944, &#39;low&#39;: 1.1215540170669556, &#39;open&#39;: 1.1222084760665894, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1256444454193115, &#39;close&#39;: 1.1256444454193115, &#39;date&#39;: 1554764400, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 1.1287955045700073, &#39;low&#39;: 1.1256444454193115, &#39;open&#39;: 1.1256444454193115, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.126697063446045, &#39;close&#39;: 1.126697063446045, &#39;date&#39;: 1554850800, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 1.1282861232757568, &#39;low&#39;: 1.123103380203247, &#39;open&#39;: 1.12649405002594, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1276500225067139, &#39;close&#39;: 1.1276500225067139, &#39;date&#39;: 1554937200, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 1.1287446022033691, &#39;low&#39;: 1.1256064176559448, &#39;open&#39;: 1.1276118755340576, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1260753870010376, &#39;close&#39;: 1.1260753870010376, &#39;date&#39;: 1555023600, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 1.132502794265747, &#39;low&#39;: 1.1258344650268555, &#39;open&#39;: 1.1259359121322632, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1305055618286133, &#39;close&#39;: 1.1305055618286133, &#39;date&#39;: 1555282800, &#39;formatted_date&#39;: &#39;2019-04-14&#39;, &#39;high&#39;: 1.1322463750839233, &#39;low&#39;: 1.1299434900283813, &#39;open&#39;: 1.130365014076233, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1304928064346313, &#39;close&#39;: 1.1304928064346313, &#39;date&#39;: 1555369200, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 1.1314995288848877, &#39;low&#39;: 1.128604531288147, &#39;open&#39;: 1.130441665649414, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.128502607345581, &#39;close&#39;: 1.128502607345581, &#39;date&#39;: 1555455600, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 1.13237464427948, &#39;low&#39;: 1.1281843185424805, &#39;open&#39;: 1.1285152435302734, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.129713773727417, &#39;close&#39;: 1.129713773727417, &#39;date&#39;: 1555542000, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 1.130600094795227, &#39;low&#39;: 1.1237722635269165, &#39;open&#39;: 1.1300712823867798, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1235954761505127, &#39;close&#39;: 1.1235954761505127, &#39;date&#39;: 1555628400, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 1.125112533569336, &#39;low&#39;: 1.1233052015304565, &#39;open&#39;: 1.123608112335205, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1244546175003052, &#39;close&#39;: 1.1244546175003052, &#39;date&#39;: 1555887600, &#39;formatted_date&#39;: &#39;2019-04-21&#39;, &#39;high&#39;: 1.1263798475265503, &#39;low&#39;: 1.1236711740493774, &#39;open&#39;: 1.1244546175003052, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1258978843688965, &#39;close&#39;: 1.1258978843688965, &#39;date&#39;: 1555974000, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 1.1261261701583862, &#39;low&#39;: 1.1193444728851318, &#39;open&#39;: 1.125885248184204, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.122435212135315, &#39;close&#39;: 1.122435212135315, &#39;date&#39;: 1556060400, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 1.1224603652954102, &#39;low&#39;: 1.1183055639266968, &#39;open&#39;: 1.1224478483200073, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1153494119644165, &#39;close&#39;: 1.1153494119644165, &#39;date&#39;: 1556146800, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 1.1164003610610962, &#39;low&#39;: 1.1121737957000732, &#39;open&#39;: 1.1156978607177734, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.113684892654419, &#39;close&#39;: 1.113684892654419, &#39;date&#39;: 1556233200, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 1.1172809600830078, &#39;low&#39;: 1.112297534942627, &#39;open&#39;: 1.113709807395935, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 1.1150261163711548, &#39;close&#39;: 1.1150261163711548, &#39;date&#39;: 1556492400, &#39;formatted_date&#39;: &#39;2019-04-28&#39;, &#39;high&#39;: 1.116994023323059, &#39;low&#39;: 1.1145538091659546, &#39;open&#39;: 1.1149017810821533, &#39;volume&#39;: 0}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: 3600}}, &#39;JPY=X&#39;: {&#39;currency&#39;: &#39;JPY&#39;, &#39;eventsData&#39;: {}, &#39;firstTradeDate&#39;: {&#39;date&#39;: 846633600, &#39;formatted_date&#39;: &#39;1996-10-30&#39;}, &#39;instrumentType&#39;: &#39;CURRENCY&#39;, &#39;prices&#39;: [{&#39;adjclose&#39;: 109.0979995727539, &#39;close&#39;: 109.0979995727539, &#39;date&#39;: 1525042800, &#39;formatted_date&#39;: &#39;2018-04-29&#39;, &#39;high&#39;: 109.43900299072266, &#39;low&#39;: 109.0199966430664, &#39;open&#39;: 109.09500122070312, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.322998046875, &#39;close&#39;: 109.322998046875, &#39;date&#39;: 1525129200, &#39;formatted_date&#39;: &#39;2018-04-30&#39;, &#39;high&#39;: 109.78700256347656, &#39;low&#39;: 109.25800323486328, &#39;open&#39;: 109.30599975585938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.87200164794922, &#39;close&#39;: 109.87200164794922, &#39;date&#39;: 1525215600, &#39;formatted_date&#39;: &#39;2018-05-01&#39;, &#39;high&#39;: 109.99800109863281, &#39;low&#39;: 109.6520004272461, &#39;open&#39;: 109.84600067138672, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.8270034790039, &#39;close&#39;: 109.8270034790039, &#39;date&#39;: 1525302000, &#39;formatted_date&#39;: &#39;2018-05-02&#39;, &#39;high&#39;: 109.84400177001953, &#39;low&#39;: 108.93000030517578, &#39;open&#39;: 109.8219985961914, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.09600067138672, &#39;close&#39;: 109.09600067138672, &#39;date&#39;: 1525388400, &#39;formatted_date&#39;: &#39;2018-05-03&#39;, &#39;high&#39;: 109.26100158691406, &#39;low&#39;: 108.64900207519531, &#39;open&#39;: 109.11900329589844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.14600372314453, &#39;close&#39;: 109.14600372314453, &#39;date&#39;: 1525647600, &#39;formatted_date&#39;: &#39;2018-05-06&#39;, &#39;high&#39;: 109.38200378417969, &#39;low&#39;: 108.75700378417969, &#39;open&#39;: 109.13899993896484, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.94300079345703, &#39;close&#39;: 108.94300079345703, &#39;date&#39;: 1525734000, &#39;formatted_date&#39;: &#39;2018-05-07&#39;, &#39;high&#39;: 109.33100128173828, &#39;low&#39;: 108.85800170898438, &#39;open&#39;: 108.94000244140625, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.02400207519531, &#39;close&#39;: 109.02400207519531, &#39;date&#39;: 1525820400, &#39;formatted_date&#39;: &#39;2018-05-08&#39;, &#39;high&#39;: 109.82099914550781, &#39;low&#39;: 109.0009994506836, &#39;open&#39;: 109.03900146484375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.84700012207031, &#39;close&#39;: 109.84700012207031, &#39;date&#39;: 1525906800, &#39;formatted_date&#39;: &#39;2018-05-09&#39;, &#39;high&#39;: 109.98699951171875, &#39;low&#39;: 109.33200073242188, &#39;open&#39;: 109.82599639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.43599700927734, &#39;close&#39;: 109.43599700927734, &#39;date&#39;: 1525993200, &#39;formatted_date&#39;: &#39;2018-05-10&#39;, &#39;high&#39;: 109.56199645996094, &#39;low&#39;: 109.16100311279297, &#39;open&#39;: 109.46399688720703, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.33799743652344, &#39;close&#39;: 109.33799743652344, &#39;date&#39;: 1526252400, &#39;formatted_date&#39;: &#39;2018-05-13&#39;, &#39;high&#39;: 109.63500213623047, &#39;low&#39;: 109.20999908447266, &#39;open&#39;: 109.32599639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.73100280761719, &#39;close&#39;: 109.73100280761719, &#39;date&#39;: 1526338800, &#39;formatted_date&#39;: &#39;2018-05-14&#39;, &#39;high&#39;: 110.36199951171875, &#39;low&#39;: 109.6729965209961, &#39;open&#39;: 109.72899627685547, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.2969970703125, &#39;close&#39;: 110.2969970703125, &#39;date&#39;: 1526425200, &#39;formatted_date&#39;: &#39;2018-05-15&#39;, &#39;high&#39;: 110.37899780273438, &#39;low&#39;: 110.04299926757812, &#39;open&#39;: 110.28299713134766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.35900115966797, &#39;close&#39;: 110.35900115966797, &#39;date&#39;: 1526511600, &#39;formatted_date&#39;: &#39;2018-05-16&#39;, &#39;high&#39;: 110.85800170898438, &#39;low&#39;: 110.09500122070312, &#39;open&#39;: 110.37999725341797, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.8280029296875, &#39;close&#39;: 110.8280029296875, &#39;date&#39;: 1526598000, &#39;formatted_date&#39;: &#39;2018-05-17&#39;, &#39;high&#39;: 111.0719985961914, &#39;low&#39;: 110.65599822998047, &#39;open&#39;: 110.84400177001953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.87999725341797, &#39;close&#39;: 110.87999725341797, &#39;date&#39;: 1526857200, &#39;formatted_date&#39;: &#39;2018-05-20&#39;, &#39;high&#39;: 111.38500213623047, &#39;low&#39;: 110.90599822998047, &#39;open&#39;: 110.91799926757812, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.97799682617188, &#39;close&#39;: 110.97799682617188, &#39;date&#39;: 1526943600, &#39;formatted_date&#39;: &#39;2018-05-21&#39;, &#39;high&#39;: 111.1709976196289, &#39;low&#39;: 110.8010025024414, &#39;open&#39;: 111.00700378417969, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.72599792480469, &#39;close&#39;: 110.72599792480469, &#39;date&#39;: 1527030000, &#39;formatted_date&#39;: &#39;2018-05-22&#39;, &#39;high&#39;: 110.8740005493164, &#39;low&#39;: 109.55899810791016, &#39;open&#39;: 110.7300033569336, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.86900329589844, &#39;close&#39;: 109.86900329589844, &#39;date&#39;: 1527116400, &#39;formatted_date&#39;: &#39;2018-05-23&#39;, &#39;high&#39;: 109.91300201416016, &#39;low&#39;: 108.97599792480469, &#39;open&#39;: 109.90899658203125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.31199645996094, &#39;close&#39;: 109.31199645996094, &#39;date&#39;: 1527202800, &#39;formatted_date&#39;: &#39;2018-05-24&#39;, &#39;high&#39;: 109.72100067138672, &#39;low&#39;: 109.11900329589844, &#39;open&#39;: 109.33000183105469, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.62300109863281, &#39;close&#39;: 109.62300109863281, &#39;date&#39;: 1527462000, &#39;formatted_date&#39;: &#39;2018-05-27&#39;, &#39;high&#39;: 109.73100280761719, &#39;low&#39;: 109.2509994506836, &#39;open&#39;: 109.63700103759766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.38899993896484, &#39;close&#39;: 109.38899993896484, &#39;date&#39;: 1527548400, &#39;formatted_date&#39;: &#39;2018-05-28&#39;, &#39;high&#39;: 109.38700103759766, &#39;low&#39;: 108.47599792480469, &#39;open&#39;: 109.38700103759766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.39399719238281, &#39;close&#39;: 108.39399719238281, &#39;date&#39;: 1527634800, &#39;formatted_date&#39;: &#39;2018-05-29&#39;, &#39;high&#39;: 109.05999755859375, &#39;low&#39;: 108.39900207519531, &#39;open&#39;: 108.4489974975586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.71199798583984, &#39;close&#39;: 108.71199798583984, &#39;date&#39;: 1527721200, &#39;formatted_date&#39;: &#39;2018-05-30&#39;, &#39;high&#39;: 108.98400115966797, &#39;low&#39;: 108.4000015258789, &#39;open&#39;: 108.7239990234375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.7490005493164, &#39;close&#39;: 108.7490005493164, &#39;date&#39;: 1527807600, &#39;formatted_date&#39;: &#39;2018-05-31&#39;, &#39;high&#39;: 109.72000122070312, &#39;low&#39;: 108.76200103759766, &#39;open&#39;: 108.76499938964844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.5979995727539, &#39;close&#39;: 109.5979995727539, &#39;date&#39;: 1528066800, &#39;formatted_date&#39;: &#39;2018-06-03&#39;, &#39;high&#39;: 109.7490005493164, &#39;low&#39;: 109.37300109863281, &#39;open&#39;: 109.5979995727539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.96299743652344, &#39;close&#39;: 109.96299743652344, &#39;date&#39;: 1528153200, &#39;formatted_date&#39;: &#39;2018-06-04&#39;, &#39;high&#39;: 109.98600006103516, &#39;low&#39;: 109.59300231933594, &#39;open&#39;: 109.9729995727539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.85900115966797, &#39;close&#39;: 109.85900115966797, &#39;date&#39;: 1528239600, &#39;formatted_date&#39;: &#39;2018-06-05&#39;, &#39;high&#39;: 110.21499633789062, &#39;low&#39;: 109.8010025024414, &#39;open&#39;: 109.87300109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.125, &#39;close&#39;: 110.125, &#39;date&#39;: 1528326000, &#39;formatted_date&#39;: &#39;2018-06-06&#39;, &#39;high&#39;: 110.21499633789062, &#39;low&#39;: 109.8499984741211, &#39;open&#39;: 110.11699676513672, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.69400024414062, &#39;close&#39;: 109.69400024414062, &#39;date&#39;: 1528412400, &#39;formatted_date&#39;: &#39;2018-06-07&#39;, &#39;high&#39;: 109.84500122070312, &#39;low&#39;: 109.1989974975586, &#39;open&#39;: 109.72200012207031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.44300079345703, &#39;close&#39;: 109.44300079345703, &#39;date&#39;: 1528671600, &#39;formatted_date&#39;: &#39;2018-06-10&#39;, &#39;high&#39;: 110.0469970703125, &#39;low&#39;: 109.39900207519531, &#39;open&#39;: 109.51000213623047, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.38600158691406, &#39;close&#39;: 110.38600158691406, &#39;date&#39;: 1528758000, &#39;formatted_date&#39;: &#39;2018-06-11&#39;, &#39;high&#39;: 110.47000122070312, &#39;low&#39;: 110.0999984741211, &#39;open&#39;: 110.36199951171875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.4520034790039, &#39;close&#39;: 110.4520034790039, &#39;date&#39;: 1528844400, &#39;formatted_date&#39;: &#39;2018-06-12&#39;, &#39;high&#39;: 110.7040023803711, &#39;low&#39;: 110.34300231933594, &#39;open&#39;: 110.46600341796875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.24199676513672, &#39;close&#39;: 110.24199676513672, &#39;date&#39;: 1528930800, &#39;formatted_date&#39;: &#39;2018-06-13&#39;, &#39;high&#39;: 110.45700073242188, &#39;low&#39;: 109.91899871826172, &#39;open&#39;: 110.24400329589844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.6449966430664, &#39;close&#39;: 110.6449966430664, &#39;date&#39;: 1529017200, &#39;formatted_date&#39;: &#39;2018-06-14&#39;, &#39;high&#39;: 110.89700317382812, &#39;low&#39;: 110.39199829101562, &#39;open&#39;: 110.66100311279297, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.61699676513672, &#39;close&#39;: 110.61699676513672, &#39;date&#39;: 1529276400, &#39;formatted_date&#39;: &#39;2018-06-17&#39;, &#39;high&#39;: 110.64900207519531, &#39;low&#39;: 110.30799865722656, &#39;open&#39;: 110.62300109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.13800048828125, &#39;close&#39;: 110.13800048828125, &#39;date&#39;: 1529362800, &#39;formatted_date&#39;: &#39;2018-06-18&#39;, &#39;high&#39;: 110.19300079345703, &#39;low&#39;: 109.55899810791016, &#39;open&#39;: 110.16899871826172, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.07099914550781, &#39;close&#39;: 110.07099914550781, &#39;date&#39;: 1529449200, &#39;formatted_date&#39;: &#39;2018-06-19&#39;, &#39;high&#39;: 110.24400329589844, &#39;low&#39;: 109.87000274658203, &#39;open&#39;: 110.08100128173828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.35199737548828, &#39;close&#39;: 110.35199737548828, &#39;date&#39;: 1529535600, &#39;formatted_date&#39;: &#39;2018-06-20&#39;, &#39;high&#39;: 110.7490005493164, &#39;low&#39;: 109.88600158691406, &#39;open&#39;: 110.34400177001953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.9520034790039, &#39;close&#39;: 109.9520034790039, &#39;date&#39;: 1529622000, &#39;formatted_date&#39;: &#39;2018-06-21&#39;, &#39;high&#39;: 110.20899963378906, &#39;low&#39;: 109.802001953125, &#39;open&#39;: 109.93599700927734, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.93699645996094, &#39;close&#39;: 109.93699645996094, &#39;date&#39;: 1529881200, &#39;formatted_date&#39;: &#39;2018-06-24&#39;, &#39;high&#39;: 109.93499755859375, &#39;low&#39;: 109.38099670410156, &#39;open&#39;: 109.93499755859375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.64299774169922, &#39;close&#39;: 109.64299774169922, &#39;date&#39;: 1529967600, &#39;formatted_date&#39;: &#39;2018-06-25&#39;, &#39;high&#39;: 110.01599884033203, &#39;low&#39;: 109.38899993896484, &#39;open&#39;: 109.63300323486328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.09700012207031, &#39;close&#39;: 110.09700012207031, &#39;date&#39;: 1530054000, &#39;formatted_date&#39;: &#39;2018-06-26&#39;, &#39;high&#39;: 110.47899627685547, &#39;low&#39;: 109.68800354003906, &#39;open&#39;: 110.12999725341797, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.21499633789062, &#39;close&#39;: 110.21499633789062, &#39;date&#39;: 1530140400, &#39;formatted_date&#39;: &#39;2018-06-27&#39;, &#39;high&#39;: 110.41100311279297, &#39;low&#39;: 109.9739990234375, &#39;open&#39;: 110.22899627685547, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.48600006103516, &#39;close&#39;: 110.48600006103516, &#39;date&#39;: 1530226800, &#39;formatted_date&#39;: &#39;2018-06-28&#39;, &#39;high&#39;: 110.87100219726562, &#39;low&#39;: 110.38800048828125, &#39;open&#39;: 110.44200134277344, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.70999908447266, &#39;close&#39;: 110.70999908447266, &#39;date&#39;: 1530486000, &#39;formatted_date&#39;: &#39;2018-07-01&#39;, &#39;high&#39;: 111.0530014038086, &#39;low&#39;: 110.60600280761719, &#39;open&#39;: 110.74500274658203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.87100219726562, &#39;close&#39;: 110.87100219726562, &#39;date&#39;: 1530572400, &#39;formatted_date&#39;: &#39;2018-07-02&#39;, &#39;high&#39;: 111.1259994506836, &#39;low&#39;: 110.51000213623047, &#39;open&#39;: 110.88700103759766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.40799713134766, &#39;close&#39;: 110.40799713134766, &#39;date&#39;: 1530658800, &#39;formatted_date&#39;: &#39;2018-07-03&#39;, &#39;high&#39;: 110.5459976196289, &#39;low&#39;: 110.28199768066406, &#39;open&#39;: 110.4000015258789, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.50199890136719, &#39;close&#39;: 110.50199890136719, &#39;date&#39;: 1530745200, &#39;formatted_date&#39;: &#39;2018-07-04&#39;, &#39;high&#39;: 110.7030029296875, &#39;low&#39;: 110.29499816894531, &#39;open&#39;: 110.49700164794922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.5790023803711, &#39;close&#39;: 110.5790023803711, &#39;date&#39;: 1530831600, &#39;formatted_date&#39;: &#39;2018-07-05&#39;, &#39;high&#39;: 110.77799987792969, &#39;low&#39;: 110.38400268554688, &#39;open&#39;: 110.55500030517578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.4219970703125, &#39;close&#39;: 110.4219970703125, &#39;date&#39;: 1531090800, &#39;formatted_date&#39;: &#39;2018-07-08&#39;, &#39;high&#39;: 110.7760009765625, &#39;low&#39;: 110.36000061035156, &#39;open&#39;: 110.4229965209961, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.9530029296875, &#39;close&#39;: 110.9530029296875, &#39;date&#39;: 1531177200, &#39;formatted_date&#39;: &#39;2018-07-09&#39;, &#39;high&#39;: 111.34300231933594, &#39;low&#39;: 110.92400360107422, &#39;open&#39;: 110.94100189208984, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.83100128173828, &#39;close&#39;: 110.83100128173828, &#39;date&#39;: 1531263600, &#39;formatted_date&#39;: &#39;2018-07-10&#39;, &#39;high&#39;: 111.62000274658203, &#39;low&#39;: 110.77400207519531, &#39;open&#39;: 110.875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.95800018310547, &#39;close&#39;: 111.95800018310547, &#39;date&#39;: 1531350000, &#39;formatted_date&#39;: &#39;2018-07-11&#39;, &#39;high&#39;: 112.61599731445312, &#39;low&#39;: 111.98600006103516, &#39;open&#39;: 111.98600006103516, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.66500091552734, &#39;close&#39;: 112.66500091552734, &#39;date&#39;: 1531436400, &#39;formatted_date&#39;: &#39;2018-07-12&#39;, &#39;high&#39;: 112.79299926757812, &#39;low&#39;: 112.36900329589844, &#39;open&#39;: 112.65499877929688, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.39900207519531, &#39;close&#39;: 112.39900207519531, &#39;date&#39;: 1531695600, &#39;formatted_date&#39;: &#39;2018-07-15&#39;, &#39;high&#39;: 112.54900360107422, &#39;low&#39;: 112.2509994506836, &#39;open&#39;: 112.40299987792969, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.3740005493164, &#39;close&#39;: 112.3740005493164, &#39;date&#39;: 1531782000, &#39;formatted_date&#39;: &#39;2018-07-16&#39;, &#39;high&#39;: 112.89900207519531, &#39;low&#39;: 112.23500061035156, &#39;open&#39;: 112.36299896240234, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.01200103759766, &#39;close&#39;: 113.01200103759766, &#39;date&#39;: 1531868400, &#39;formatted_date&#39;: &#39;2018-07-17&#39;, &#39;high&#39;: 113.12899780273438, &#39;low&#39;: 112.72000122070312, &#39;open&#39;: 112.99099731445312, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.79100036621094, &#39;close&#39;: 112.79100036621094, &#39;date&#39;: 1531954800, &#39;formatted_date&#39;: &#39;2018-07-18&#39;, &#39;high&#39;: 113.14700317382812, &#39;low&#39;: 112.65399932861328, &#39;open&#39;: 112.802001953125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.36299896240234, &#39;close&#39;: 112.36299896240234, &#39;date&#39;: 1532041200, &#39;formatted_date&#39;: &#39;2018-07-19&#39;, &#39;high&#39;: 112.61299896240234, &#39;low&#39;: 111.64600372314453, &#39;open&#39;: 112.37200164794922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.0530014038086, &#39;close&#39;: 111.0530014038086, &#39;date&#39;: 1532300400, &#39;formatted_date&#39;: &#39;2018-07-22&#39;, &#39;high&#39;: 111.4209976196289, &#39;low&#39;: 110.77899932861328, &#39;open&#39;: 111.05799865722656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.45999908447266, &#39;close&#39;: 111.45999908447266, &#39;date&#39;: 1532386800, &#39;formatted_date&#39;: &#39;2018-07-23&#39;, &#39;high&#39;: 111.44999694824219, &#39;low&#39;: 110.97599792480469, &#39;open&#39;: 111.44999694824219, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.24099731445312, &#39;close&#39;: 111.24099731445312, &#39;date&#39;: 1532473200, &#39;formatted_date&#39;: &#39;2018-07-24&#39;, &#39;high&#39;: 111.36000061035156, &#39;low&#39;: 110.90499877929688, &#39;open&#39;: 111.26799774169922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.84500122070312, &#39;close&#39;: 110.84500122070312, &#39;date&#39;: 1532559600, &#39;formatted_date&#39;: &#39;2018-07-25&#39;, &#39;high&#39;: 111.1989974975586, &#39;low&#39;: 110.60299682617188, &#39;open&#39;: 110.8759994506836, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.14600372314453, &#39;close&#39;: 111.14600372314453, &#39;date&#39;: 1532646000, &#39;formatted_date&#39;: &#39;2018-07-26&#39;, &#39;high&#39;: 111.21600341796875, &#39;low&#39;: 110.90499877929688, &#39;open&#39;: 111.13899993896484, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.93399810791016, &#39;close&#39;: 110.93399810791016, &#39;date&#39;: 1532905200, &#39;formatted_date&#39;: &#39;2018-07-29&#39;, &#39;high&#39;: 111.15599822998047, &#39;low&#39;: 110.89399719238281, &#39;open&#39;: 110.9219970703125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.99400329589844, &#39;close&#39;: 110.99400329589844, &#39;date&#39;: 1532991600, &#39;formatted_date&#39;: &#39;2018-07-30&#39;, &#39;high&#39;: 111.9530029296875, &#39;low&#39;: 110.85900115966797, &#39;open&#39;: 110.98899841308594, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.80799865722656, &#39;close&#39;: 111.80799865722656, &#39;date&#39;: 1533078000, &#39;formatted_date&#39;: &#39;2018-07-31&#39;, &#39;high&#39;: 112.13700103759766, &#39;low&#39;: 111.69999694824219, &#39;open&#39;: 111.79499816894531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.62000274658203, &#39;close&#39;: 111.62000274658203, &#39;date&#39;: 1533164400, &#39;formatted_date&#39;: &#39;2018-08-01&#39;, &#39;high&#39;: 111.7239990234375, &#39;low&#39;: 111.33000183105469, &#39;open&#39;: 111.63700103759766, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.69000244140625, &#39;close&#39;: 111.69000244140625, &#39;date&#39;: 1533250800, &#39;formatted_date&#39;: &#39;2018-08-02&#39;, &#39;high&#39;: 111.78299713134766, &#39;low&#39;: 111.0999984741211, &#39;open&#39;: 111.6989974975586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.23400115966797, &#39;close&#39;: 111.23400115966797, &#39;date&#39;: 1533510000, &#39;formatted_date&#39;: &#39;2018-08-05&#39;, &#39;high&#39;: 111.52200317382812, &#39;low&#39;: 111.16699981689453, &#39;open&#39;: 111.21700286865234, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.33999633789062, &#39;close&#39;: 111.33999633789062, &#39;date&#39;: 1533596400, &#39;formatted_date&#39;: &#39;2018-08-06&#39;, &#39;high&#39;: 111.36399841308594, &#39;low&#39;: 110.9990005493164, &#39;open&#39;: 111.3280029296875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.34500122070312, &#39;close&#39;: 111.34500122070312, &#39;date&#39;: 1533682800, &#39;formatted_date&#39;: &#39;2018-08-07&#39;, &#39;high&#39;: 111.41999816894531, &#39;low&#39;: 110.83999633789062, &#39;open&#39;: 111.34700012207031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.89199829101562, &#39;close&#39;: 110.89199829101562, &#39;date&#39;: 1533769200, &#39;formatted_date&#39;: &#39;2018-08-08&#39;, &#39;high&#39;: 111.1780014038086, &#39;low&#39;: 110.70999908447266, &#39;open&#39;: 110.90299987792969, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.09100341796875, &#39;close&#39;: 111.09100341796875, &#39;date&#39;: 1533855600, &#39;formatted_date&#39;: &#39;2018-08-09&#39;, &#39;high&#39;: 111.12799835205078, &#39;low&#39;: 110.51799774169922, &#39;open&#39;: 111.06400299072266, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.62899780273438, &#39;close&#39;: 110.62899780273438, &#39;date&#39;: 1534114800, &#39;formatted_date&#39;: &#39;2018-08-12&#39;, &#39;high&#39;: 110.927001953125, &#39;low&#39;: 110.11499786376953, &#39;open&#39;: 110.64900207519531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.66100311279297, &#39;close&#39;: 110.66100311279297, &#39;date&#39;: 1534201200, &#39;formatted_date&#39;: &#39;2018-08-13&#39;, &#39;high&#39;: 111.12300109863281, &#39;low&#39;: 110.5979995727539, &#39;open&#39;: 110.5979995727539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.24600219726562, &#39;close&#39;: 111.24600219726562, &#39;date&#39;: 1534287600, &#39;formatted_date&#39;: &#39;2018-08-14&#39;, &#39;high&#39;: 111.41799926757812, &#39;low&#39;: 110.43599700927734, &#39;open&#39;: 111.25299835205078, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.57599639892578, &#39;close&#39;: 110.57599639892578, &#39;date&#39;: 1534374000, &#39;formatted_date&#39;: &#39;2018-08-15&#39;, &#39;high&#39;: 110.91000366210938, &#39;low&#39;: 110.47200012207031, &#39;open&#39;: 110.58499908447266, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.00399780273438, &#39;close&#39;: 111.00399780273438, &#39;date&#39;: 1534460400, &#39;formatted_date&#39;: &#39;2018-08-16&#39;, &#39;high&#39;: 111.03500366210938, &#39;low&#39;: 110.322998046875, &#39;open&#39;: 110.99299621582031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.4749984741211, &#39;close&#39;: 110.4749984741211, &#39;date&#39;: 1534719600, &#39;formatted_date&#39;: &#39;2018-08-19&#39;, &#39;high&#39;: 110.67500305175781, &#39;low&#39;: 110.30999755859375, &#39;open&#39;: 110.47699737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.947998046875, &#39;close&#39;: 109.947998046875, &#39;date&#39;: 1534806000, &#39;formatted_date&#39;: &#39;2018-08-20&#39;, &#39;high&#39;: 110.48899841308594, &#39;low&#39;: 109.7760009765625, &#39;open&#39;: 109.93599700927734, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.13400268554688, &#39;close&#39;: 110.13400268554688, &#39;date&#39;: 1534892400, &#39;formatted_date&#39;: &#39;2018-08-21&#39;, &#39;high&#39;: 110.60900115966797, &#39;low&#39;: 110.02999877929688, &#39;open&#39;: 110.10099792480469, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.58799743652344, &#39;close&#39;: 110.58799743652344, &#39;date&#39;: 1534978800, &#39;formatted_date&#39;: &#39;2018-08-22&#39;, &#39;high&#39;: 111.28500366210938, &#39;low&#39;: 110.552001953125, &#39;open&#39;: 110.55999755859375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.36699676513672, &#39;close&#39;: 111.36699676513672, &#39;date&#39;: 1535065200, &#39;formatted_date&#39;: &#39;2018-08-23&#39;, &#39;high&#39;: 111.48100280761719, &#39;low&#39;: 111.14099884033203, &#39;open&#39;: 111.33799743652344, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.28199768066406, &#39;close&#39;: 111.28199768066406, &#39;date&#39;: 1535324400, &#39;formatted_date&#39;: &#39;2018-08-26&#39;, &#39;high&#39;: 111.33799743652344, &#39;low&#39;: 110.94400024414062, &#39;open&#39;: 111.28900146484375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.13700103759766, &#39;close&#39;: 111.13700103759766, &#39;date&#39;: 1535410800, &#39;formatted_date&#39;: &#39;2018-08-27&#39;, &#39;high&#39;: 111.35099792480469, &#39;low&#39;: 110.94000244140625, &#39;open&#39;: 111.1259994506836, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.16200256347656, &#39;close&#39;: 111.16200256347656, &#39;date&#39;: 1535497200, &#39;formatted_date&#39;: &#39;2018-08-28&#39;, &#39;high&#39;: 111.81199645996094, &#39;low&#39;: 111.12899780273438, &#39;open&#39;: 111.16100311279297, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.71199798583984, &#39;close&#39;: 111.71199798583984, &#39;date&#39;: 1535583600, &#39;formatted_date&#39;: &#39;2018-08-29&#39;, &#39;high&#39;: 111.74600219726562, &#39;low&#39;: 111.13600158691406, &#39;open&#39;: 111.69100189208984, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.9990005493164, &#39;close&#39;: 110.9990005493164, &#39;date&#39;: 1535670000, &#39;formatted_date&#39;: &#39;2018-08-30&#39;, &#39;high&#39;: 111.08599853515625, &#39;low&#39;: 110.68599700927734, &#39;open&#39;: 110.99800109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.14399719238281, &#39;close&#39;: 111.14399719238281, &#39;date&#39;: 1535929200, &#39;formatted_date&#39;: &#39;2018-09-02&#39;, &#39;high&#39;: 111.16600036621094, &#39;low&#39;: 110.85099792480469, &#39;open&#39;: 111.14099884033203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.08799743652344, &#39;close&#39;: 111.08799743652344, &#39;date&#39;: 1536015600, &#39;formatted_date&#39;: &#39;2018-09-03&#39;, &#39;high&#39;: 111.5250015258789, &#39;low&#39;: 110.91699981689453, &#39;open&#39;: 111.06099700927734, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.46099853515625, &#39;close&#39;: 111.46099853515625, &#39;date&#39;: 1536102000, &#39;formatted_date&#39;: &#39;2018-09-04&#39;, &#39;high&#39;: 111.75199890136719, &#39;low&#39;: 111.40499877929688, &#39;open&#39;: 111.44599914550781, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.4489974975586, &#39;close&#39;: 111.4489974975586, &#39;date&#39;: 1536188400, &#39;formatted_date&#39;: &#39;2018-09-05&#39;, &#39;high&#39;: 111.43099975585938, &#39;low&#39;: 110.84700012207031, &#39;open&#39;: 111.43099975585938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.49500274658203, &#39;close&#39;: 110.49500274658203, &#39;date&#39;: 1536274800, &#39;formatted_date&#39;: &#39;2018-09-06&#39;, &#39;high&#39;: 111.23300170898438, &#39;low&#39;: 110.3949966430664, &#39;open&#39;: 110.48600006103516, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.91999816894531, &#39;close&#39;: 110.91999816894531, &#39;date&#39;: 1536534000, &#39;formatted_date&#39;: &#39;2018-09-09&#39;, &#39;high&#39;: 111.18499755859375, &#39;low&#39;: 110.875, &#39;open&#39;: 110.91400146484375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.14800262451172, &#39;close&#39;: 111.14800262451172, &#39;date&#39;: 1536620400, &#39;formatted_date&#39;: &#39;2018-09-10&#39;, &#39;high&#39;: 111.59200286865234, &#39;low&#39;: 111.1510009765625, &#39;open&#39;: 111.15899658203125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.60700225830078, &#39;close&#39;: 111.60700225830078, &#39;date&#39;: 1536706800, &#39;formatted_date&#39;: &#39;2018-09-11&#39;, &#39;high&#39;: 111.60199737548828, &#39;low&#39;: 111.21900177001953, &#39;open&#39;: 111.5979995727539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.22000122070312, &#39;close&#39;: 111.22000122070312, &#39;date&#39;: 1536793200, &#39;formatted_date&#39;: &#39;2018-09-12&#39;, &#39;high&#39;: 111.94499969482422, &#39;low&#39;: 111.1719970703125, &#39;open&#39;: 111.1719970703125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.01200103759766, &#39;close&#39;: 112.01200103759766, &#39;date&#39;: 1536879600, &#39;formatted_date&#39;: &#39;2018-09-13&#39;, &#39;high&#39;: 112.16500091552734, &#39;low&#39;: 111.75399780273438, &#39;open&#39;: 112.0469970703125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.9530029296875, &#39;close&#39;: 111.9530029296875, &#39;date&#39;: 1537138800, &#39;formatted_date&#39;: &#39;2018-09-16&#39;, &#39;high&#39;: 112.11699676513672, &#39;low&#39;: 111.85700225830078, &#39;open&#39;: 111.95099639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.69000244140625, &#39;close&#39;: 111.69000244140625, &#39;date&#39;: 1537225200, &#39;formatted_date&#39;: &#39;2018-09-17&#39;, &#39;high&#39;: 112.375, &#39;low&#39;: 111.66699981689453, &#39;open&#39;: 111.66699981689453, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.2770004272461, &#39;close&#39;: 112.2770004272461, &#39;date&#39;: 1537311600, &#39;formatted_date&#39;: &#39;2018-09-18&#39;, &#39;high&#39;: 112.4260025024414, &#39;low&#39;: 112.19000244140625, &#39;open&#39;: 112.28700256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.31700134277344, &#39;close&#39;: 112.31700134277344, &#39;date&#39;: 1537398000, &#39;formatted_date&#39;: &#39;2018-09-19&#39;, &#39;high&#39;: 112.57499694824219, &#39;low&#39;: 112.05999755859375, &#39;open&#39;: 112.31700134277344, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.49500274658203, &#39;close&#39;: 112.49500274658203, &#39;date&#39;: 1537484400, &#39;formatted_date&#39;: &#39;2018-09-20&#39;, &#39;high&#39;: 112.87100219726562, &#39;low&#39;: 112.46399688720703, &#39;open&#39;: 112.48300170898438, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.52400207519531, &#39;close&#39;: 112.52400207519531, &#39;date&#39;: 1537743600, &#39;formatted_date&#39;: &#39;2018-09-23&#39;, &#39;high&#39;: 112.68399810791016, &#39;low&#39;: 112.44400024414062, &#39;open&#39;: 112.5250015258789, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.78600311279297, &#39;close&#39;: 112.78600311279297, &#39;date&#39;: 1537830000, &#39;formatted_date&#39;: &#39;2018-09-24&#39;, &#39;high&#39;: 112.95700073242188, &#39;low&#39;: 112.73999786376953, &#39;open&#39;: 112.79499816894531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.96900177001953, &#39;close&#39;: 112.96900177001953, &#39;date&#39;: 1537916400, &#39;formatted_date&#39;: &#39;2018-09-25&#39;, &#39;high&#39;: 113.0459976196289, &#39;low&#39;: 112.7699966430664, &#39;open&#39;: 112.97699737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.7040023803711, &#39;close&#39;: 112.7040023803711, &#39;date&#39;: 1538002800, &#39;formatted_date&#39;: &#39;2018-09-26&#39;, &#39;high&#39;: 113.3949966430664, &#39;low&#39;: 112.56999969482422, &#39;open&#39;: 112.69999694824219, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.35700225830078, &#39;close&#39;: 113.35700225830078, &#39;date&#39;: 1538089200, &#39;formatted_date&#39;: &#39;2018-09-27&#39;, &#39;high&#39;: 113.64900207519531, &#39;low&#39;: 113.33000183105469, &#39;open&#39;: 113.38899993896484, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.7959976196289, &#39;close&#39;: 113.7959976196289, &#39;date&#39;: 1538348400, &#39;formatted_date&#39;: &#39;2018-09-30&#39;, &#39;high&#39;: 114.05400085449219, &#39;low&#39;: 113.73799896240234, &#39;open&#39;: 113.78399658203125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.94599914550781, &#39;close&#39;: 113.94599914550781, &#39;date&#39;: 1538434800, &#39;formatted_date&#39;: &#39;2018-10-01&#39;, &#39;high&#39;: 114.00700378417969, &#39;low&#39;: 113.52799987792969, &#39;open&#39;: 113.95800018310547, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.5770034790039, &#39;close&#39;: 113.5770034790039, &#39;date&#39;: 1538521200, &#39;formatted_date&#39;: &#39;2018-10-02&#39;, &#39;high&#39;: 114.2239990234375, &#39;low&#39;: 113.51799774169922, &#39;open&#39;: 113.5739974975586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 114.48600006103516, &#39;close&#39;: 114.48600006103516, &#39;date&#39;: 1538607600, &#39;formatted_date&#39;: &#39;2018-10-03&#39;, &#39;high&#39;: 114.51100158691406, &#39;low&#39;: 113.66200256347656, &#39;open&#39;: 114.48899841308594, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.89399719238281, &#39;close&#39;: 113.89399719238281, &#39;date&#39;: 1538694000, &#39;formatted_date&#39;: &#39;2018-10-04&#39;, &#39;high&#39;: 114.08599853515625, &#39;low&#39;: 113.56400299072266, &#39;open&#39;: 113.89900207519531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.71499633789062, &#39;close&#39;: 113.71499633789062, &#39;date&#39;: 1538953200, &#39;formatted_date&#39;: &#39;2018-10-07&#39;, &#39;high&#39;: 113.94000244140625, &#39;low&#39;: 113.00199890136719, &#39;open&#39;: 113.69599914550781, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.09700012207031, &#39;close&#39;: 113.09700012207031, &#39;date&#39;: 1539039600, &#39;formatted_date&#39;: &#39;2018-10-08&#39;, &#39;high&#39;: 113.37999725341797, &#39;low&#39;: 112.94000244140625, &#39;open&#39;: 113.09300231933594, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.99800109863281, &#39;close&#39;: 112.99800109863281, &#39;date&#39;: 1539126000, &#39;formatted_date&#39;: &#39;2018-10-09&#39;, &#39;high&#39;: 113.27200317382812, &#39;low&#39;: 112.6050033569336, &#39;open&#39;: 112.9990005493164, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.09200286865234, &#39;close&#39;: 112.09200286865234, &#39;date&#39;: 1539212400, &#39;formatted_date&#39;: &#39;2018-10-10&#39;, &#39;high&#39;: 112.51799774169922, &#39;low&#39;: 111.98699951171875, &#39;open&#39;: 112.12100219726562, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.08000183105469, &#39;close&#39;: 112.08000183105469, &#39;date&#39;: 1539298800, &#39;formatted_date&#39;: &#39;2018-10-11&#39;, &#39;high&#39;: 112.48999786376953, &#39;low&#39;: 112.00700378417969, &#39;open&#39;: 112.10199737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.19200134277344, &#39;close&#39;: 112.19200134277344, &#39;date&#39;: 1539558000, &#39;formatted_date&#39;: &#39;2018-10-14&#39;, &#39;high&#39;: 112.21900177001953, &#39;low&#39;: 111.62300109863281, &#39;open&#39;: 112.21900177001953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.84100341796875, &#39;close&#39;: 111.84100341796875, &#39;date&#39;: 1539644400, &#39;formatted_date&#39;: &#39;2018-10-15&#39;, &#39;high&#39;: 112.28500366210938, &#39;low&#39;: 111.81300354003906, &#39;open&#39;: 111.84700012207031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.34200286865234, &#39;close&#39;: 112.34200286865234, &#39;date&#39;: 1539730800, &#39;formatted_date&#39;: &#39;2018-10-16&#39;, &#39;high&#39;: 112.41400146484375, &#39;low&#39;: 112.01799774169922, &#39;open&#39;: 112.31400299072266, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.62799835205078, &#39;close&#39;: 112.62799835205078, &#39;date&#39;: 1539817200, &#39;formatted_date&#39;: &#39;2018-10-17&#39;, &#39;high&#39;: 112.7249984741211, &#39;low&#39;: 112.08999633789062, &#39;open&#39;: 112.61799621582031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.18499755859375, &#39;close&#39;: 112.18499755859375, &#39;date&#39;: 1539903600, &#39;formatted_date&#39;: &#39;2018-10-18&#39;, &#39;high&#39;: 112.62300109863281, &#39;low&#39;: 112.1989974975586, &#39;open&#39;: 112.21099853515625, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.4800033569336, &#39;close&#39;: 112.4800033569336, &#39;date&#39;: 1540162800, &#39;formatted_date&#39;: &#39;2018-10-21&#39;, &#39;high&#39;: 112.8740005493164, &#39;low&#39;: 112.35199737548828, &#39;open&#39;: 112.45099639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.75700378417969, &#39;close&#39;: 112.75700378417969, &#39;date&#39;: 1540249200, &#39;formatted_date&#39;: &#39;2018-10-22&#39;, &#39;high&#39;: 112.79499816894531, &#39;low&#39;: 111.96199798583984, &#39;open&#39;: 112.74099731445312, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.44400024414062, &#39;close&#39;: 112.44400024414062, &#39;date&#39;: 1540335600, &#39;formatted_date&#39;: &#39;2018-10-23&#39;, &#39;high&#39;: 112.73699951171875, &#39;low&#39;: 112.33100128173828, &#39;open&#39;: 112.4469985961914, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.01200103759766, &#39;close&#39;: 112.01200103759766, &#39;date&#39;: 1540422000, &#39;formatted_date&#39;: &#39;2018-10-24&#39;, &#39;high&#39;: 112.63099670410156, &#39;low&#39;: 111.82499694824219, &#39;open&#39;: 112.02899932861328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.3499984741211, &#39;close&#39;: 112.3499984741211, &#39;date&#39;: 1540508400, &#39;formatted_date&#39;: &#39;2018-10-25&#39;, &#39;high&#39;: 112.43399810791016, &#39;low&#39;: 111.38500213623047, &#39;open&#39;: 112.31300354003906, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.90799713134766, &#39;close&#39;: 111.90799713134766, &#39;date&#39;: 1540771200, &#39;formatted_date&#39;: &#39;2018-10-29&#39;, &#39;high&#39;: 112.5510025024414, &#39;low&#39;: 111.79000091552734, &#39;open&#39;: 111.91200256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.3239974975586, &#39;close&#39;: 112.3239974975586, &#39;date&#39;: 1540857600, &#39;formatted_date&#39;: &#39;2018-10-30&#39;, &#39;high&#39;: 112.9729995727539, &#39;low&#39;: 112.30699920654297, &#39;open&#39;: 112.30699920654297, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.052001953125, &#39;close&#39;: 113.052001953125, &#39;date&#39;: 1540944000, &#39;formatted_date&#39;: &#39;2018-10-31&#39;, &#39;high&#39;: 113.375, &#39;low&#39;: 112.8280029296875, &#39;open&#39;: 113.05699920654297, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.85099792480469, &#39;close&#39;: 112.85099792480469, &#39;date&#39;: 1541030400, &#39;formatted_date&#39;: &#39;2018-11-01&#39;, &#39;high&#39;: 112.99500274658203, &#39;low&#39;: 112.64199829101562, &#39;open&#39;: 112.84600067138672, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.71499633789062, &#39;close&#39;: 112.71499633789062, &#39;date&#39;: 1541116800, &#39;formatted_date&#39;: &#39;2018-11-02&#39;, &#39;high&#39;: 113.10299682617188, &#39;low&#39;: 112.66100311279297, &#39;open&#39;: 112.7229995727539, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.13899993896484, &#39;close&#39;: 113.13899993896484, &#39;date&#39;: 1541376000, &#39;formatted_date&#39;: &#39;2018-11-05&#39;, &#39;high&#39;: 113.32099914550781, &#39;low&#39;: 113.07499694824219, &#39;open&#39;: 113.13300323486328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.24600219726562, &#39;close&#39;: 113.24600219726562, &#39;date&#39;: 1541462400, &#39;formatted_date&#39;: &#39;2018-11-06&#39;, &#39;high&#39;: 113.43599700927734, &#39;low&#39;: 113.10800170898438, &#39;open&#39;: 113.27300262451172, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.36299896240234, &#39;close&#39;: 113.36299896240234, &#39;date&#39;: 1541548800, &#39;formatted_date&#39;: &#39;2018-11-07&#39;, &#39;high&#39;: 113.80799865722656, &#39;low&#39;: 112.94999694824219, &#39;open&#39;: 113.35199737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.5469970703125, &#39;close&#39;: 113.5469970703125, &#39;date&#39;: 1541635200, &#39;formatted_date&#39;: &#39;2018-11-08&#39;, &#39;high&#39;: 113.875, &#39;low&#39;: 113.5510025024414, &#39;open&#39;: 113.56600189208984, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.9530029296875, &#39;close&#39;: 113.9530029296875, &#39;date&#39;: 1541721600, &#39;formatted_date&#39;: &#39;2018-11-09&#39;, &#39;high&#39;: 114.00199890136719, &#39;low&#39;: 113.65599822998047, &#39;open&#39;: 113.95899963378906, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.84600067138672, &#39;close&#39;: 113.84600067138672, &#39;date&#39;: 1541980800, &#39;formatted_date&#39;: &#39;2018-11-12&#39;, &#39;high&#39;: 114.18399810791016, &#39;low&#39;: 113.66000366210938, &#39;open&#39;: 113.83799743652344, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.69599914550781, &#39;close&#39;: 113.69599914550781, &#39;date&#39;: 1542067200, &#39;formatted_date&#39;: &#39;2018-11-13&#39;, &#39;high&#39;: 114.13999938964844, &#39;low&#39;: 113.59200286865234, &#39;open&#39;: 113.66000366210938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.78900146484375, &#39;close&#39;: 113.78900146484375, &#39;date&#39;: 1542153600, &#39;formatted_date&#39;: &#39;2018-11-14&#39;, &#39;high&#39;: 113.99600219726562, &#39;low&#39;: 113.65499877929688, &#39;open&#39;: 113.79299926757812, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.56400299072266, &#39;close&#39;: 113.56400299072266, &#39;date&#39;: 1542240000, &#39;formatted_date&#39;: &#39;2018-11-15&#39;, &#39;high&#39;: 113.6500015258789, &#39;low&#39;: 113.10099792480469, &#39;open&#39;: 113.55899810791016, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.55500030517578, &#39;close&#39;: 113.55500030517578, &#39;date&#39;: 1542326400, &#39;formatted_date&#39;: &#39;2018-11-16&#39;, &#39;high&#39;: 113.60199737548828, &#39;low&#39;: 112.67900085449219, &#39;open&#39;: 113.55899810791016, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.7300033569336, &#39;close&#39;: 112.7300033569336, &#39;date&#39;: 1542585600, &#39;formatted_date&#39;: &#39;2018-11-19&#39;, &#39;high&#39;: 112.86499786376953, &#39;low&#39;: 112.4489974975586, &#39;open&#39;: 112.72699737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.44300079345703, &#39;close&#39;: 112.44300079345703, &#39;date&#39;: 1542672000, &#39;formatted_date&#39;: &#39;2018-11-20&#39;, &#39;high&#39;: 112.73100280761719, &#39;low&#39;: 112.30000305175781, &#39;open&#39;: 112.45600128173828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.7030029296875, &#39;close&#39;: 112.7030029296875, &#39;date&#39;: 1542758400, &#39;formatted_date&#39;: &#39;2018-11-21&#39;, &#39;high&#39;: 113.14199829101562, &#39;low&#39;: 112.7020034790039, &#39;open&#39;: 112.71199798583984, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.02100372314453, &#39;close&#39;: 113.02100372314453, &#39;date&#39;: 1542844800, &#39;formatted_date&#39;: &#39;2018-11-22&#39;, &#39;high&#39;: 113.12300109863281, &#39;low&#39;: 112.87999725341797, &#39;open&#39;: 113.02100372314453, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.97799682617188, &#39;close&#39;: 112.97799682617188, &#39;date&#39;: 1542931200, &#39;formatted_date&#39;: &#39;2018-11-23&#39;, &#39;high&#39;: 113.00499725341797, &#39;low&#39;: 112.66400146484375, &#39;open&#39;: 112.99800109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.91899871826172, &#39;close&#39;: 112.91899871826172, &#39;date&#39;: 1543190400, &#39;formatted_date&#39;: &#39;2018-11-26&#39;, &#39;high&#39;: 113.58799743652344, &#39;low&#39;: 112.90399932861328, &#39;open&#39;: 112.92400360107422, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.50399780273438, &#39;close&#39;: 113.50399780273438, &#39;date&#39;: 1543276800, &#39;formatted_date&#39;: &#39;2018-11-27&#39;, &#39;high&#39;: 113.83200073242188, &#39;low&#39;: 113.40599822998047, &#39;open&#39;: 113.51499938964844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.76699829101562, &#39;close&#39;: 113.76699829101562, &#39;date&#39;: 1543363200, &#39;formatted_date&#39;: &#39;2018-11-28&#39;, &#39;high&#39;: 114.01499938964844, &#39;low&#39;: 113.70999908447266, &#39;open&#39;: 113.7770004272461, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.55500030517578, &#39;close&#39;: 113.55500030517578, &#39;date&#39;: 1543449600, &#39;formatted_date&#39;: &#39;2018-11-29&#39;, &#39;high&#39;: 113.60800170898438, &#39;low&#39;: 113.20099639892578, &#39;open&#39;: 113.56999969482422, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.41100311279297, &#39;close&#39;: 113.41100311279297, &#39;date&#39;: 1543536000, &#39;formatted_date&#39;: &#39;2018-11-30&#39;, &#39;high&#39;: 113.59600067138672, &#39;low&#39;: 113.33799743652344, &#39;open&#39;: 113.41200256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.76300048828125, &#39;close&#39;: 113.76300048828125, &#39;date&#39;: 1543795200, &#39;formatted_date&#39;: &#39;2018-12-03&#39;, &#39;high&#39;: 113.75800323486328, &#39;low&#39;: 113.37300109863281, &#39;open&#39;: 113.75800323486328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.58699798583984, &#39;close&#39;: 113.58699798583984, &#39;date&#39;: 1543881600, &#39;formatted_date&#39;: &#39;2018-12-04&#39;, &#39;high&#39;: 113.61399841308594, &#39;low&#39;: 112.72000122070312, &#39;open&#39;: 113.58899688720703, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.6989974975586, &#39;close&#39;: 112.6989974975586, &#39;date&#39;: 1543968000, &#39;formatted_date&#39;: &#39;2018-12-05&#39;, &#39;high&#39;: 113.22599792480469, &#39;low&#39;: 112.68299865722656, &#39;open&#39;: 112.6969985961914, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.0510025024414, &#39;close&#39;: 113.0510025024414, &#39;date&#39;: 1544054400, &#39;formatted_date&#39;: &#39;2018-12-06&#39;, &#39;high&#39;: 113.15299987792969, &#39;low&#39;: 112.23999786376953, &#39;open&#39;: 113.06199645996094, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.68900299072266, &#39;close&#39;: 112.68900299072266, &#39;date&#39;: 1544140800, &#39;formatted_date&#39;: &#39;2018-12-07&#39;, &#39;high&#39;: 112.92500305175781, &#39;low&#39;: 112.56300354003906, &#39;open&#39;: 112.73100280761719, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.50199890136719, &#39;close&#39;: 112.50199890136719, &#39;date&#39;: 1544400000, &#39;formatted_date&#39;: &#39;2018-12-10&#39;, &#39;high&#39;: 113.04900360107422, &#39;low&#39;: 112.2490005493164, &#39;open&#39;: 112.50599670410156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.18099975585938, &#39;close&#39;: 113.18099975585938, &#39;date&#39;: 1544486400, &#39;formatted_date&#39;: &#39;2018-12-11&#39;, &#39;high&#39;: 113.4530029296875, &#39;low&#39;: 113.00599670410156, &#39;open&#39;: 113.19999694824219, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.38400268554688, &#39;close&#39;: 113.38400268554688, &#39;date&#39;: 1544572800, &#39;formatted_date&#39;: &#39;2018-12-12&#39;, &#39;high&#39;: 113.51200103759766, &#39;low&#39;: 113.16000366210938, &#39;open&#39;: 113.38400268554688, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.28500366210938, &#39;close&#39;: 113.28500366210938, &#39;date&#39;: 1544659200, &#39;formatted_date&#39;: &#39;2018-12-13&#39;, &#39;high&#39;: 113.7020034790039, &#39;low&#39;: 113.28700256347656, &#39;open&#39;: 113.28700256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.55999755859375, &#39;close&#39;: 113.55999755859375, &#39;date&#39;: 1544745600, &#39;formatted_date&#39;: &#39;2018-12-14&#39;, &#39;high&#39;: 113.66799926757812, &#39;low&#39;: 113.31900024414062, &#39;open&#39;: 113.572998046875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 113.38999938964844, &#39;close&#39;: 113.38999938964844, &#39;date&#39;: 1545004800, &#39;formatted_date&#39;: &#39;2018-12-17&#39;, &#39;high&#39;: 113.51699829101562, &#39;low&#39;: 112.87699890136719, &#39;open&#39;: 113.39099884033203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.8290023803711, &#39;close&#39;: 112.8290023803711, &#39;date&#39;: 1545091200, &#39;formatted_date&#39;: &#39;2018-12-18&#39;, &#39;high&#39;: 112.83200073242188, &#39;low&#39;: 112.25, &#39;open&#39;: 112.83200073242188, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.52400207519531, &#39;close&#39;: 112.52400207519531, &#39;date&#39;: 1545177600, &#39;formatted_date&#39;: &#39;2018-12-19&#39;, &#39;high&#39;: 112.58399963378906, &#39;low&#39;: 112.13300323486328, &#39;open&#39;: 112.49700164794922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.41000366210938, &#39;close&#39;: 112.41000366210938, &#39;date&#39;: 1545264000, &#39;formatted_date&#39;: &#39;2018-12-20&#39;, &#39;high&#39;: 112.5989990234375, &#39;low&#39;: 111.33100128173828, &#39;open&#39;: 112.4219970703125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.1709976196289, &#39;close&#39;: 111.1709976196289, &#39;date&#39;: 1545350400, &#39;formatted_date&#39;: &#39;2018-12-21&#39;, &#39;high&#39;: 111.44999694824219, &#39;low&#39;: 110.93900299072266, &#39;open&#39;: 111.197998046875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.05400085449219, &#39;close&#39;: 111.05400085449219, &#39;date&#39;: 1545609600, &#39;formatted_date&#39;: &#39;2018-12-24&#39;, &#39;high&#39;: 111.13999938964844, &#39;low&#39;: 110.26699829101562, &#39;open&#39;: 111.0999984741211, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.31099700927734, &#39;close&#39;: 110.31099700927734, &#39;date&#39;: 1545696000, &#39;formatted_date&#39;: &#39;2018-12-25&#39;, &#39;high&#39;: 110.34400177001953, &#39;low&#39;: 109.99099731445312, &#39;open&#39;: 110.31400299072266, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.4020004272461, &#39;close&#39;: 110.4020004272461, &#39;date&#39;: 1545782400, &#39;formatted_date&#39;: &#39;2018-12-26&#39;, &#39;high&#39;: 110.697998046875, &#39;low&#39;: 110.28600311279297, &#39;open&#39;: 110.43099975585938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.20600128173828, &#39;close&#39;: 111.20600128173828, &#39;date&#39;: 1545868800, &#39;formatted_date&#39;: &#39;2018-12-27&#39;, &#39;high&#39;: 111.22200012207031, &#39;low&#39;: 110.65299987792969, &#39;open&#39;: 111.22100067138672, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.8550033569336, &#39;close&#39;: 110.8550033569336, &#39;date&#39;: 1545955200, &#39;formatted_date&#39;: &#39;2018-12-28&#39;, &#39;high&#39;: 110.93000030517578, &#39;low&#39;: 110.22200012207031, &#39;open&#39;: 110.86000061035156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.33000183105469, &#39;close&#39;: 110.33000183105469, &#39;date&#39;: 1546214400, &#39;formatted_date&#39;: &#39;2018-12-31&#39;, &#39;high&#39;: 110.46800231933594, &#39;low&#39;: 109.65899658203125, &#39;open&#39;: 110.3239974975586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.62999725341797, &#39;close&#39;: 109.62999725341797, &#39;date&#39;: 1546300800, &#39;formatted_date&#39;: &#39;2019-01-01&#39;, &#39;high&#39;: 109.63400268554688, &#39;low&#39;: 109.58999633789062, &#39;open&#39;: 109.62999725341797, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.66799926757812, &#39;close&#39;: 109.66799926757812, &#39;date&#39;: 1546387200, &#39;formatted_date&#39;: &#39;2019-01-02&#39;, &#39;high&#39;: 109.67400360107422, &#39;low&#39;: 108.7300033569336, &#39;open&#39;: 109.66000366210938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 107.44100189208984, &#39;close&#39;: 107.44100189208984, &#39;date&#39;: 1546473600, &#39;formatted_date&#39;: &#39;2019-01-03&#39;, &#39;high&#39;: 108.27100372314453, &#39;low&#39;: 106.7760009765625, &#39;open&#39;: 107.44999694824219, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 107.80799865722656, &#39;close&#39;: 107.80799865722656, &#39;date&#39;: 1546560000, &#39;formatted_date&#39;: &#39;2019-01-04&#39;, &#39;high&#39;: 108.58300018310547, &#39;low&#39;: 107.51300048828125, &#39;open&#39;: 107.86599731445312, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.52200317382812, &#39;close&#39;: 108.52200317382812, &#39;date&#39;: 1546819200, &#39;formatted_date&#39;: &#39;2019-01-07&#39;, &#39;high&#39;: 108.625, &#39;low&#39;: 108.03600311279297, &#39;open&#39;: 108.48899841308594, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.61599731445312, &#39;close&#39;: 108.61599731445312, &#39;date&#39;: 1546905600, &#39;formatted_date&#39;: &#39;2019-01-08&#39;, &#39;high&#39;: 109.0770034790039, &#39;low&#39;: 108.44999694824219, &#39;open&#39;: 108.64299774169922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.7760009765625, &#39;close&#39;: 108.7760009765625, &#39;date&#39;: 1546992000, &#39;formatted_date&#39;: &#39;2019-01-09&#39;, &#39;high&#39;: 108.9800033569336, &#39;low&#39;: 108.06400299072266, &#39;open&#39;: 108.7509994506836, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.18900299072266, &#39;close&#39;: 108.18900299072266, &#39;date&#39;: 1547078400, &#39;formatted_date&#39;: &#39;2019-01-10&#39;, &#39;high&#39;: 108.322998046875, &#39;low&#39;: 107.77300262451172, &#39;open&#39;: 108.16200256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.2979965209961, &#39;close&#39;: 108.2979965209961, &#39;date&#39;: 1547164800, &#39;formatted_date&#39;: &#39;2019-01-11&#39;, &#39;high&#39;: 108.57099914550781, &#39;low&#39;: 108.15399932861328, &#39;open&#39;: 108.28700256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.45800018310547, &#39;close&#39;: 108.45800018310547, &#39;date&#39;: 1547424000, &#39;formatted_date&#39;: &#39;2019-01-14&#39;, &#39;high&#39;: 108.4749984741211, &#39;low&#39;: 107.99800109863281, &#39;open&#39;: 108.46600341796875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.25, &#39;close&#39;: 108.25, &#39;date&#39;: 1547510400, &#39;formatted_date&#39;: &#39;2019-01-15&#39;, &#39;high&#39;: 108.75, &#39;low&#39;: 108.20700073242188, &#39;open&#39;: 108.24500274658203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.64399719238281, &#39;close&#39;: 108.64399719238281, &#39;date&#39;: 1547596800, &#39;formatted_date&#39;: &#39;2019-01-16&#39;, &#39;high&#39;: 108.90699768066406, &#39;low&#39;: 108.37100219726562, &#39;open&#39;: 108.65399932861328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.03700256347656, &#39;close&#39;: 109.03700256347656, &#39;date&#39;: 1547683200, &#39;formatted_date&#39;: &#39;2019-01-17&#39;, &#39;high&#39;: 109.08799743652344, &#39;low&#39;: 108.68900299072266, &#39;open&#39;: 109.03600311279297, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.15299987792969, &#39;close&#39;: 109.15299987792969, &#39;date&#39;: 1547769600, &#39;formatted_date&#39;: &#39;2019-01-18&#39;, &#39;high&#39;: 109.79199981689453, &#39;low&#39;: 109.14299774169922, &#39;open&#39;: 109.14299774169922, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.66100311279297, &#39;close&#39;: 109.66100311279297, &#39;date&#39;: 1548028800, &#39;formatted_date&#39;: &#39;2019-01-21&#39;, &#39;high&#39;: 109.697998046875, &#39;low&#39;: 109.48200225830078, &#39;open&#39;: 109.65699768066406, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.66999816894531, &#39;close&#39;: 109.66999816894531, &#39;date&#39;: 1548115200, &#39;formatted_date&#39;: &#39;2019-01-22&#39;, &#39;high&#39;: 109.6780014038086, &#39;low&#39;: 109.27999877929688, &#39;open&#39;: 109.66300201416016, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.3550033569336, &#39;close&#39;: 109.3550033569336, &#39;date&#39;: 1548201600, &#39;formatted_date&#39;: &#39;2019-01-23&#39;, &#39;high&#39;: 109.9739990234375, &#39;low&#39;: 109.36499786376953, &#39;open&#39;: 109.36499786376953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.49199676513672, &#39;close&#39;: 109.49199676513672, &#39;date&#39;: 1548288000, &#39;formatted_date&#39;: &#39;2019-01-24&#39;, &#39;high&#39;: 109.79199981689453, &#39;low&#39;: 109.427001953125, &#39;open&#39;: 109.47699737548828, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.59700012207031, &#39;close&#39;: 109.59700012207031, &#39;date&#39;: 1548374400, &#39;formatted_date&#39;: &#39;2019-01-25&#39;, &#39;high&#39;: 109.94300079345703, &#39;low&#39;: 109.53500366210938, &#39;open&#39;: 109.59200286865234, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.4000015258789, &#39;close&#39;: 109.4000015258789, &#39;date&#39;: 1548633600, &#39;formatted_date&#39;: &#39;2019-01-28&#39;, &#39;high&#39;: 109.51899719238281, &#39;low&#39;: 109.16400146484375, &#39;open&#39;: 109.38800048828125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.25399780273438, &#39;close&#39;: 109.25399780273438, &#39;date&#39;: 1548720000, &#39;formatted_date&#39;: &#39;2019-01-29&#39;, &#39;high&#39;: 109.52999877929688, &#39;low&#39;: 109.14099884033203, &#39;open&#39;: 109.26300048828125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.41699981689453, &#39;close&#39;: 109.41699981689453, &#39;date&#39;: 1548806400, &#39;formatted_date&#39;: &#39;2019-01-30&#39;, &#39;high&#39;: 109.73600006103516, &#39;low&#39;: 109.22599792480469, &#39;open&#39;: 109.41200256347656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.98100280761719, &#39;close&#39;: 108.98100280761719, &#39;date&#39;: 1548892800, &#39;formatted_date&#39;: &#39;2019-01-31&#39;, &#39;high&#39;: 108.99500274658203, &#39;low&#39;: 108.5, &#39;open&#39;: 108.95700073242188, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 108.84400177001953, &#39;close&#39;: 108.84400177001953, &#39;date&#39;: 1548979200, &#39;formatted_date&#39;: &#39;2019-02-01&#39;, &#39;high&#39;: 109.56199645996094, &#39;low&#39;: 108.75, &#39;open&#39;: 108.84600067138672, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.43800354003906, &#39;close&#39;: 109.43800354003906, &#39;date&#39;: 1549238400, &#39;formatted_date&#39;: &#39;2019-02-04&#39;, &#39;high&#39;: 110.13999938964844, &#39;low&#39;: 109.4729995727539, &#39;open&#39;: 109.4800033569336, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.96099853515625, &#39;close&#39;: 109.96099853515625, &#39;date&#39;: 1549324800, &#39;formatted_date&#39;: &#39;2019-02-05&#39;, &#39;high&#39;: 110.03399658203125, &#39;low&#39;: 109.78700256347656, &#39;open&#39;: 109.98500061035156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.94100189208984, &#39;close&#39;: 109.94100189208984, &#39;date&#39;: 1549411200, &#39;formatted_date&#39;: &#39;2019-02-06&#39;, &#39;high&#39;: 110.04900360107422, &#39;low&#39;: 109.55899810791016, &#39;open&#39;: 109.93499755859375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.9739990234375, &#39;close&#39;: 109.9739990234375, &#39;date&#39;: 1549497600, &#39;formatted_date&#39;: &#39;2019-02-07&#39;, &#39;high&#39;: 110.0770034790039, &#39;low&#39;: 109.60399627685547, &#39;open&#39;: 109.98600006103516, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.75599670410156, &#39;close&#39;: 109.75599670410156, &#39;date&#39;: 1549584000, &#39;formatted_date&#39;: &#39;2019-02-08&#39;, &#39;high&#39;: 109.88999938964844, &#39;low&#39;: 109.65399932861328, &#39;open&#39;: 109.76000213623047, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 109.80999755859375, &#39;close&#39;: 109.80999755859375, &#39;date&#39;: 1549843200, &#39;formatted_date&#39;: &#39;2019-02-11&#39;, &#39;high&#39;: 110.44499969482422, &#39;low&#39;: 109.7770004272461, &#39;open&#39;: 109.81700134277344, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.4000015258789, &#39;close&#39;: 110.4000015258789, &#39;date&#39;: 1549929600, &#39;formatted_date&#39;: &#39;2019-02-12&#39;, &#39;high&#39;: 110.6449966430664, &#39;low&#39;: 110.3479995727539, &#39;open&#39;: 110.39199829101562, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.51499938964844, &#39;close&#39;: 110.51499938964844, &#39;date&#39;: 1550016000, &#39;formatted_date&#39;: &#39;2019-02-13&#39;, &#39;high&#39;: 110.88099670410156, &#39;low&#39;: 110.50199890136719, &#39;open&#39;: 110.51300048828125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.9229965209961, &#39;close&#39;: 110.9229965209961, &#39;date&#39;: 1550102400, &#39;formatted_date&#39;: &#39;2019-02-14&#39;, &#39;high&#39;: 111.12100219726562, &#39;low&#39;: 110.51100158691406, &#39;open&#39;: 110.93800354003906, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.53800201416016, &#39;close&#39;: 110.53800201416016, &#39;date&#39;: 1550188800, &#39;formatted_date&#39;: &#39;2019-02-15&#39;, &#39;high&#39;: 110.63700103759766, &#39;low&#39;: 110.26000213623047, &#39;open&#39;: 110.53900146484375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.56400299072266, &#39;close&#39;: 110.56400299072266, &#39;date&#39;: 1550448000, &#39;formatted_date&#39;: &#39;2019-02-18&#39;, &#39;high&#39;: 110.60700225830078, &#39;low&#39;: 110.46399688720703, &#39;open&#39;: 110.54299926757812, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.59100341796875, &#39;close&#39;: 110.59100341796875, &#39;date&#39;: 1550534400, &#39;formatted_date&#39;: &#39;2019-02-19&#39;, &#39;high&#39;: 110.81099700927734, &#39;low&#39;: 110.4540023803711, &#39;open&#39;: 110.5989990234375, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.5719985961914, &#39;close&#39;: 110.5719985961914, &#39;date&#39;: 1550620800, &#39;formatted_date&#39;: &#39;2019-02-20&#39;, &#39;high&#39;: 110.94400024414062, &#39;low&#39;: 110.59400177001953, &#39;open&#39;: 110.59700012207031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.76499938964844, &#39;close&#39;: 110.76499938964844, &#39;date&#39;: 1550707200, &#39;formatted_date&#39;: &#39;2019-02-21&#39;, &#39;high&#39;: 110.8489990234375, &#39;low&#39;: 110.59700012207031, &#39;open&#39;: 110.77899932861328, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.70800018310547, &#39;close&#39;: 110.70800018310547, &#39;date&#39;: 1550793600, &#39;formatted_date&#39;: &#39;2019-02-22&#39;, &#39;high&#39;: 110.9000015258789, &#39;low&#39;: 110.62999725341797, &#39;open&#39;: 110.70099639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.77200317382812, &#39;close&#39;: 110.77200317382812, &#39;date&#39;: 1551052800, &#39;formatted_date&#39;: &#39;2019-02-25&#39;, &#39;high&#39;: 111.07099914550781, &#39;low&#39;: 110.5790023803711, &#39;open&#39;: 110.76899719238281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.0459976196289, &#39;close&#39;: 111.0459976196289, &#39;date&#39;: 1551139200, &#39;formatted_date&#39;: &#39;2019-02-26&#39;, &#39;high&#39;: 111.06600189208984, &#39;low&#39;: 110.66999816894531, &#39;open&#39;: 111.03500366210938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.55599975585938, &#39;close&#39;: 110.55599975585938, &#39;date&#39;: 1551225600, &#39;formatted_date&#39;: &#39;2019-02-27&#39;, &#39;high&#39;: 110.96600341796875, &#39;low&#39;: 110.35700225830078, &#39;open&#39;: 110.5510025024414, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.86199951171875, &#39;close&#39;: 110.86199951171875, &#39;date&#39;: 1551312000, &#39;formatted_date&#39;: &#39;2019-02-28&#39;, &#39;high&#39;: 111.43499755859375, &#39;low&#39;: 110.66000366210938, &#39;open&#39;: 110.87300109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.35700225830078, &#39;close&#39;: 111.35700225830078, &#39;date&#39;: 1551398400, &#39;formatted_date&#39;: &#39;2019-03-01&#39;, &#39;high&#39;: 111.97599792480469, &#39;low&#39;: 111.37100219726562, &#39;open&#39;: 111.37100219726562, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.93800354003906, &#39;close&#39;: 111.93800354003906, &#39;date&#39;: 1551657600, &#39;formatted_date&#39;: &#39;2019-03-04&#39;, &#39;high&#39;: 112.00700378417969, &#39;low&#39;: 111.66300201416016, &#39;open&#39;: 111.9229965209961, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.7770004272461, &#39;close&#39;: 111.7770004272461, &#39;date&#39;: 1551744000, &#39;formatted_date&#39;: &#39;2019-03-05&#39;, &#39;high&#39;: 112.12899780273438, &#39;low&#39;: 111.76000213623047, &#39;open&#39;: 111.76000213623047, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.86599731445312, &#39;close&#39;: 111.86599731445312, &#39;date&#39;: 1551830400, &#39;formatted_date&#39;: &#39;2019-03-06&#39;, &#39;high&#39;: 111.91000366210938, &#39;low&#39;: 111.61399841308594, &#39;open&#39;: 111.8550033569336, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.62300109863281, &#39;close&#39;: 111.62300109863281, &#39;date&#39;: 1551916800, &#39;formatted_date&#39;: &#39;2019-03-07&#39;, &#39;high&#39;: 111.84100341796875, &#39;low&#39;: 111.4800033569336, &#39;open&#39;: 111.64199829101562, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.63400268554688, &#39;close&#39;: 111.63400268554688, &#39;date&#39;: 1552003200, &#39;formatted_date&#39;: &#39;2019-03-08&#39;, &#39;high&#39;: 111.63899993896484, &#39;low&#39;: 110.83000183105469, &#39;open&#39;: 111.63800048828125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.08000183105469, &#39;close&#39;: 111.08000183105469, &#39;date&#39;: 1552262400, &#39;formatted_date&#39;: &#39;2019-03-11&#39;, &#39;high&#39;: 111.2959976196289, &#39;low&#39;: 110.87799835205078, &#39;open&#39;: 111.0770034790039, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.34200286865234, &#39;close&#39;: 111.34200286865234, &#39;date&#39;: 1552348800, &#39;formatted_date&#39;: &#39;2019-03-12&#39;, &#39;high&#39;: 111.4530029296875, &#39;low&#39;: 111.10700225830078, &#39;open&#39;: 111.3239974975586, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.30599975585938, &#39;close&#39;: 111.30599975585938, &#39;date&#39;: 1552435200, &#39;formatted_date&#39;: &#39;2019-03-13&#39;, &#39;high&#39;: 111.45500183105469, &#39;low&#39;: 111.1449966430664, &#39;open&#39;: 111.3219985961914, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.19599914550781, &#39;close&#39;: 111.19599914550781, &#39;date&#39;: 1552521600, &#39;formatted_date&#39;: &#39;2019-03-14&#39;, &#39;high&#39;: 111.72200012207031, &#39;low&#39;: 111.1449966430664, &#39;open&#39;: 111.19599914550781, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.75299835205078, &#39;close&#39;: 111.75299835205078, &#39;date&#39;: 1552608000, &#39;formatted_date&#39;: &#39;2019-03-15&#39;, &#39;high&#39;: 111.89600372314453, &#39;low&#39;: 111.38999938964844, &#39;open&#39;: 111.77100372314453, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.56099700927734, &#39;close&#39;: 111.56099700927734, &#39;date&#39;: 1552867200, &#39;formatted_date&#39;: &#39;2019-03-18&#39;, &#39;high&#39;: 111.62000274658203, &#39;low&#39;: 111.41200256347656, &#39;open&#39;: 111.5479965209961, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.37300109863281, &#39;close&#39;: 111.37300109863281, &#39;date&#39;: 1552953600, &#39;formatted_date&#39;: &#39;2019-03-19&#39;, &#39;high&#39;: 111.46900177001953, &#39;low&#39;: 111.15899658203125, &#39;open&#39;: 111.38400268554688, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.4010009765625, &#39;close&#39;: 111.4010009765625, &#39;date&#39;: 1553040000, &#39;formatted_date&#39;: &#39;2019-03-20&#39;, &#39;high&#39;: 111.68800354003906, &#39;low&#39;: 111.375, &#39;open&#39;: 111.4280014038086, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.66000366210938, &#39;close&#39;: 110.66000366210938, &#39;date&#39;: 1553126400, &#39;formatted_date&#39;: &#39;2019-03-21&#39;, &#39;high&#39;: 110.94499969482422, &#39;low&#39;: 110.30899810791016, &#39;open&#39;: 110.64399719238281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.80599975585938, &#39;close&#39;: 110.80599975585938, &#39;date&#39;: 1553212800, &#39;formatted_date&#39;: &#39;2019-03-22&#39;, &#39;high&#39;: 110.88500213623047, &#39;low&#39;: 109.73999786376953, &#39;open&#39;: 110.81199645996094, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.08100128173828, &#39;close&#39;: 110.08100128173828, &#39;date&#39;: 1553472000, &#39;formatted_date&#39;: &#39;2019-03-25&#39;, &#39;high&#39;: 110.22899627685547, &#39;low&#39;: 109.72899627685547, &#39;open&#39;: 110.12000274658203, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.06800079345703, &#39;close&#39;: 110.06800079345703, &#39;date&#39;: 1553558400, &#39;formatted_date&#39;: &#39;2019-03-26&#39;, &#39;high&#39;: 110.67500305175781, &#39;low&#39;: 110.0009994506836, &#39;open&#39;: 110.06400299072266, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.55400085449219, &#39;close&#39;: 110.55400085449219, &#39;date&#39;: 1553644800, &#39;formatted_date&#39;: &#39;2019-03-27&#39;, &#39;high&#39;: 110.69300079345703, &#39;low&#39;: 110.24700164794922, &#39;open&#39;: 110.5479965209961, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.48999786376953, &#39;close&#39;: 110.48999786376953, &#39;date&#39;: 1553731200, &#39;formatted_date&#39;: &#39;2019-03-28&#39;, &#39;high&#39;: 110.81700134277344, &#39;low&#39;: 110.03099822998047, &#39;open&#39;: 110.48500061035156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.63700103759766, &#39;close&#39;: 110.63700103759766, &#39;date&#39;: 1553817600, &#39;formatted_date&#39;: &#39;2019-03-29&#39;, &#39;high&#39;: 110.93599700927734, &#39;low&#39;: 110.54000091552734, &#39;open&#39;: 110.6780014038086, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.99500274658203, &#39;close&#39;: 110.99500274658203, &#39;date&#39;: 1554073200, &#39;formatted_date&#39;: &#39;2019-03-31&#39;, &#39;high&#39;: 111.31099700927734, &#39;low&#39;: 110.86299896240234, &#39;open&#39;: 110.99299621582031, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.45099639892578, &#39;close&#39;: 111.45099639892578, &#39;date&#39;: 1554159600, &#39;formatted_date&#39;: &#39;2019-04-01&#39;, &#39;high&#39;: 111.43399810791016, &#39;low&#39;: 111.2509994506836, &#39;open&#39;: 111.43399810791016, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.30500030517578, &#39;close&#39;: 111.30500030517578, &#39;date&#39;: 1554246000, &#39;formatted_date&#39;: &#39;2019-04-02&#39;, &#39;high&#39;: 111.5739974975586, &#39;low&#39;: 111.20999908447266, &#39;open&#39;: 111.31999969482422, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.3949966430664, &#39;close&#39;: 111.3949966430664, &#39;date&#39;: 1554332400, &#39;formatted_date&#39;: &#39;2019-04-03&#39;, &#39;high&#39;: 111.61699676513672, &#39;low&#39;: 111.33799743652344, &#39;open&#39;: 111.37300109863281, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.65799713134766, &#39;close&#39;: 111.65799713134766, &#39;date&#39;: 1554418800, &#39;formatted_date&#39;: &#39;2019-04-04&#39;, &#39;high&#39;: 111.81600189208984, &#39;low&#39;: 111.61000061035156, &#39;open&#39;: 111.65699768066406, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.71099853515625, &#39;close&#39;: 111.71099853515625, &#39;date&#39;: 1554678000, &#39;formatted_date&#39;: &#39;2019-04-07&#39;, &#39;high&#39;: 111.7030029296875, &#39;low&#39;: 111.28399658203125, &#39;open&#39;: 111.6969985961914, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.45600128173828, &#39;close&#39;: 111.45600128173828, &#39;date&#39;: 1554764400, &#39;formatted_date&#39;: &#39;2019-04-08&#39;, &#39;high&#39;: 111.56400299072266, &#39;low&#39;: 110.98999786376953, &#39;open&#39;: 111.44999694824219, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.1050033569336, &#39;close&#39;: 111.1050033569336, &#39;date&#39;: 1554850800, &#39;formatted_date&#39;: &#39;2019-04-09&#39;, &#39;high&#39;: 111.23999786376953, &#39;low&#39;: 110.88700103759766, &#39;open&#39;: 111.1050033569336, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 110.98500061035156, &#39;close&#39;: 110.98500061035156, &#39;date&#39;: 1554937200, &#39;formatted_date&#39;: &#39;2019-04-10&#39;, &#39;high&#39;: 111.52100372314453, &#39;low&#39;: 110.99099731445312, &#39;open&#39;: 110.99099731445312, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.62100219726562, &#39;close&#39;: 111.62100219726562, &#39;date&#39;: 1555023600, &#39;formatted_date&#39;: &#39;2019-04-11&#39;, &#39;high&#39;: 112.0199966430664, &#39;low&#39;: 111.63500213623047, &#39;open&#39;: 111.64900207519531, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.02799987792969, &#39;close&#39;: 112.02799987792969, &#39;date&#39;: 1555282800, &#39;formatted_date&#39;: &#39;2019-04-14&#39;, &#39;high&#39;: 112.08300018310547, &#39;low&#39;: 111.88800048828125, &#39;open&#39;: 112.03500366210938, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.94300079345703, &#39;close&#39;: 111.94300079345703, &#39;date&#39;: 1555369200, &#39;formatted_date&#39;: &#39;2019-04-15&#39;, &#39;high&#39;: 112.03399658203125, &#39;low&#39;: 111.8489990234375, &#39;open&#39;: 111.95099639892578, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.99299621582031, &#39;close&#39;: 111.99299621582031, &#39;date&#39;: 1555455600, &#39;formatted_date&#39;: &#39;2019-04-16&#39;, &#39;high&#39;: 112.15799713134766, &#39;low&#39;: 111.9260025024414, &#39;open&#39;: 111.98699951171875, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.03600311279297, &#39;close&#39;: 112.03600311279297, &#39;date&#39;: 1555542000, &#39;formatted_date&#39;: &#39;2019-04-17&#39;, &#39;high&#39;: 112.04399871826172, &#39;low&#39;: 111.78199768066406, &#39;open&#39;: 112.04399871826172, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.98899841308594, &#39;close&#39;: 111.98899841308594, &#39;date&#39;: 1555628400, &#39;formatted_date&#39;: &#39;2019-04-18&#39;, &#39;high&#39;: 112.00299835205078, &#39;low&#39;: 111.89700317382812, &#39;open&#39;: 111.98600006103516, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.91000366210938, &#39;close&#39;: 111.91000366210938, &#39;date&#39;: 1555887600, &#39;formatted_date&#39;: &#39;2019-04-21&#39;, &#39;high&#39;: 111.98699951171875, &#39;low&#39;: 111.88400268554688, &#39;open&#39;: 111.90899658203125, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.92900085449219, &#39;close&#39;: 111.92900085449219, &#39;date&#39;: 1555974000, &#39;formatted_date&#39;: &#39;2019-04-22&#39;, &#39;high&#39;: 112.02400207519531, &#39;low&#39;: 111.66400146484375, &#39;open&#39;: 111.93299865722656, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.87699890136719, &#39;close&#39;: 111.87699890136719, &#39;date&#39;: 1556060400, &#39;formatted_date&#39;: &#39;2019-04-23&#39;, &#39;high&#39;: 111.96800231933594, &#39;low&#39;: 111.69000244140625, &#39;open&#39;: 111.86499786376953, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 112.12999725341797, &#39;close&#39;: 112.12999725341797, &#39;date&#39;: 1556146800, &#39;formatted_date&#39;: &#39;2019-04-24&#39;, &#39;high&#39;: 112.22599792480469, &#39;low&#39;: 111.4010009765625, &#39;open&#39;: 112.13999938964844, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.53900146484375, &#39;close&#39;: 111.53900146484375, &#39;date&#39;: 1556233200, &#39;formatted_date&#39;: &#39;2019-04-25&#39;, &#39;high&#39;: 111.90799713134766, &#39;low&#39;: 111.427001953125, &#39;open&#39;: 111.50599670410156, &#39;volume&#39;: 0}, {&#39;adjclose&#39;: 111.59300231933594, &#39;close&#39;: 111.59300231933594, &#39;date&#39;: 1556492400, &#39;formatted_date&#39;: &#39;2019-04-28&#39;, &#39;high&#39;: 111.88300323486328, &#39;low&#39;: 111.57499694824219, &#39;open&#39;: 111.60099792480469, &#39;volume&#39;: 0}], &#39;timeZone&#39;: {&#39;gmtOffset&#39;: 3600}}} . 学过 Pandas 之后，我们应该可以把上面的「原始数据」转换成 DataFrame，代码如下： . def data_converter( price_data, code, asset ): # convert raw data to dataframe if asset == &#39;FX&#39;: code = str(code[3:] if code[:3]==&#39;USD&#39; else code) + &#39;=X&#39; columns =[&#39;open&#39;, &#39;close&#39;, &#39;low&#39;, &#39;high&#39;] price_dict = price_data[code][&#39;prices&#39;] index = [ p[&#39;formatted_date&#39;] for p in price_dict ] price =[ [p[c] for c in columns] for p in price_dict ] data = pd.DataFrame( price, index=pd.Index(index, name=&#39;date&#39;), columns=pd.Index(columns, name=&#39;OHLC&#39;) ) return data . 第 3 行完全是为了 YahooFinancial 里面的输入格式准备的。如果 Asset 是股票类，直接用其股票代码；如果 Asset 是汇率类，一般参数写成 EURUSD 或 USDJPY . 如果是 EURUSD，转换成 EURUSD=X . | 如果是 USDJPY，转换成 JPY=X . | . 第 6 行定义好开盘价、收盘价、最低价和最高价的标签。 . 第 7 行获取出一个「字典」格式的数据。 . 第 8, 9 行用列表解析式 (list comprehension) 将日期和价格获取出来。 . 第 11 到 13 行定义一个 DataFrame . 值为第 9 行得到的 price 列表 . | 行标签为第 8 行得到的 index 列表 . | 列标签为第 6 行定义好的 columns 列表 . | . 处理过后的数据格式美如画，不信你看 (用 EURUSD 和 NVDA 举例) . EURUSD = data_converter( currency_daily, &#39;EURUSD&#39;, &#39;FX&#39; ) EURUSD.head(3).append(EURUSD.tail(3)) . NVDA = data_converter( stock_daily, &#39;NVDA&#39;,&#39; EQ&#39; ) NVDA.head(3).append(NVDA.tail(3)) . OHLC open close low high . date . 2018-04-30 226.990005 | 224.899994 | 224.119995 | 229.000000 | . 2018-05-01 224.570007 | 227.139999 | 222.199997 | 227.250000 | . 2018-05-02 227.000000 | 226.309998 | 225.250000 | 228.800003 | . 2019-04-24 191.089996 | 191.169998 | 188.639999 | 192.809998 | . 2019-04-25 189.550003 | 186.910004 | 183.699997 | 190.449997 | . 2019-04-26 180.710007 | 178.089996 | 173.300003 | 180.889999 | . 3.2 直方图 . 直方图 (histogram chart)，又称质量分布图，是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。在 Matplotlib 里的语法是 . plt.hist() . | ax.hist() . | . 我们先看看英伟达 (NVDA) 的价格分布。 . p_NVDA = NVDA[&#39;close&#39;] . fig = plt.figure( figsize=(8,4) ) plt.hist( p_NVDA, bins=30, color=dt_hex ) plt.xlabel(&#39;Nvidia Price&#39;) plt.ylabel(&#39;Number of Days Observed&#39;) plt.title(&#39;Frequency Distribution of Nvidia Prices, Apr-2018 to Apr-2019&#39;) plt.show() . . 在本例中函数 hist() 里的参数有 . p_NVDA：Series，也可以是 list 或者 ndarray . | bins：分成多少堆 . | colors：用之前定义的深青色 . | . 从上图可看出，NVDA 的价格分布在有 220 划分的两个范围 (regime)。在 2018 年 11 月 16 日 (星期五)，英伟达第三季度的报表低于预期，那么股价暴跌 19%，在之后的星期一，又跌 12%，两个交易日股价一下子从原来的 220 左右跌到 150。 . 在研究股票价格序列中，由于收益率有些好的统计性质，我们对其更感兴趣，接下来再看看英伟达 (NVDA) 的对数收益 (log-return) 的分布。 . date = p_NVDA.index price = p_NVDA.values r_NVDA = pd.Series( np.log(price[1:]/price[:-1]),index=date[1:] ) . fig = plt.figure( figsize=(8,4) ) plt.hist( r_NVDA, bins=30, color=dt_hex ) plt.xlabel(&#39;Nvidia Daily Log-Return&#39;) plt.ylabel(&#39;Number of Days Observed&#39;) plt.title(&#39;Frequency Distribution of Nvidia Daily Log-Return, Apr-2018 to Apr-2019&#39;) plt.show() . . 首先对数收益的计算公式为 . r(t) = ln(P(t)/P(t-1) . 得到 r_NVDA。计算一天的收益率需要两天的价格，因此用 p_NVDA 计算 r_NVDA 时，会丢失最新一天的数据，因此我们用 date[1:] 作为 r_NVDA 的行标签 (index)。 . 不考虑在 -0.20 和 -0.15 那两个极端值，对数收益率的分布像一个正态分布 (人人都喜欢正态分布)。 . 3.3 散点图 . 散点图 (scatter chart) 用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种联系的分布模式。在 Matplotlib 里的语法是 . plt.scatter() . | ax.scatter() . | . 我们看看中美两大电商亚马逊 (AMZN) 和阿里巴巴 (BABA) 之间的价格和对数收益率的联系。 . 首先计算价格和对数收益率。 . AMZN = data_converter( stock_daily, &#39;AMZN&#39;, &#39; EQ&#39; ) BABA = data_converter( stock_daily, &#39;BABA&#39;, &#39; EQ&#39; ) p_AMZN = AMZN[&#39;close&#39;] p_BABA = BABA[&#39;close&#39;] date = p_AMZN.index price = p_AMZN.values r_AMZN = pd.Series( np.log(price[1:]/price[:-1]),index=date[1:] ) date = p_BABA.index price = p_BABA.values r_BABA = pd.Series( np.log(price[1:]/price[:-1]),index=date[1:] ) . 用两个子图分别展示「价格」和「收益率」的散点图。 . fig, axes = plt.subplots( nrows=1, ncols=2, figsize=(14,6) ) axes[0].scatter( p_AMZN, p_BABA, color=dt_hex ) axes[0].set_xlabel(&#39;Amazon Price&#39;) axes[0].set_ylabel(&#39;Alibaba Price&#39;) axes[0].set_title(&#39;Daily Price from Apr-2018 to Apr-2019&#39;) axes[1].scatter( r_AMZN, r_BABA, color=r_hex ) axes[1].set_xlabel(&#39;Amazon Log-Return&#39;) axes[1].set_ylabel(&#39;Alibaba Log-Return&#39;) axes[1].set_title(&#39;Daily Returns from Apr-2018 to Apr-2019&#39;) plt.show() . . 在本例中函数 scatter() 里的参数有 . p_AMZN (r_AMZN)：Series，也可以是 list 或者 ndarray . | p_BABA (r_BABA)：Series，也可以是 list 或者 ndarray . | colors：用之前定义的深青色和红色 . | . 从右图来看，亚马逊和阿里巴巴在这段时期的表现正相关，如果做线性回归是一条斜率为正的线。 . 3.4 折线图 . 折线图 (line chart) 显示随时间而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。在 Matplotlib 里的语法是 . plt.plot() . | ax.plot() . | . 我们来看看如何画 EURUSD 的 20 天和 60 天移动平均 (moving average, MA) 线。 . 首先获取 EURUSD 的收盘价。 . curr = &#39;EURUSD&#39; EURUSD = data_converter( currency_daily, curr, &#39;FX&#39; ) rate = EURUSD[&#39;close&#39;] . 用 Pandas 里面的 rolling() 函数来计算 MA，在画出收盘价，MA20 和 MA60 三条折线。 . fig = plt.figure( figsize=(16,6) ) ax = fig.add_subplot(1,1,1) ax.set_title( curr + &#39; - Moving Average&#39;) ax.set_xticks( range(0,len(rate.index),10) ) ax.set_xticklabels( [rate.index[i] for i in ax.get_xticks()], rotation=90 ); ax.plot( rate, color=dt_hex, linewidth=2,label=&#39;Close&#39; ) MA_20 = rate.rolling(20).mean() MA_60 = rate.rolling(60).mean() ax.plot(MA_20, color=r_hex, linewidth=2, label=&#39;MA20&#39;) ax.plot(MA_60, color=g_hex, linewidth=2, label=&#39;MA60&#39;) ax.legend(loc=0); . . 在本例中函数 plot() 里的参数有 . rate, MA_20, MA_60：Series，也可以是 list 或者 ndarray . | colors：用之前定义的深青色，红色，绿色 . | linewidth：像素 2 . | label：用于显示图例 . | . 上面代码最关键的就是第 10 和 11 行，用 rolling(n) 函数对 rate 求 n 天移动均值。从图中注意到绿色的 MA60最短，红色的 MA20 其次。原因很简单，假如一年有 252 个交易日，那么第 1 个 MA60 值需要第 1 到 60 个汇率，第 2 个 MA60 值需要第 2 到 61 个汇率，第 193 个 MA60 值需要第 193 到 252 个汇率。最终只有 193 个 MA60。同理可得到只有 223 个 MA20。 . 双均线策略如下：MA60 和 MA20 必有交点，若 20 天平均线「上穿越」60 天均线，则为买入点；反之为卖出点。该策略基于不同天数均线的交叉点抓住股票的强势和弱势时刻进行交易。 . 3.5 饼状图 . 饼状图 (pie chart) 是一个划分为几个扇形的圆形统计图表，用于描述量、频率或百分比之间的相对关系。 在饼状图中，每个扇区面积大小为其所表示的数量的比例。在 Matplotlib 里的语法是 . plt.pie() . | ax.pie() . | . 我们来看看如何画出一个股票投资组合在 2019 年 4 月 26 日的饼状图，假设组合里面有 100 股英伟达，20 股亚马逊，50 股阿里巴巴，30 股脸书和 40 股苹果 (一个科技股爱好者的组合 )。 . 首先计算组合里五支股票在 2019 年 4 月 26 日的市值 (market value, MV)。 . stock_list = [&#39;NVDA&#39;,&#39;AMZN&#39;,&#39;BABA&#39;,&#39;FB&#39;,&#39;AAPL&#39; ] date = &#39;2019-04-26&#39; MV = [ data_converter(stock_daily, code, &#39; EQ&#39;)[&#39;close&#39;][date] for code in stock_list ] MV = np.array(MV) * np.array([100,20,50,30,40]) . 第 4 行用了列表解析式来获取 stock_list 每支股票的价格，第 5 行将价格乘上数量得到市值。 . 设定好五种颜色和百分数格式 %.0f%% (小数点后面保留 0 位)，画出饼状图。 . fig = plt.figure( figsize=(7,7) ) ax = fig.add_subplot(1,1,1) ax.pie( MV, labels=stock_list, colors=[dt_hex,r_hex,g_hex,tn_hex,g25_hex], autopct=&#39;%.0f%%&#39; ) plt.show() . . 在本例中函数 pie() 里的参数有 . MV：股票组合市值，ndarray . | labels：标识，list . | colors：用之前定义的一组颜色，list . | autopct：显示百分数的格式，str . | . 虽然画出了饼状图，但看起来有些别扭，且听下节分解如何改进。 . 3.6 同理心 . 为用户习惯考虑 . 把饼当成钟，大多数人习惯顺时针的看里面的内容，因此把面积最大的那块的一条边 (见下图) 放在 12 点的位置最能突显其重要性，之后按面积从大到小顺时针排列。 . 在画饼状图前，我们需要额外做两件事： . 按升序排列 5 只股票的市值 . | 设定 pie() 的相关参数达到上述「最大块放 12 点位置」的效果 . | 首先按市值大小按升序排序。 . idx = MV.argsort()[::-1] MV = MV[idx] stock_list = [ stock_list[i] for i in idx ] print( MV ) print( stock_list ) . [39012.60009766 17808.99963379 9354.49981689 8172.00012207 5744.70016479] [&#39;AMZN&#39;, &#39;NVDA&#39;, &#39;BABA&#39;, &#39;AAPL&#39;, &#39;FB&#39;] . 设定参数 . startangle = 90 是说第一片扇形 (AMZN 深青色那块) 的左边在 90 度位置 . | counterclock = False 是说顺时针拜访每块扇形 . | . fig = plt.figure( figsize=(7,7) ) ax = fig.add_subplot(1,1,1) ax.pie( MV, labels=stock_list, colors=[dt_hex,r_hex,g_hex,tn_hex,g25_hex], autopct=&#39;%.0f%%&#39;,startangle=90, counterclock=False ) plt.show() . . 和上节最后的图相比，现在这饼状图看上去是不是顺眼多了。你承不承认你第一眼就注意到 12 点那个位置的扇形？ . 为图表信息考虑 . 当饼状图里面扇形多过 5 个时，面积相近的扇形大小并不容易一眼辨别出来，不信看上图的 BABA 和 APPL，没看到数字很难看出那个面积大。但绝大多数人是感官动物，图形和数字肯定先选择看图形，这个时候用柱状图 (bar chart) 来代替饼状图，每个市值成分大小一目了然 (好图就是能让用户能最快的抓住核心信息)。 . 用 ax.bar() 函数来画柱状图，为了和饼状图的信息一致，几个关键操作为 . 第 4 行计算出市值的百分数 pct_MV . | 第 8, 9 行设置横轴刻度 (0,1,2,3,4) 和标签 (stock_list) . | 第 12, 13 行在特定位置上 (x+0.04, y+0.05/100) 将 pct_MV 以 {0:.0%} 的格式 (不保留小数点) 写出来，这些位置试几次看图的效果就可以确定下来。 . | . fig = plt.figure( figsize=(8,6) ) ax = fig.add_subplot(1,1,1) pct_MV = MV / np.sum(MV) index = np.arange(len(pct_MV)) ax.bar( index, pct_MV, facecolor=r_hex, edgecolor=dt_hex) ax.set_xticks( index ) ax.set_xticklabels( stock_list ) ax.set_ylim( 0, np.max(pct_MV)*1.1 ) for x,y in zip(index,pct_MV): ax.text(x+0.04,y+0.05/100,&#39;{0:.0%}&#39;.format(y), ha=&#39;center&#39;, va=&#39;bottom&#39; ) plt.show() . . 在本例中函数 bar() 里的参数有 . index：横轴刻度，ndarray . | pct_MV：股票组合市值比例，ndarray . | facecolor：柱状颜色，红色 . | edgecolor：柱边颜色，深青色 . | . 如果柱状很多时，或者标签名字很长时，用横向柱状图 (horizontal bar chart)，函数为 ax.barh()。代码和上面非常类似，就是把横轴和纵轴的调换了一下。 . fig = plt.figure( figsize=(8,4) ) ax = fig.add_subplot(1,1,1) pct_MV = MV[::-1] / np.sum(MV) index = np.arange(len(pct_MV)) ax.barh( index, pct_MV, facecolor=r_hex, edgecolor=dt_hex ) ax.set_yticks( index ) ax.set_yticklabels( stock_list[::-1] ) ax.set_xlim( 0, np.max(pct_MV)*1.1 ) for x,y in zip(pct_MV,index): ax.text(x+0.04,y,&#39;{0:.0%}&#39;.format(x), ha=&#39;right&#39;, va=&#39;center&#39; ) plt.show() . . 为色盲用户考虑 世界上有 1/12 的男人和 1/200 的女人都有不同程度的色盲症状。因此当你将结果展示给重要客户时，最好考虑到这一点，我相信对方会非常欣赏你这种「同理心」。 . 幸运的是，Matplotlib 里面有专门为色盲考虑的色彩风格，首先用下列语句看查看所有的色彩风格。 . print(plt.style.available) . [&#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;, &#39;ggplot&#39;, &#39;grayscale&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-darkgrid&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-poster&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-ticks&#39;, &#39;seaborn-white&#39;, &#39;seaborn-whitegrid&#39;, &#39;seaborn&#39;, &#39;Solarize_Light2&#39;, &#39;_classic_test&#39;] . 不难发现 seaborn-colorblind就是我们所需要的。下面我们看看不同色彩风格下的「饼状图」和「柱状图」。 . 首先看从 R 中借用过来的大名鼎鼎的 ggplot 的效果。 . plt.style.use(&#39;ggplot&#39;) . fig, axes = plt.subplots( nrows=1, ncols=2, figsize=(14,7) ) axes[0].pie( MV, labels=stock_list,autopct=&#39;%.0f%%&#39;, startangle=90, counterclock=False ) pct_MV = MV[::-1] / np.sum(MV) index = np.arange(len(pct_MV)) axes[1].barh( index, pct_MV ) axes[1].set_yticks( index ) axes[1].set_yticklabels( stock_list[::-1] ) axes[1].set_xlim( 0, np.max(pct_MV)*1.1 ) for x,y in zip(pct_MV,index): axes[1].text(x+0.04,y,&#39;{0:.0%}&#39;.format(x), ha=&#39;right&#39;, va=&#39;center&#39; ) plt.tight_layout() plt.show() . . 再看 seaborn-colorblind 的效果(先执行下面代码，再重新执行上面代码)。 . plt.style.use(&#39;seaborn-colorblind&#39;) . 4 总结 . 本贴的思路非常清晰： . 第一部分了解 Matplotlib 的绘图逻辑，以及里面包含的画图元素以及它们之间的层级。 . | 第二部分深度学 Matplotlib，只研究折线图，通过研究它的属性，一步步改进图的尺寸、像素、线条颜色宽度风格、坐标轴边界、刻度标签、图例、多图、多坐标系、标注、透明度等等，画出了一幅美图。 . | 第三部分广度学 Matplotlib，通过数据的分布、联系、比较和构成研究了直方图、散点图、折线图和饼状图，最后还为用户着想 (习惯、色盲等等) 画出更能有效表达信息的图。 . | . 基本绘图流程 . . 我们现在处于一个大数据的时代，制图能力现在和写作能力一样重要。任何人现在都可以用各种制图工具或者编程语言来画图，但是很少人懂得画出好图。 . 好图不是指的绚烂的颜色 (fancy colors) 和复杂的层级 (complex layers)，当一张图里的信息能够以最清晰和有效的方式传递给使用者，那么这张图就是好图。 . Stay Tuned! . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/06/22/Matplotlib.html",
            "relUrl": "/markdown/2020/06/22/Matplotlib.html",
            "date": " • Jun 22, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Pandas (下)",
            "content": "前言 . 本篇鸣谢 马川-燕大 的增删整理， 王圣元 ——原创文章，与原文不同之处包含我的学习记录。 . 匹配Jupyter Notebook的ipynb文档链接下载地址在资源页面里 . 接着上篇继续后面三个章节 . 提纲 . . 4 数据表的合并和连接 . 数据表可以按「键」合并，用 merge 函数；可以按「轴」来连接，用 concat 函数。 . 4.1 合并 . 合并用 merge 函数，语法如下： . pd.merge( df1, df2, how=s, on=c ) . c 是 df1 和 df2 共有的一栏，合并方式 (how=s) 有四种： . 左连接 (left join)：合并之后显示 df1 的所有行 . | 右连接 (right join)：合并之后显示 df2 的所有行 . | 外连接 (outer join)：合并所有行 . | 内连接 (inner join)：合并df1 和 df2 共有的所有行 (默认情况) . | 首先创建两个 DataFrame： . df_price：4 天的价格 (2019-01-01 到 2019-01-04) . | df_volume：5 天的交易量 (2019-01-02 到 2019-01-06) . | . import pandas as pd df_price = pd.DataFrame( {&#39;Date&#39;: pd.date_range(&#39;2019-1-1&#39;, periods=4), &#39;Adj Close&#39;: [24.42, 25.00, 25.25, 25.64]}) df_price . Date Adj Close . 0 2019-01-01 | 24.42 | . 1 2019-01-02 | 25.00 | . 2 2019-01-03 | 25.25 | . 3 2019-01-04 | 25.64 | . df_volume = pd.DataFrame( {&#39;Date&#39;: pd.date_range(&#39;2019-1-2&#39;, periods=5), &#39;Volume&#39; : [56081400, 99455500, 83028700, 100234000, 73829000]}) df_volume . Date Volume . 0 2019-01-02 | 56081400 | . 1 2019-01-03 | 99455500 | . 2 2019-01-04 | 83028700 | . 3 2019-01-05 | 100234000 | . 4 2019-01-06 | 73829000 | . 接下来用 df_price 和 df_volume 展示四种合并。 . left join pd.merge( df_price, df_volume, how=&#39;left&#39; ) . Date Adj Close Volume . 0 2019-01-01 | 24.42 | NaN | . 1 2019-01-02 | 25.00 | 56081400.0 | . 2 2019-01-03 | 25.25 | 99455500.0 | . 3 2019-01-04 | 25.64 | 83028700.0 | . 按 df_price 里 Date 栏里的值来合并数据 . df_volume 里 Date 栏里没有 2019-01-01，因此 Volume 为 NaN . | df_volume 里 Date 栏里的 2019-01-05 和 2019-01-06 不在 df_price 里 Date 栏，因此丢弃 . | . right join pd.merge( df_price, df_volume, how=&#39;right&#39; ) . Date Adj Close Volume . 0 2019-01-02 | 25.00 | 56081400 | . 1 2019-01-03 | 25.25 | 99455500 | . 2 2019-01-04 | 25.64 | 83028700 | . 3 2019-01-05 | NaN | 100234000 | . 4 2019-01-06 | NaN | 73829000 | . 按 df_volume 里 Date 栏里的值来合并数据 . df_price 里 Date 栏里没有 2019-01-05 和 2019-01-06，因此 Adj Close 为 NaN . | df_price 里 Date 栏里的 2019-01-01 不在 df_volume 里 Date 栏，因此丢弃 . | . outer join pd.merge( df_price, df_volume, how=&#39;outer&#39; ) . Date Adj Close Volume . 0 2019-01-01 | 24.42 | NaN | . 1 2019-01-02 | 25.00 | 56081400.0 | . 2 2019-01-03 | 25.25 | 99455500.0 | . 3 2019-01-04 | 25.64 | 83028700.0 | . 4 2019-01-05 | NaN | 100234000.0 | . 5 2019-01-06 | NaN | 73829000.0 | . 按 df_price 和 df_volume 里 Date 栏里的所有值来合并数据 . df_price 里 Date 栏里没有 2019-01-05 和 2019-01-06，因此 Adj Close 为 NaN . | df_volume 里 Date 栏里没有 2019-01-01，因此 Volume 为 NaN . | . inner join pd.merge( df_price, df_volume, how=&#39;inner&#39; ) . Date Adj Close Volume . 0 2019-01-02 | 25.00 | 56081400 | . 1 2019-01-03 | 25.25 | 99455500 | . 2 2019-01-04 | 25.64 | 83028700 | . 按 df_price 和 df_volume 里 Date 栏里的共有值来合并数据 . df_price 里 Date 栏里的 2019-01-01 不在 df_volume 里 Date 栏，因此丢弃 . | df_volume 里 Date 栏里的 2019-01-05 和 2019-01-06 不在 df_price 里 Date 栏，因此丢弃 . | . 4.2 连接 . Numpy 数组可相互连接，用 np.concat；同理，Series 和 DataFrame 也可相互连接，用 pd.concat。 . 连接 Series . 在 concat 函数也可设定参数 axis， . axis = 0 (默认)，沿着轴 0 (行) 连接，得到一个更长的 Series . | axis = 1，沿着轴 1 (列) 连接，得到一个 DataFrame . | . 被连接的 Series 它们的 index 可以重复 (overlapping)，也可以不同。 . non-overlapping index . 先定义三个 Series，它们的 index 各不同。 . s1 = pd.Series([0, 1], index=[&#39;a&#39;, &#39;b&#39;]) s2 = pd.Series([2, 3, 4], index=[&#39;c&#39;, &#39;d&#39;, &#39;e&#39;]) s3 = pd.Series([5, 6], index=[&#39;f&#39;, &#39;g&#39;]) print(s1) print(s2) print(s3) . a 0 b 1 dtype: int64 c 2 d 3 e 4 dtype: int64 f 5 g 6 dtype: int64 . 沿着「轴 0」连接得到一个更长的 Series。 . pd.concat([s1, s2, s3]) . a 0 b 1 c 2 d 3 e 4 f 5 g 6 dtype: int64 . 沿着「轴 1」连接得到一个 DataFrame。 . pd.concat([s1, s2, s3], axis=1) . 0 1 2 . a 0.0 | NaN | NaN | . b 1.0 | NaN | NaN | . c NaN | 2.0 | NaN | . d NaN | 3.0 | NaN | . e NaN | 4.0 | NaN | . f NaN | NaN | 5.0 | . g NaN | NaN | 6.0 | . overlapping index 将 s1 和 s3 沿「轴 0」连接来创建 s4，这样 s4 和 s1 的 index 是有重复的。 . s4 = pd.concat([s1, s3]) print(s1) print(s4) . a 0 b 1 dtype: int64 a 0 b 1 f 5 g 6 dtype: int64 . 将 s1 和 s4 沿「轴 1」内连接 (即只连接它们共有 index 对应的值) . pd.concat([s1, s4], axis = 1, join=&#39;inner&#39;) . 0 1 . a 0 | 0 | . b 1 | 1 | . hierarchical index 最后还可以将 n 个 Series 沿「轴 0」连接起来，再赋予 3 个 keys 创建多层 Series。 . pd.concat( [s1, s1, s3], keys=[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;]) . one a 0 b 1 two a 0 b 1 three f 5 g 6 dtype: int64 . 连接 DataFrame . 连接 DataFrame 的逻辑和连接 Series 的一模一样。 . 沿着行连接 (axis = 0) 先创建两个 DataFrame，df1 和 df2。 . import numpy as np df1 = pd.DataFrame( np.arange(12).reshape(3,4), columns=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) df1 . a b c d . 0 0 | 1 | 2 | 3 | . 1 4 | 5 | 6 | 7 | . 2 8 | 9 | 10 | 11 | . df2 = pd.DataFrame( np.arange(6).reshape(2,3), columns=[&#39;b&#39;,&#39;d&#39;,&#39;a&#39;]) df2 . b d a . 0 0 | 1 | 2 | . 1 3 | 4 | 5 | . 沿着行连接分两步 . 先把 df1 和 df2 列标签补齐 . | 再把 df1 和 df2 纵向连起来 . | pd.concat( [df1, df2] ) . a b c d . 0 0 | 1 | 2.0 | 3 | . 1 4 | 5 | 6.0 | 7 | . 2 8 | 9 | 10.0 | 11 | . 0 2 | 0 | NaN | 1 | . 1 5 | 3 | NaN | 4 | . 得到的 DataFrame 的 index = [0,1,2,0,1]，有重复值。如果 index 不包含重要信息 (如上例)，可以将 ignore_index 设置为 True，这样就得到默认的 index 值了。 . pd.concat( [df1, df2], ignore_index=True ) . a b c d . 0 0 | 1 | 2.0 | 3 | . 1 4 | 5 | 6.0 | 7 | . 2 8 | 9 | 10.0 | 11 | . 3 2 | 0 | NaN | 1 | . 4 5 | 3 | NaN | 4 | . 沿着列连接 (axis = 1) 先创建两个 DataFrame，df1 和 df2。 . df1 = pd.DataFrame( np.arange(6).reshape(3,2), index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], columns=[&#39;one&#39;,&#39;two&#39;] ) df1 . one two . a 0 | 1 | . b 2 | 3 | . c 4 | 5 | . df2 = pd.DataFrame( 5 + np.arange(4).reshape(2,2), index=[&#39;a&#39;,&#39;c&#39;], columns=[&#39;three&#39;,&#39;four&#39;]) df2 . three four . a 5 | 6 | . c 7 | 8 | . 沿着列连接分两步 . 先把 df1 和 df2 行标签补齐 . | 再把 df1 和 df2 横向连起来 . | pd.concat( [df1, df2], axis=1 ) . one two three four . a 0 | 1 | 5.0 | 6.0 | . b 2 | 3 | NaN | NaN | . c 4 | 5 | 7.0 | 8.0 | . 5 数据表的重塑和透视 . 有许多用于重新排列表格型数据的基础运算。这些函数也称作重塑（reshape）或轴向旋转（pivot）运算。 . 重塑 (reshape) 和透视 (pivot) 两个操作只改变数据表的布局 (layout)： . 重塑用 stack 和 unstack 函数 (互为逆转操作) . | 透视用 pivot 和 melt 函数 (互为逆转操作) . | . 5.1 重塑 . 重塑就是通过改变数据表里面的「行索引」和「列索引」来改变展示形式，从本质上说，就是重塑层次化索引(多层索引)。 . 行列旋转 . 列索引 → 行索引，用 stack 函数 . | 行索引 → 列索引，用 unstack 函数 . | . 单层 DataFrame . 创建 DataFrame df (1 层行索引，1 层列索引) . symbol = [&#39;JD&#39;, &#39;AAPL&#39;] data = {&#39;行业&#39;: [&#39;电商&#39;, &#39;科技&#39;], &#39;价格&#39;: [25.95, 172.97], &#39;交易量&#39;: [27113291, 18913154]} df = pd.DataFrame( data, index=symbol ) df.columns.name = &#39;特征&#39; df.index.name = &#39;代号&#39; df . 特征 行业 价格 交易量 . 代号 . JD 电商 | 25.95 | 27113291 | . AAPL 科技 | 172.97 | 18913154 | . 从上表中可知： . 行索引 = [JD, AAPL]，名称是代号 . | 列索引 = [行业, 价格, 交易量]，名称是特征 . | . stack: 列索引 → 行索引 列索引 (特征) 变成了行索引，原来的 DataFrame df 变成了两层 Series (第一层索引是代号，第二层索引是特征)。 . . c2i_Series = df.stack() c2i_Series . 代号 特征 JD 行业 电商 价格 25.95 交易量 27113291 AAPL 行业 科技 价格 172.97 交易量 18913154 dtype: object . unstack: 行索引 → 列索引 行索引 (代号) 变成了列索引，原来的 DataFrame df 也变成了两层 Series (第一层索引是特征，第二层索引是代号)。 . . i2c_Series = df.unstack() i2c_Series . 特征 代号 行业 JD 电商 AAPL 科技 价格 JD 25.95 AAPL 172.97 交易量 JD 27113291 AAPL 18913154 dtype: object . 基于层和名称来 unstack 对于多层索引的 Series，unstack 哪一层有两种方法来确定： . 基于层 (level-based) . | 基于名称 (name-based) . | 拿 c2i_Series 举例 (读者也可以尝试 i2c_Series)： . 代号 特征 JD 交易量 27113291 价格 25.95 行业 电商 AAPL 交易量 18913154 价格 172.97 行业 科技 dtype: object . 其索引列出如下： . c2i_Series.index . MultiIndex([( &#39;JD&#39;, &#39;行业&#39;), ( &#39;JD&#39;, &#39;价格&#39;), ( &#39;JD&#39;, &#39;交易量&#39;), (&#39;AAPL&#39;, &#39;行业&#39;), (&#39;AAPL&#39;, &#39;价格&#39;), (&#39;AAPL&#39;, &#39;交易量&#39;)], names=[&#39;代号&#39;, &#39;特征&#39;]) . 1.基于层来 unstack() 时，没有填层数，默认为最后一层。 . c2i_Series.unstack() . 特征 行业 价格 交易量 . 代号 . JD 电商 | 25.95 | 27113291 | . AAPL 科技 | 172.97 | 18913154 | . c2i_Series 的最后一层 (看上面它的 MultiIndex) 就是 [交易量, 价格,行业 ]，从行索引转成列索引得到上面的 DataFrame。 . 2.基于层来 unstack() 时，选择第一层 (参数放 0) . c2i_Series.unstack(0) . 代号 JD AAPL . 特征 . 行业 电商 | 科技 | . 价格 25.95 | 172.97 | . 交易量 27113291 | 18913154 | . c2i_Series 的第一层 (看上面它的 MultiIndex) 就是 [JD, AAPL]，从行索引转成列索引得到上面的 DataFrame。 . 3.基于名称来 unstack . c2i_Series.unstack(&#39;代号&#39;) . 代号 JD AAPL . 特征 . 行业 电商 | 科技 | . 价格 25.95 | 172.97 | . 交易量 27113291 | 18913154 | . c2i_Series 的代号层 (看上面它的 MultiIndex) 就是 [JD, AAPL]，从行索引转成列索引得到上面的 DataFrame。 . 多层 DataFrame . 创建 DataFrame df (2 层行索引，1 层列索引) . data = [ [&#39;电商&#39;, 101550, 176.92], [&#39;电商&#39;, 175336, 25.95], [&#39;金融&#39;, 60348, 41.79], [&#39;金融&#39;, 36600, 196.00] ] midx = pd.MultiIndex( levels=[[&#39;中国&#39;,&#39;美国&#39;], [&#39;BABA&#39;, &#39;JD&#39;, &#39;GS&#39;, &#39;MS&#39;]], codes=[[0,0,1,1],[0,1,2,3]], names = [&#39;地区&#39;, &#39;代号&#39;]) mcol = pd.Index([&#39;行业&#39;,&#39;雇员&#39;,&#39;价格&#39;], name=&#39;特征&#39;) df = pd.DataFrame( data, index=midx, columns=mcol ) df . 特征 行业 雇员 价格 . 地区 代号 . 中国 BABA 电商 | 101550 | 176.92 | . JD 电商 | 175336 | 25.95 | . 美国 GS 金融 | 60348 | 41.79 | . MS 金融 | 36600 | 196.00 | . 从上表中可知： . 行索引第一层： r1 = [中国, 美国]，名称是地区 . | 行索引第二层： r2 = [BABA, JD, GS, MS]，名称是代号 . | 列索引： c = [行业, 雇员, 价格]，名称是特征 . | . 查看 df 的 index 和 columns 的信息 . df.index, df.columns . (MultiIndex([(&#39;中国&#39;, &#39;BABA&#39;), (&#39;中国&#39;, &#39;JD&#39;), (&#39;美国&#39;, &#39;GS&#39;), (&#39;美国&#39;, &#39;MS&#39;)], names=[&#39;地区&#39;, &#39;代号&#39;]), Index([&#39;行业&#39;, &#39;雇员&#39;, &#39;价格&#39;], dtype=&#39;object&#39;, name=&#39;特征&#39;)) . 那么 . df 的行索引 = [r1, r2] . | df 的列索引 = c . | . 1.基于层来 unstack() 时，选择第一层 (参数放 0) . df.unstack(0) . 特征 行业 雇员 价格 . 地区 中国 美国 中国 美国 中国 美国 . 代号 . BABA 电商 | NaN | 101550.0 | NaN | 176.92 | NaN | . JD 电商 | NaN | 175336.0 | NaN | 25.95 | NaN | . GS NaN | 金融 | NaN | 60348.0 | NaN | 41.79 | . MS NaN | 金融 | NaN | 36600.0 | NaN | 196.00 | . df 被 unstack(0) 之后变成 (行 → 列) . 行索引 = r2 . | 列索引 = [c, r1] . | . 重塑后的 DataFrame 这时行索引只有一层 (代号)，而列索引有两层，第一层是特征，第二层是地区。 . 2.基于层来 unstack() 时，选择第二层 (参数放 1) . df.unstack(1) . 特征 行业 雇员 价格 . 代号 BABA JD GS MS BABA JD GS MS BABA JD GS MS . 地区 . 中国 电商 | 电商 | NaN | NaN | 101550.0 | 175336.0 | NaN | NaN | 176.92 | 25.95 | NaN | NaN | . 美国 NaN | NaN | 金融 | 金融 | NaN | NaN | 60348.0 | 36600.0 | NaN | NaN | 41.79 | 196.0 | . df 被 unstack(1) 之后变成 (行 → 列) . 行索引 = r1 . | 列索引 = [c, r2] . | . 重塑后的 DataFrame 这时行索引只有一层 (地区)，而列索引有两层，第一层是地区，第二层是代号。 . 3.基于层先 unstack(0) 再 stack(0) . df.unstack(0).stack(0) . 地区 中国 美国 . 代号 特征 . BABA 价格 176.92 | NaN | . 行业 电商 | NaN | . 雇员 101550 | NaN | . JD 价格 25.95 | NaN | . 行业 电商 | NaN | . 雇员 175336 | NaN | . GS 价格 NaN | 41.79 | . 行业 NaN | 金融 | . 雇员 NaN | 60348 | . MS 价格 NaN | 196 | . 行业 NaN | 金融 | . 雇员 NaN | 36600 | . df 被 unstack(0) 之后变成 (行 → 列) . 行索引 = r2 . | 列索引 = [c, r1] . | . 再被 stack(0) 之后变成 (列 → 行) . 行索引 = [r2, c] . | 列索引 = r1 . | . 重塑后的 DataFrame 这时行索引有两层，第一层是代号，第二层是特征，而列索引只有一层 (地区)。 . 4.基于层先 unstack(0) 再 stack(1) . df.unstack(0).stack(1) . 特征 行业 雇员 价格 . 代号 地区 . BABA 中国 电商 | 101550.0 | 176.92 | . JD 中国 电商 | 175336.0 | 25.95 | . GS 美国 金融 | 60348.0 | 41.79 | . MS 美国 金融 | 36600.0 | 196.00 | . df 被 unstack(0) 之后变成 (行 → 列) . 行索引 = r2 . | 列索引 = [c, r1] . | . 再被 stack(1) 之后变成 (列 → 行) . 行索引 = [r2, r1] . | 列索引 = c . | . 重塑后的 DataFrame 这时行索引有两层，第一层是代号，第二层是地区，而列索引只有一层 (特征)。 . 5.基于层先 unstack(1) 再 stack(0) . df.unstack(1).stack(0) . 代号 BABA GS JD MS . 地区 特征 . 中国 价格 176.92 | NaN | 25.95 | NaN | . 行业 电商 | NaN | 电商 | NaN | . 雇员 101550 | NaN | 175336 | NaN | . 美国 价格 NaN | 41.79 | NaN | 196 | . 行业 NaN | 金融 | NaN | 金融 | . 雇员 NaN | 60348 | NaN | 36600 | . df 被 unstack(1) 之后变成 (行 → 列) . 行索引 = r1 . | 列索引 = [c, r2] . | . 再被 stack(0) 之后变成 (列 → 行) . 行索引 = [r1, c] . | 列索引 = r2 . | . 重塑后的 DataFrame 这时行索引有两层，第一层是地区，第二层是特征，而列索引只有一层 (代号)。 . 6.基于层先 unstack(1) 再 stack(1) . df.unstack(1).stack(1) . 特征 行业 雇员 价格 . 地区 代号 . 中国 BABA 电商 | 101550.0 | 176.92 | . JD 电商 | 175336.0 | 25.95 | . 美国 GS 金融 | 60348.0 | 41.79 | . MS 金融 | 36600.0 | 196.00 | . df 被 unstack(1) 之后变成 (行 → 列) . 行索引 = r1 . | 列索引 = [c, r2] . | . 再被 stack(1) 之后变成 (列 → 行) . 行索引 = [r1, r2] . | 列索引 = c . | . 重塑后的 DataFrame 这时行索引有两层，第一层是地区，第二层是特征，而列索引只有一层 (代号)。还原成原来的 df 了。 . 7.基于层被 stack()，没有填层数，默认为最后一层。 . df.stack() . 地区 代号 特征 中国 BABA 行业 电商 雇员 101550 价格 176.92 JD 行业 电商 雇员 175336 价格 25.95 美国 GS 行业 金融 雇员 60348 价格 41.79 MS 行业 金融 雇员 36600 价格 196 dtype: object . df 被 stack() 之后变成 (列 → 行) . 行索引 = [r1, r2, c] . | 列索引 = [] . | . 重塑后的 Series 只有行索引，有三层，第一层是地区，第二层是代号，第三层是特征。 . 8.基于层被 unstack() 两次，没有填层数，默认为最后一层。 . df.unstack().unstack() . 特征 代号 地区 行业 BABA 中国 电商 美国 NaN JD 中国 电商 美国 NaN GS 中国 NaN 美国 金融 MS 中国 NaN 美国 金融 雇员 BABA 中国 101550 美国 NaN JD 中国 175336 美国 NaN GS 中国 NaN 美国 60348 MS 中国 NaN 美国 36600 价格 BABA 中国 176.92 美国 NaN JD 中国 25.95 美国 NaN GS 中国 NaN 美国 41.79 MS 中国 NaN 美国 196 dtype: object . df 被第一次 unstack() 之后变成 (行 → 列) . 行索引 = r1 . | 列索引 = [c, r2] . | . df 被第二次 unstack() 之后变成 (行 → 列) . 行索引 = [] . | 列索引 = [c, r2, r1] . | . 重塑后的 Series 只有列索引 (实际上是个转置的 Series)，有三层，第一层是特征，第二层是代号，第三层是地区。 . 5.2 透视 . 多个时间序列数据(在多个时间点观察或测量到的数据)通常是以所谓的“长格式”（long）或“堆叠格式”（stacked）存储在数据库和CSV中的。 . 因此，经常有重复值出现在各列下，因而导致源表不能传递有价值的信息。这时可用「透视」方法调整源表的布局用作更清晰的展示。 . 在 Pandas 里透视的方法有两种： . 用 pivot 函数将「长格式」旋转为「宽格式」， . | 用 melt 函数将「宽格式」旋转为「长格式」， . | . 本节使用的数据描述如下： . 5 只股票：AAPL, JD, BABA, FB, GS . | 4 个交易日：从 2019-02-21 到 2019-02-26 . | . data = pd.read_csv(&#39;data/Stock.csv&#39;, parse_dates=[0], dayfirst=True) data . Date Symbol Open High Low Close Adj Close Volume . 0 2019-02-21 | AAPL | 171.800003 | 172.369995 | 170.300003 | 171.059998 | 171.059998 | 17249700 | . 1 2019-02-21 | JD | 24.820000 | 24.879999 | 24.010000 | 24.270000 | 24.270000 | 13542600 | . 2 2019-02-21 | BABA | 171.000000 | 171.779999 | 169.800003 | 171.660004 | 171.660004 | 8434800 | . 3 2019-02-21 | GS | 198.970001 | 199.449997 | 195.050003 | 196.360001 | 196.360001 | 2785900 | . 4 2019-02-21 | FB | 161.929993 | 162.240005 | 159.589996 | 160.039993 | 160.039993 | 15607800 | . 5 2019-02-22 | AAPL | 171.580002 | 173.000000 | 171.380005 | 172.970001 | 172.970001 | 18913200 | . 6 2019-02-22 | JD | 24.549999 | 25.959999 | 24.480000 | 25.950001 | 25.950001 | 27113300 | . 7 2019-02-22 | BABA | 172.800003 | 177.020004 | 172.520004 | 176.919998 | 176.919998 | 16175600 | . 8 2019-02-22 | GS | 196.600006 | 197.750000 | 195.199997 | 196.000000 | 196.000000 | 2626600 | . 9 2019-02-22 | FB | 160.580002 | 162.410004 | 160.309998 | 161.889999 | 161.889999 | 15858500 | . 10 2019-02-25 | AAPL | 174.160004 | 175.869995 | 173.949997 | 174.229996 | 174.229996 | 21873400 | . 11 2019-02-25 | JD | 27.110001 | 27.379999 | 26.040001 | 26.190001 | 26.190001 | 29338500 | . 12 2019-02-25 | BABA | 181.259995 | 183.720001 | 180.729996 | 183.250000 | 183.250000 | 22831800 | . 13 2019-02-25 | GS | 198.000000 | 201.500000 | 197.710007 | 198.649994 | 198.649994 | 3032200 | . 14 2019-02-25 | FB | 163.070007 | 166.070007 | 162.899994 | 164.619995 | 164.619995 | 18737100 | . 15 2019-02-26 | AAPL | 173.710007 | 175.300003 | 173.169998 | 174.330002 | 174.330002 | 17006000 | . 16 2019-02-26 | JD | 25.980000 | 26.820000 | 25.660000 | 26.590000 | 26.590000 | 20264100 | . 17 2019-02-26 | BABA | 179.789993 | 184.350006 | 179.369995 | 183.539993 | 183.539993 | 13857900 | . 18 2019-02-26 | GS | 198.470001 | 200.559998 | 196.550003 | 198.899994 | 198.899994 | 2498000 | . 19 2019-02-26 | FB | 164.339996 | 166.240005 | 163.800003 | 164.130005 | 164.130005 | 13645200 | . 从上表看出有 20 行 (5 × 4) 和 8 列，在 Date 和 Symbol 那两列下就有重复值，4 个日期和 5 个股票在 20 行中分别出现了 5 次和 4 次。 . 这就是多个时间序列（或者其它带有两个或多个键的可观察数据，这里，我们的键是Date和Symbol）的长格式。表中的每行代表一次观察。 . 关系型数据库（如MySQL）中的数据经常都是这样存储的，因为固定架构（即列名和数据类型）有一个好处：随着表中数据的添加，Symbol列中的值的种类能够增加。在前面的例子中，Date和Symbol通常就是主键（关系型数据库中的术语，是表中的一个或多个字段，它的值用于唯一地标识表中的某一条记录），不仅提供了关系完整性，而且提供了更为简单的查询支持。有的情况下，使用这样的数据会很麻烦，你可能会更喜欢不同的Symbol值分别形成一列，Date列中的时间戳则用作索引。DataFrame的pivot方法完全可以实现这个转换： . 从长到宽 (pivot) . 当我们做数据分析时，只关注不同股票在不同日期下的 Adj Close . data.iloc[:,[0,1,6]] . Date Symbol Adj Close . 0 2019-02-21 | AAPL | 171.059998 | . 1 2019-02-21 | JD | 24.270000 | . 2 2019-02-21 | BABA | 171.660004 | . 3 2019-02-21 | GS | 196.360001 | . 4 2019-02-21 | FB | 160.039993 | . 5 2019-02-22 | AAPL | 172.970001 | . 6 2019-02-22 | JD | 25.950001 | . 7 2019-02-22 | BABA | 176.919998 | . 8 2019-02-22 | GS | 196.000000 | . 9 2019-02-22 | FB | 161.889999 | . 10 2019-02-25 | AAPL | 174.229996 | . 11 2019-02-25 | JD | 26.190001 | . 12 2019-02-25 | BABA | 183.250000 | . 13 2019-02-25 | GS | 198.649994 | . 14 2019-02-25 | FB | 164.619995 | . 15 2019-02-26 | AAPL | 174.330002 | . 16 2019-02-26 | JD | 26.590000 | . 17 2019-02-26 | BABA | 183.539993 | . 18 2019-02-26 | GS | 198.899994 | . 19 2019-02-26 | FB | 164.130005 | . 那么可用 pivot 函数将原始 data「透视」成一个新的 DataFrame，起名 close_price。在 pivot 函数中 . 将 index 设置成 ‘Date’ . | 将 columns 设置成 ‘Symbol’ . | 将 values 设置 ‘Adj Close’ . | . close_price 实际上把 data[‘Date’] 和 data[‘Symbol’] 的唯一值当成支点(pivot 就是支点的意思) 创建一个 DataFrame，其中 . 行标签 = 2019-02-21, 2019-02-22, 2019-02-25, 2019-02-26 . | 列标签 = AAPL, JD, BABA, FB, GS . | . 在把 data[‘Adj Close’] 的值放在以如上的行标签和列标签创建的 close_price 来展示。 . 代码如下： . close_price = data.pivot( index=&#39;Date&#39;, columns=&#39;Symbol&#39;, values=&#39;Adj Close&#39; ) close_price . Symbol AAPL BABA FB GS JD . Date . 2019-02-21 171.059998 | 171.660004 | 160.039993 | 196.360001 | 24.270000 | . 2019-02-22 172.970001 | 176.919998 | 161.889999 | 196.000000 | 25.950001 | . 2019-02-25 174.229996 | 183.250000 | 164.619995 | 198.649994 | 26.190001 | . 2019-02-26 174.330002 | 183.539993 | 164.130005 | 198.899994 | 26.590000 | . 如果觉得 Adj Close 不够，还想加个 Volume 看看，这时支点还是 data[‘Date’] 和 data[‘Symbol’]，但是要透视的值增加到 data[[‘Adj Close’, ‘Volume’]] 了。pivot 函数返回的是两个透视表。 . # data.pivot( index=&#39;Date&#39;, # columns=&#39;Symbol&#39;, # values=[&#39;Adj Close&#39;,&#39;Volume&#39;] ) data.pivot( index=&#39;Date&#39;, columns=&#39;Symbol&#39;)[[&#39;Adj Close&#39;,&#39;Volume&#39;]] . Adj Close Volume . Symbol AAPL BABA FB GS JD AAPL BABA FB GS JD . Date . 2019-02-21 171.059998 | 171.660004 | 160.039993 | 196.360001 | 24.270000 | 17249700 | 8434800 | 15607800 | 2785900 | 13542600 | . 2019-02-22 172.970001 | 176.919998 | 161.889999 | 196.000000 | 25.950001 | 18913200 | 16175600 | 15858500 | 2626600 | 27113300 | . 2019-02-25 174.229996 | 183.250000 | 164.619995 | 198.649994 | 26.190001 | 21873400 | 22831800 | 18737100 | 3032200 | 29338500 | . 2019-02-26 174.330002 | 183.539993 | 164.130005 | 198.899994 | 26.590000 | 17006000 | 13857900 | 13645200 | 2498000 | 20264100 | . 如果不设置 values 参数，那么 pivot 函数返回的是六个透视表。(源表 data 有八列，两列当了支点，剩下六列用来透视) . all_pivot = data.pivot( index=&#39;Date&#39;, columns=&#39;Symbol&#39; ) all_pivot . Open High ... Adj Close Volume . Symbol AAPL BABA FB GS JD AAPL BABA FB GS JD ... AAPL BABA FB GS JD AAPL BABA FB GS JD . Date . 2019-02-21 171.800003 | 171.000000 | 161.929993 | 198.970001 | 24.820000 | 172.369995 | 171.779999 | 162.240005 | 199.449997 | 24.879999 | ... | 171.059998 | 171.660004 | 160.039993 | 196.360001 | 24.270000 | 17249700 | 8434800 | 15607800 | 2785900 | 13542600 | . 2019-02-22 171.580002 | 172.800003 | 160.580002 | 196.600006 | 24.549999 | 173.000000 | 177.020004 | 162.410004 | 197.750000 | 25.959999 | ... | 172.970001 | 176.919998 | 161.889999 | 196.000000 | 25.950001 | 18913200 | 16175600 | 15858500 | 2626600 | 27113300 | . 2019-02-25 174.160004 | 181.259995 | 163.070007 | 198.000000 | 27.110001 | 175.869995 | 183.720001 | 166.070007 | 201.500000 | 27.379999 | ... | 174.229996 | 183.250000 | 164.619995 | 198.649994 | 26.190001 | 21873400 | 22831800 | 18737100 | 3032200 | 29338500 | . 2019-02-26 173.710007 | 179.789993 | 164.339996 | 198.470001 | 25.980000 | 175.300003 | 184.350006 | 166.240005 | 200.559998 | 26.820000 | ... | 174.330002 | 183.539993 | 164.130005 | 198.899994 | 26.590000 | 17006000 | 13857900 | 13645200 | 2498000 | 20264100 | . 4 rows × 30 columns . 注意，pivot其实就是用set_index创建层次化索引，再用unstack重塑： . unstacked = data.set_index([&#39;Date&#39;, &#39;Symbol&#39;]).unstack(&#39;Symbol&#39;) unstacked . Open High ... Adj Close Volume . Symbol AAPL BABA FB GS JD AAPL BABA FB GS JD ... AAPL BABA FB GS JD AAPL BABA FB GS JD . Date . 2019-02-21 171.800003 | 171.000000 | 161.929993 | 198.970001 | 24.820000 | 172.369995 | 171.779999 | 162.240005 | 199.449997 | 24.879999 | ... | 171.059998 | 171.660004 | 160.039993 | 196.360001 | 24.270000 | 17249700 | 8434800 | 15607800 | 2785900 | 13542600 | . 2019-02-22 171.580002 | 172.800003 | 160.580002 | 196.600006 | 24.549999 | 173.000000 | 177.020004 | 162.410004 | 197.750000 | 25.959999 | ... | 172.970001 | 176.919998 | 161.889999 | 196.000000 | 25.950001 | 18913200 | 16175600 | 15858500 | 2626600 | 27113300 | . 2019-02-25 174.160004 | 181.259995 | 163.070007 | 198.000000 | 27.110001 | 175.869995 | 183.720001 | 166.070007 | 201.500000 | 27.379999 | ... | 174.229996 | 183.250000 | 164.619995 | 198.649994 | 26.190001 | 21873400 | 22831800 | 18737100 | 3032200 | 29338500 | . 2019-02-26 173.710007 | 179.789993 | 164.339996 | 198.470001 | 25.980000 | 175.300003 | 184.350006 | 166.240005 | 200.559998 | 26.820000 | ... | 174.330002 | 183.539993 | 164.130005 | 198.899994 | 26.590000 | 17006000 | 13857900 | 13645200 | 2498000 | 20264100 | . 4 rows × 30 columns . 再继续观察下，all_pivot 实际上是个多层 DataFrame (有多层 columns)。假设要获取 2019-02-25 和 2019-02-26 两天的 BABA 和 FB 的开盘价，用以下「多层索引和切片」的方法。 . all_pivot[&#39;Open&#39;].iloc[2:,1:3] . Symbol BABA FB . Date . 2019-02-25 181.259995 | 163.070007 | . 2019-02-26 179.789993 | 164.339996 | . Mc补充： . pandas.pivot的重点在于reshape, 通俗理解就是合并同类项，如果数据中有多个值(2个或以上)对应的行索引和列索引都相同时，pivot将会报错：Index contains duplicate entries, cannot reshape，而pivot_table不会报错，默认计算相同数据的均值并返回。 如果每个值对应的行索引和列索引都是唯一的，两者的结果则是一样的。 . from collections import OrderedDict #有序字典 table = OrderedDict(((&quot;Item&quot;, [&#39;Item0&#39;, &#39;Item0&#39;, &#39;Item1&#39;, &#39;Item1&#39;]), (&#39;CType&#39;,[&#39;Gold&#39;, &#39;Bronze&#39;, &#39;Gold&#39;, &#39;Silver&#39;]), (&#39;USD&#39;, [1, 2, 3, 4]), (&#39;EU&#39;, [1, 2, 3, 4]))) d = pd.DataFrame(table) d . Item CType USD EU . 0 Item0 | Gold | 1 | 1 | . 1 Item0 | Bronze | 2 | 2 | . 2 Item1 | Gold | 3 | 3 | . 3 Item1 | Silver | 4 | 4 | . . d.pivot(index=&#39;Item&#39;, columns=&#39;CType&#39;, values=&#39;USD&#39;) . CType Bronze Gold Silver . Item . Item0 2.0 | 1.0 | NaN | . Item1 NaN | 3.0 | 4.0 | . . d.pivot(index=&#39;Item&#39;, columns=&#39;CType&#39;) . USD EU . CType Bronze Gold Silver Bronze Gold Silver . Item . Item0 2.0 | 1.0 | NaN | 2.0 | 1.0 | NaN | . Item1 NaN | 3.0 | 4.0 | NaN | 3.0 | 4.0 | . . 如果数据中的一个值对应的行索引和列索引都相同时，pivot将会报错 . d.loc[2,&#39;Item&#39;] = &#39;Item0&#39; d.pivot(index=&#39;Item&#39;,columns=&#39;CType&#39;,values=&#39;USD&#39;) . ValueError Traceback (most recent call last) &lt;ipython-input-50-edeae3aec8b5&gt; in &lt;module&gt; 1 d.loc[2,&#39;Item&#39;] = &#39;Item0&#39; -&gt; 2 d.pivot(index=&#39;Item&#39;,columns=&#39;CType&#39;,values=&#39;USD&#39;) D: Anaconda envs python32 lib site-packages pandas core frame.py in pivot(self, index, columns, values) 5921 from pandas.core.reshape.pivot import pivot 5922 -&gt; 5923 return pivot(self, index=index, columns=columns, values=values) 5924 5925 _shared_docs[ D: Anaconda envs python32 lib site-packages pandas core reshape pivot.py in pivot(data, index, columns, values) 448 else: 449 indexed = data._constructor_sliced(data[values].values, index=index) --&gt; 450 return indexed.unstack(columns) 451 452 D: Anaconda envs python32 lib site-packages pandas core series.py in unstack(self, level, fill_value) 3548 from pandas.core.reshape.reshape import unstack 3549 -&gt; 3550 return unstack(self, level, fill_value) 3551 3552 # - D: Anaconda envs python32 lib site-packages pandas core reshape reshape.py in unstack(obj, level, fill_value) 417 level=level, 418 fill_value=fill_value, --&gt; 419 constructor=obj._constructor_expanddim, 420 ) 421 return unstacker.get_result() D: Anaconda envs python32 lib site-packages pandas core reshape reshape.py in __init__(self, values, index, level, value_columns, fill_value, constructor) 139 140 self._make_sorted_values_labels() --&gt; 141 self._make_selectors() 142 143 def _make_sorted_values_labels(self): D: Anaconda envs python32 lib site-packages pandas core reshape reshape.py in _make_selectors(self) 177 178 if mask.sum() &lt; len(self.index): --&gt; 179 raise ValueError(&quot;Index contains duplicate entries, cannot reshape&quot;) 180 181 self.group_index = comp_index ValueError: Index contains duplicate entries, cannot reshape . #可以删除其他同类项，但数据会不准确 dt = d.drop_duplicates(subset=[&#39;Item&#39;,&#39;CType&#39;]) print(dt) dt.pivot(index=&#39;Item&#39;,columns=&#39;CType&#39;,values=&#39;USD&#39;) . Item CType USD EU 0 Item0 Gold 1 1 1 Item0 Bronze 2 2 3 Item1 Silver 4 4 . CType Bronze Gold Silver . Item . Item0 2.0 | 1.0 | NaN | . Item1 NaN | NaN | 4.0 | . . 使用pivot_table不会报错，默认计算相同数据的均值并返回。 . 推荐使用pivot_table . d.pivot_table(index=&#39;Item&#39;,columns=&#39;CType&#39;,values=&#39;USD&#39;,aggfunc=np.mean) #默认取均值aggfunc=np.mean，你也可以指定为求和，即aggfunc=np.sum . CType Bronze Gold Silver . Item . Item0 2.0 | 2.0 | NaN | . Item1 NaN | NaN | 4.0 | . 从宽到长 (melt) . 旋转DataFrame的逆运算是pandas.melt，它合并多个列成为一个，产生一个比输入长的DataFrame。 . 当使用pandas.melt，必须指明哪些列是分组指标。具体来说，函数 melt 实际是将「源表」转化成 id-variable 类型的 DataFrame，下例将 . Date 和 Symbol 列当成 id，即分组指标 . | 其他列 Open, High, Low, Close, Adj Close 和 Volume 当成 variable，而它们对应的值当成 value . | . 代码如下： . melted_data = pd.melt( data, id_vars=[&#39;Date&#39;,&#39;Symbol&#39;] ) melted_data.head(5).append(melted_data.tail(5)) . Date Symbol variable value . 0 2019-02-21 | AAPL | Open | 1.718000e+02 | . 1 2019-02-21 | JD | Open | 2.482000e+01 | . 2 2019-02-21 | BABA | Open | 1.710000e+02 | . 3 2019-02-21 | GS | Open | 1.989700e+02 | . 4 2019-02-21 | FB | Open | 1.619300e+02 | . 115 2019-02-26 | AAPL | Volume | 1.700600e+07 | . 116 2019-02-26 | JD | Volume | 2.026410e+07 | . 117 2019-02-26 | BABA | Volume | 1.385790e+07 | . 118 2019-02-26 | GS | Volume | 2.498000e+06 | . 119 2019-02-26 | FB | Volume | 1.364520e+07 | . 新生成的 DataFrame 有 120 行 (4 × 5 × 6) . 4 = data[‘Date’] 有 4 个日期 . | 5 = data[‘Symbol’] 有 5 只股票 . | 6 = Open, High, Low, Close, Adj Close 和 Volume 这 6 个变量 . | . 在新表 melted_data 中 . 在参数 id_vars 设置的 Date 和 Symbol 还保持为 columns . | 此外还多出两个 columns，一个叫 variable，一个叫 value . variable 列下的值为 Open, High, Low, Close, Adj Close 和 Volume . | value 列下的值为前者在「源表 data」中的值 . | . | . 函数 melt 可以生成一张含有多个 id 的长表，然后可在 id 上筛选出想要的信息，比如 . melted_data[ lambda x: (x.Date==&#39;25/02/2019&#39;) &amp; ((x.Symbol==&#39;BABA&#39;)|(x.Symbol==&#39;FB&#39;)) ] . Date Symbol variable value . 12 2019-02-25 | BABA | Open | 1.812600e+02 | . 14 2019-02-25 | FB | Open | 1.630700e+02 | . 32 2019-02-25 | BABA | High | 1.837200e+02 | . 34 2019-02-25 | FB | High | 1.660700e+02 | . 52 2019-02-25 | BABA | Low | 1.807300e+02 | . 54 2019-02-25 | FB | Low | 1.629000e+02 | . 72 2019-02-25 | BABA | Close | 1.832500e+02 | . 74 2019-02-25 | FB | Close | 1.646200e+02 | . 92 2019-02-25 | BABA | Adj Close | 1.832500e+02 | . 94 2019-02-25 | FB | Adj Close | 1.646200e+02 | . 112 2019-02-25 | BABA | Volume | 2.283180e+07 | . 114 2019-02-25 | FB | Volume | 1.873710e+07 | . 在 melted_data 上使用调用函数 (callable function) 做索引，可以得到在 2019-02-25 那天 BABA 和 FB 的信息。 . 6 数据表的分组和聚合 . DataFrame 中的数据可以根据某些规则分组，然后在每组的数据上计算出不同统计量。这种操作称之为 split-apply-combine（拆分－应用－合并）。 . . 第一个阶段，pandas对象（无论是Series、DataFrame还是其他的）中的数据会根据你所提供的一个或多个键被拆分（split）为多组。拆分操作是在对象的特定轴上执行的。例如，DataFrame可以在其行（axis=0）或列（axis=1）上进行分组。然后，将一个函数应用（apply）到各个分组并产生一个新值。最后，所有这些函数的执行结果会被合并（combine）到最终的结果对象中。结果对象的形式一般取决于数据上所执行的操作。 . 该 split-apply-combine 过程有两步(apply-combine合为一步完成)： . Step1 ：数据分组(split) . groupby 方法 | . Step2 ：数据聚合(apply-combine) . 使用内置函数——sum / mean / max / min / count等 . | 使用自定义函数—— agg ( aggregate ) 方法 . | 自定义更丰富的分组运算—— apply 方法 . | . agg 方法将一个函数使用在一个数列上，然后返回一个标量的值。也就是说agg每次传入的是一列数据，对其聚合后返回标量。 . apply 是一个更一般化的方法，会将当前分组后的数据一起传入，返回多维数据。 . 6.1 数据准备 . 本节使用数据：泰坦尼克数据集 . PassengerId =&gt; 乘客编号 . | Survived =&gt; 获救情况（1为获救，0为未获救） . | Pclass =&gt; 乘客等级(1/2/3等舱位) . | Name =&gt; 乘客姓名 . | Sex =&gt; 性别 . | Age =&gt; 年龄 . | SibSp =&gt; 堂兄弟/妹个数 . | Parch =&gt; 父母与小孩个数 . | Ticket =&gt; 船票信息 . | Fare =&gt; 票价 . | Cabin =&gt; 客舱 . | Embarked =&gt; 登船港口 . | . titanic = pd.read_csv(r&#39;data Titanic.csv&#39;) titanic.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 用前面所学透视一下数据： . titanic.pivot_table(index=&#39;Sex&#39;,columns=&#39;Pclass&#39;,values=&#39;Survived&#39;) . Pclass 1 2 3 . Sex . female 0.968085 | 0.921053 | 0.500000 | . male 0.368852 | 0.157407 | 0.135447 | . titanic.pivot_table(index=&#39;Sex&#39;,columns=&#39;Pclass&#39;,values=&#39;Survived&#39;,aggfunc=&#39;sum&#39;) . Pclass 1 2 3 . Sex . female 91 | 70 | 72 | . male 45 | 17 | 47 | . titanic.pivot_table(index=&#39;Sex&#39;,columns=&#39;Pclass&#39;,aggfunc={&#39;Survived&#39;:&#39;sum&#39;,&#39;Age&#39;:&#39;mean&#39;}) . Age Survived . Pclass 1 2 3 1 2 3 . Sex . female 34.611765 | 28.722973 | 21.750000 | 91 | 70 | 72 | . male 41.281386 | 30.740707 | 26.507589 | 45 | 17 | 47 | . 6.2 分组 (grouping) . 用某一特定标签 (label) 将数据 (data) 分组的语法如下： . data.groupBy( label ) . 单标签分组 首先来按 Symbol 来分组： . grouped = titanic.groupby(&#39;Sex&#39;) grouped . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000278AE849CC0&gt; . dir(grouped) . [&#39;Age&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;, &#39;Fare&#39;, &#39;Name&#39;, &#39;Parch&#39;, &#39;PassengerId&#39;, &#39;Pclass&#39;, &#39;Sex&#39;, &#39;SibSp&#39;, &#39;Survived&#39;, &#39;Ticket&#39;, &#39;__annotations__&#39;, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_accessors&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_see_also_doc&#39;, &#39;_aggregate&#39;, &#39;_aggregate_frame&#39;, &#39;_aggregate_item_by_item&#39;, &#39;_aggregate_multiple_funcs&#39;, &#39;_apply_filter&#39;, &#39;_apply_to_column_groupbys&#39;, &#39;_apply_whitelist&#39;, &#39;_assure_grouper&#39;, &#39;_bool_agg&#39;, &#39;_builtin_table&#39;, &#39;_choose_path&#39;, &#39;_concat_objects&#39;, &#39;_constructor&#39;, &#39;_cumcount_array&#39;, &#39;_cython_agg_blocks&#39;, &#39;_cython_agg_general&#39;, &#39;_cython_table&#39;, &#39;_cython_transform&#39;, &#39;_define_paths&#39;, &#39;_deprecations&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_fill&#39;, &#39;_get_cython_func&#39;, &#39;_get_cythonized_result&#39;, &#39;_get_data_to_aggregate&#39;, &#39;_get_index&#39;, &#39;_get_indices&#39;, &#39;_gotitem&#39;, &#39;_group_selection&#39;, &#39;_insert_inaxis_grouper_inplace&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_builtin_func&#39;, &#39;_iterate_column_groupbys&#39;, &#39;_iterate_slices&#39;, &#39;_make_wrapper&#39;, &#39;_obj_with_exclusions&#39;, &#39;_python_agg_general&#39;, &#39;_python_apply_general&#39;, &#39;_reindex_output&#39;, &#39;_reset_cache&#39;, &#39;_reset_group_selection&#39;, &#39;_selected_obj&#39;, &#39;_selection&#39;, &#39;_selection_list&#39;, &#39;_selection_name&#39;, &#39;_set_group_selection&#39;, &#39;_set_result_index_ordered&#39;, &#39;_transform_fast&#39;, &#39;_transform_general&#39;, &#39;_transform_item_by_item&#39;, &#39;_transform_should_cast&#39;, &#39;_try_aggregate_string_function&#39;, &#39;_try_cast&#39;, &#39;_wrap_agged_blocks&#39;, &#39;_wrap_aggregated_output&#39;, &#39;_wrap_applied_output&#39;, &#39;_wrap_frame_output&#39;, &#39;_wrap_transformed_output&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;all&#39;, &#39;any&#39;, &#39;apply&#39;, &#39;backfill&#39;, &#39;bfill&#39;, &#39;boxplot&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cumcount&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;dtypes&#39;, &#39;expanding&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;get_group&#39;, &#39;groups&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;indices&#39;, &#39;last&#39;, &#39;mad&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;min&#39;, &#39;ndim&#39;, &#39;ngroup&#39;, &#39;ngroups&#39;, &#39;nth&#39;, &#39;nunique&#39;, &#39;ohlc&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;plot&#39;, &#39;prod&#39;, &#39;quantile&#39;, &#39;rank&#39;, &#39;resample&#39;, &#39;rolling&#39;, &#39;sem&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;std&#39;, &#39;sum&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;transform&#39;, &#39;tshift&#39;, &#39;var&#39;] . 又要提起那句说了无数遍的话「万物皆对象」了。这个 grouped 也不例外，当你对如果使用某个对象感到迷茫时，用 dir() 来查看它的「属性」和「内置方法」。以下几个属性和方法是学生感兴趣的： . ngroups: 组的个数 (int) . | size(): 每组元素的个数 (Series) . | groups: 每组元素在原 DataFrame 中的索引信息 (dict) . | get_groups(label): 标签 label 对应的数据 (DataFrame) . | . 下面看看这些属性和方法的产出结果。 . 数据里性别为male和female，因此有2组。 . 列索引变行索引，同项合并得到新运算结果 . grouped.ngroups . 2 . 每组的信息条数 . grouped.size() . Sex female 314 male 577 dtype: int64 . 女士 (female) 的索引 1, 2, 3, 8, 9, …，男士( male) 的索引0, 4, 5, 6, 7,… . grouped.groups . {&#39;female&#39;: Int64Index([ 1, 2, 3, 8, 9, 10, 11, 14, 15, 18, ... 866, 871, 874, 875, 879, 880, 882, 885, 887, 888], dtype=&#39;int64&#39;, length=314), &#39;male&#39;: Int64Index([ 0, 4, 5, 6, 7, 12, 13, 16, 17, 20, ... 873, 876, 877, 878, 881, 883, 884, 886, 889, 890], dtype=&#39;int64&#39;, length=577)} . 查查 ‘male’ 组里的数据的前五行。 . grouped.get_group(&#39;male&#39;).head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. James | male | NaN | 0 | 0 | 330877 | 8.4583 | NaN | Q | . 6 7 | 0 | 1 | McCarthy, Mr. Timothy J | male | 54.0 | 0 | 0 | 17463 | 51.8625 | E46 | S | . 7 8 | 0 | 3 | Palsson, Master. Gosta Leonard | male | 2.0 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 接下来定义个 print_groups 函数便于打印组的名字和前五行信息。 . def print_groups( group_obj ): for name, group in group_obj: print( name ) print( group.head() ) . 用这个函数来调用 grouped (上面用 groupBy 得到的对象） . print_groups( grouped ) . female PassengerId Survived Pclass 1 2 1 1 2 3 1 3 3 4 1 1 8 9 1 3 9 10 1 2 Name Sex Age SibSp 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 8 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27.0 0 9 Nasser, Mrs. Nicholas (Adele Achem) female 14.0 1 Parch Ticket Fare Cabin Embarked 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 NaN S 3 0 113803 53.1000 C123 S 8 2 347742 11.1333 NaN S 9 0 237736 30.0708 NaN C male PassengerId Survived Pclass Name Sex Age 0 1 0 3 Braund, Mr. Owen Harris male 22.0 4 5 0 3 Allen, Mr. William Henry male 35.0 5 6 0 3 Moran, Mr. James male NaN 6 7 0 1 McCarthy, Mr. Timothy J male 54.0 7 8 0 3 Palsson, Master. Gosta Leonard male 2.0 SibSp Parch Ticket Fare Cabin Embarked 0 1 0 A/5 21171 7.2500 NaN S 4 0 0 373450 8.0500 NaN S 5 0 0 330877 8.4583 NaN Q 6 0 0 17463 51.8625 E46 S 7 3 1 349909 21.0750 NaN S . 这个 print_groups 函数在下面也多次被用到。 . 多标签分组 groupBy 函数除了支持单标签分组，也支持多标签分组 (将标签放入一个列表中)。 . grouped2 = titanic.groupby([&#39;Sex&#39;,&#39;Pclass&#39;]) print_groups( grouped2 ) . (&#39;female&#39;, 1) PassengerId Survived Pclass 1 2 1 1 3 4 1 1 11 12 1 1 31 32 1 1 52 53 1 1 Name Sex Age SibSp 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 11 Bonnell, Miss. Elizabeth female 58.0 0 31 Spencer, Mrs. William Augustus (Marie Eugenie) female NaN 1 52 Harper, Mrs. Henry Sleeper (Myna Haxtun) female 49.0 1 Parch Ticket Fare Cabin Embarked 1 0 PC 17599 71.2833 C85 C 3 0 113803 53.1000 C123 S 11 0 113783 26.5500 C103 S 31 0 PC 17569 146.5208 B78 C 52 0 PC 17572 76.7292 D33 C (&#39;female&#39;, 2) PassengerId Survived Pclass 9 10 1 2 15 16 1 2 41 42 0 2 43 44 1 2 53 54 1 2 Name Sex Age SibSp 9 Nasser, Mrs. Nicholas (Adele Achem) female 14.0 1 15 Hewlett, Mrs. (Mary D Kingcome) female 55.0 0 41 Turpin, Mrs. William John Robert (Dorothy Ann ... female 27.0 1 43 Laroche, Miss. Simonne Marie Anne Andree female 3.0 1 53 Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkin... female 29.0 1 Parch Ticket Fare Cabin Embarked 9 0 237736 30.0708 NaN C 15 0 248706 16.0000 NaN S 41 0 11668 21.0000 NaN S 43 2 SC/Paris 2123 41.5792 NaN C 53 0 2926 26.0000 NaN S (&#39;female&#39;, 3) PassengerId Survived Pclass 2 3 1 3 8 9 1 3 10 11 1 3 14 15 0 3 18 19 0 3 Name Sex Age SibSp 2 Heikkinen, Miss. Laina female 26.0 0 8 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female 27.0 0 10 Sandstrom, Miss. Marguerite Rut female 4.0 1 14 Vestrom, Miss. Hulda Amanda Adolfina female 14.0 0 18 Vander Planke, Mrs. Julius (Emelia Maria Vande... female 31.0 1 Parch Ticket Fare Cabin Embarked 2 0 STON/O2. 3101282 7.9250 NaN S 8 2 347742 11.1333 NaN S 10 1 PP 9549 16.7000 G6 S 14 0 350406 7.8542 NaN S 18 0 345763 18.0000 NaN S (&#39;male&#39;, 1) PassengerId Survived Pclass Name Sex Age 6 7 0 1 McCarthy, Mr. Timothy J male 54.0 23 24 1 1 Sloper, Mr. William Thompson male 28.0 27 28 0 1 Fortune, Mr. Charles Alexander male 19.0 30 31 0 1 Uruchurtu, Don. Manuel E male 40.0 34 35 0 1 Meyer, Mr. Edgar Joseph male 28.0 SibSp Parch Ticket Fare Cabin Embarked 6 0 0 17463 51.8625 E46 S 23 0 0 113788 35.5000 A6 S 27 3 2 19950 263.0000 C23 C25 C27 S 30 0 0 PC 17601 27.7208 NaN C 34 1 0 PC 17604 82.1708 NaN C (&#39;male&#39;, 2) PassengerId Survived Pclass Name Sex Age 17 18 1 2 Williams, Mr. Charles Eugene male NaN 20 21 0 2 Fynney, Mr. Joseph J male 35.0 21 22 1 2 Beesley, Mr. Lawrence male 34.0 33 34 0 2 Wheadon, Mr. Edward H male 66.0 70 71 0 2 Jenkin, Mr. Stephen Curnow male 32.0 SibSp Parch Ticket Fare Cabin Embarked 17 0 0 244373 13.0 NaN S 20 0 0 239865 26.0 NaN S 21 0 0 248698 13.0 D56 S 33 0 0 C.A. 24579 10.5 NaN S 70 0 0 C.A. 33111 10.5 NaN S (&#39;male&#39;, 3) PassengerId Survived Pclass Name Sex Age 0 1 0 3 Braund, Mr. Owen Harris male 22.0 4 5 0 3 Allen, Mr. William Henry male 35.0 5 6 0 3 Moran, Mr. James male NaN 7 8 0 3 Palsson, Master. Gosta Leonard male 2.0 12 13 0 3 Saundercock, Mr. William Henry male 20.0 SibSp Parch Ticket Fare Cabin Embarked 0 1 0 A/5 21171 7.2500 NaN S 4 0 0 373450 8.0500 NaN S 5 0 0 330877 8.4583 NaN Q 7 3 1 349909 21.0750 NaN S 12 0 0 A/5. 2151 8.0500 NaN S . 6.3 聚合 (aggregating) . 6.3.1 使用内置函数——sum / mean / max / min / count等 . grouped.mean() # grouped.sum() # grouped.max() # grouped.min() # grouped.count() . PassengerId Survived Pclass Age SibSp Parch Fare . Sex . female 431.028662 | 0.742038 | 2.159236 | 27.915709 | 0.694268 | 0.649682 | 44.479818 | . male 454.147314 | 0.188908 | 2.389948 | 30.726645 | 0.429809 | 0.235702 | 25.523893 | . 6.3.2 使用自定义函数—— agg ( aggregate ) 方法 . agg 方法将一个函数使用在一个数列上，然后返回一个标量的值。也就是说agg每次传入的是一列数据，对其聚合后返回标量。 . # grouped[&#39;Survived&#39;].agg(np.mean) grouped.agg(np.mean) . PassengerId Survived Pclass Age SibSp Parch Fare . Sex . female 431.028662 | 0.742038 | 2.159236 | 27.915709 | 0.694268 | 0.649682 | 44.479818 | . male 454.147314 | 0.188908 | 2.389948 | 30.726645 | 0.429809 | 0.235702 | 25.523893 | . titanic.groupby([&#39;Sex&#39;,&#39;Pclass&#39;])[&#39;Survived&#39;].agg([&#39;mean&#39;,&#39;sum&#39;]) # 或者这样写 # titanic.groupby([&#39;Sex&#39;,&#39;Pclass&#39;])[&#39;Survived&#39;].agg([np.mean,np.sum]) . mean sum . Sex Pclass . female 1 0.968085 | 91 | . 2 0.921053 | 70 | . 3 0.500000 | 72 | . male 1 0.368852 | 45 | . 2 0.157407 | 17 | . 3 0.135447 | 47 | . 将 np.mean 和 np.std 放进列表中，当成是高阶函数 agg() 的参数。上面代码按性别和乘客等级对获救情况求均值与和。 . 既然 agg() 是高阶函数，参数当然也可以是匿名函数 (lambda 函数)，下面先定义一个对 grouped2 里面每个标签下求最大值和最小值，再求差。注意 lambda 函数里面的 x 就是 grouped2。 . grouped2.agg( lambda x: np.max(x)-np.min(x) ) . PassengerId Survived Age SibSp Parch Fare . Sex Pclass . female 1 886 | 1 | 61.00 | 3 | 2 | 486.4000 | . 2 871 | 1 | 55.00 | 3 | 3 | 54.5000 | . 3 886 | 1 | 62.25 | 8 | 6 | 62.8000 | . male 1 883 | 1 | 79.08 | 3 | 4 | 512.3292 | . 2 869 | 1 | 69.33 | 2 | 2 | 73.5000 | . 3 890 | 1 | 73.58 | 8 | 5 | 69.5500 | . 上面代码对每个分组在Age、Fare、Parch、PassengerId、SibSp和Survived上求「最大值」和「最小值」的差。真正有价值的信息在 Age、Parch 等栏，但是可以借此来验证agg使用自定义函数的用法。 . 6.3.3 自定义更丰富的分组运算—— apply 方法 . apply 是一个更一般化的方法：将一个数据分拆-应用-汇总，会将当前分组后的数据一起传入，返回多维数据。 . 有时候返回的值不一定是一个标量的值，有可能是一个数组或是其他类型。此时，agg无法胜任，就需要使用apply了。 . 在看具体例子之前，先定一个 top 函数，返回 DataFrame 某一栏中 n 个最大值。 . def top( df, n=5, column=&#39;Parch&#39; ): return df.sort_values(by=column)[-n:] . df.sort_values . 根据column排序，上一代码中是升序 . 将 top 函数用到最原始的数据 (从 csv 中读取出来的) 上。 . top( titanic ) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 13 14 | 0 | 3 | Andersson, Mr. Anders Johan | male | 39.0 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 25 26 | 1 | 3 | Asplund, Mrs. Carl Oscar (Selma Augusta Emilia... | female | 38.0 | 1 | 5 | 347077 | 31.3875 | NaN | S | . 885 886 | 0 | 3 | Rice, Mrs. William (Margaret Norton) | female | 39.0 | 0 | 5 | 382652 | 29.1250 | NaN | Q | . 638 639 | 0 | 3 | Panula, Mrs. Juha (Maria Emilia Ojala) | female | 41.0 | 0 | 5 | 3101295 | 39.6875 | NaN | S | . 678 679 | 0 | 3 | Goodwin, Mrs. Frederick (Augusta Tyler) | female | 43.0 | 1 | 6 | CA 2144 | 46.9000 | NaN | S | . 上面的top函数中，df 代表你传递给它的DataFrame数据，n代表取它的前n行，在这里，n的默认值是5，也就是说在调用这个函数的时候，如果没有给n赋值，n值等于5。column是排序列，函数会先按column升序排序，然后返回最大的n行。在这个时候，agg的方法就不管用的，要是强行使用，就会出错。 . 来，演示一遍错误！ . titanic.groupby(&#39;Sex&#39;).agg(top) . ValueError Traceback (most recent call last) D: Anaconda envs python32 lib site-packages pandas core groupby generic.py in aggregate(self, func, *args, **kwargs) 947 try: --&gt; 948 result = self._aggregate_multiple_funcs([func], _axis=self.axis) 949 except ValueError as err: D: Anaconda envs python32 lib site-packages pandas core base.py in _aggregate_multiple_funcs(self, arg, _axis) 541 if not len(results): --&gt; 542 raise ValueError(&quot;no results&quot;) 543 ValueError: no results During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last) D: Anaconda envs python32 lib site-packages pandas core internals managers.py in create_block_manager_from_arrays(arrays, names, axes) 1670 blocks = form_blocks(arrays, names, axes) -&gt; 1671 mgr = BlockManager(blocks, axes) 1672 mgr._consolidate_inplace() D: Anaconda envs python32 lib site-packages pandas core internals managers.py in __init__(self, blocks, axes, do_integrity_check) 138 if do_integrity_check: --&gt; 139 self._verify_integrity() 140 D: Anaconda envs python32 lib site-packages pandas core internals managers.py in _verify_integrity(self) 333 if block._verify_integrity and block.shape[1:] != mgr_shape[1:]: --&gt; 334 construction_error(tot_items, block.shape[1:], self.axes) 335 if len(self.items) != tot_items: D: Anaconda envs python32 lib site-packages pandas core internals managers.py in construction_error(tot_items, block_shape, axes, e) 1693 raise ValueError(&quot;Empty data passed with indices specified.&quot;) -&gt; 1694 raise ValueError(f&quot;Shape of passed values is {passed}, indices imply {implied}&quot;) 1695 ValueError: Shape of passed values is (12, 2), indices imply (11, 2) During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last) &lt;ipython-input-79-da50f6fb927d&gt; in &lt;module&gt; -&gt; 1 titanic.groupby(&#39;Sex&#39;).agg(top) D: Anaconda envs python32 lib site-packages pandas core groupby generic.py in aggregate(self, func, *args, **kwargs) 951 # raised directly by _aggregate_multiple_funcs 952 raise --&gt; 953 result = self._aggregate_frame(func) 954 else: 955 # select everything except for the last level, which is the one D: Anaconda envs python32 lib site-packages pandas core groupby generic.py in _aggregate_frame(self, func, *args, **kwargs) 1146 result[name] = fres 1147 -&gt; 1148 return self._wrap_frame_output(result, obj) 1149 1150 def _aggregate_item_by_item(self, func, *args, **kwargs) -&gt; DataFrame: D: Anaconda envs python32 lib site-packages pandas core groupby generic.py in _wrap_frame_output(self, result, obj) 1642 1643 if self.axis == 0: -&gt; 1644 return DataFrame(result, index=obj.columns, columns=result_index).T 1645 else: 1646 return DataFrame(result, index=obj.index, columns=result_index) D: Anaconda envs python32 lib site-packages pandas core frame.py in __init__(self, data, index, columns, dtype, copy) 433 ) 434 elif isinstance(data, dict): --&gt; 435 mgr = init_dict(data, index, columns, dtype=dtype) 436 elif isinstance(data, ma.MaskedArray): 437 import numpy.ma.mrecords as mrecords D: Anaconda envs python32 lib site-packages pandas core internals construction.py in init_dict(data, index, columns, dtype) 252 arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays 253 ] --&gt; 254 return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype) 255 256 D: Anaconda envs python32 lib site-packages pandas core internals construction.py in arrays_to_mgr(arrays, arr_names, index, columns, dtype) 72 axes = [ensure_index(columns), index] 73 &gt; 74 return create_block_manager_from_arrays(arrays, arr_names, axes) 75 76 D: Anaconda envs python32 lib site-packages pandas core internals managers.py in create_block_manager_from_arrays(arrays, names, axes) 1673 return mgr 1674 except ValueError as e: -&gt; 1675 construction_error(len(arrays), arrays[0].shape, axes, e) 1676 1677 D: Anaconda envs python32 lib site-packages pandas core internals managers.py in construction_error(tot_items, block_shape, axes, e) 1692 if block_shape[0] == 0: 1693 raise ValueError(&quot;Empty data passed with indices specified.&quot;) -&gt; 1694 raise ValueError(f&quot;Shape of passed values is {passed}, indices imply {implied}&quot;) 1695 1696 ValueError: Shape of passed values is (12, 2), indices imply (11, 2) . Apply 函数 . 将 top() 函数 apply 到按 Sex 分的每个组上，按每个 Sex 分组打印出来了Parch 栏下的 5 个最大值。 . titanic.groupby(&#39;Sex&#39;).apply(top) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . Sex . female 638 639 | 0 | 3 | Panula, Mrs. Juha (Maria Emilia Ojala) | female | 41.0 | 0 | 5 | 3101295 | 39.6875 | NaN | S | . 610 611 | 0 | 3 | Andersson, Mrs. Anders Johan (Alfrida Konstant... | female | 39.0 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 885 886 | 0 | 3 | Rice, Mrs. William (Margaret Norton) | female | 39.0 | 0 | 5 | 382652 | 29.1250 | NaN | Q | . 25 26 | 1 | 3 | Asplund, Mrs. Carl Oscar (Selma Augusta Emilia... | female | 38.0 | 1 | 5 | 347077 | 31.3875 | NaN | S | . 678 679 | 0 | 3 | Goodwin, Mrs. Frederick (Augusta Tyler) | female | 43.0 | 1 | 6 | CA 2144 | 46.9000 | NaN | S | . male 683 684 | 0 | 3 | Goodwin, Mr. Charles Edward | male | 14.0 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 86 87 | 0 | 3 | Ford, Mr. William Neal | male | 16.0 | 1 | 3 | W./C. 6608 | 34.3750 | NaN | S | . 438 439 | 0 | 1 | Fortune, Mr. Mark | male | 64.0 | 1 | 4 | 19950 | 263.0000 | C23 C25 C27 | S | . 360 361 | 0 | 3 | Skoog, Mr. Wilhelm | male | 40.0 | 1 | 4 | 347088 | 27.9000 | NaN | S | . 13 14 | 0 | 3 | Andersson, Mr. Anders Johan | male | 39.0 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 上面在使用 top() 时，对于 n 和 column 大家都只用的默认值 5 和 ‘Parch’。如果用自己设定的值 n = 2, column = ‘SibSp’，写法如下： . titanic.groupby([&#39;Sex&#39;,&#39;Pclass&#39;]).apply(top, n=2, column=&#39;SibSp&#39;) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . Sex Pclass . female 1 88 89 | 1 | 1 | Fortune, Miss. Mabel Helen | female | 23.0 | 3 | 2 | 19950 | 263.00 | C23 C25 C27 | S | . 341 342 | 1 | 1 | Fortune, Miss. Alice Elizabeth | female | 24.0 | 3 | 2 | 19950 | 263.00 | C23 C25 C27 | S | . 2 618 619 | 1 | 2 | Becker, Miss. Marion Louise | female | 4.0 | 2 | 1 | 230136 | 39.00 | F4 | S | . 726 727 | 1 | 2 | Renouf, Mrs. Peter Henry (Lillian Jefferys) | female | 30.0 | 3 | 0 | 31027 | 21.00 | NaN | S | . 3 180 181 | 0 | 3 | Sage, Miss. Constance Gladys | female | NaN | 8 | 2 | CA. 2343 | 69.55 | NaN | S | . 863 864 | 0 | 3 | Sage, Miss. Dorothy Edith &quot;Dolly&quot; | female | NaN | 8 | 2 | CA. 2343 | 69.55 | NaN | S | . male 1 245 246 | 0 | 1 | Minahan, Dr. William Edward | male | 44.0 | 2 | 0 | 19928 | 90.00 | C78 | Q | . 27 28 | 0 | 1 | Fortune, Mr. Charles Alexander | male | 19.0 | 3 | 2 | 19950 | 263.00 | C23 C25 C27 | S | . 2 655 656 | 0 | 2 | Hickman, Mr. Leonard Mark | male | 24.0 | 2 | 0 | S.O.C. 14879 | 73.50 | NaN | S | . 665 666 | 0 | 2 | Hickman, Mr. Lewis | male | 32.0 | 2 | 0 | S.O.C. 14879 | 73.50 | NaN | S | . 3 159 160 | 0 | 3 | Sage, Master. Thomas Henry | male | NaN | 8 | 2 | CA. 2343 | 69.55 | NaN | S | . 846 847 | 0 | 3 | Sage, Mr. Douglas Bullen | male | NaN | 8 | 2 | CA. 2343 | 69.55 | NaN | S | . 按每个 Sex 和 Pclass 打印出来了 SibSp 栏下的最大的两个值。 . 6.4 排序(Mc补充) . 排序分为对索引排序 sort_index 和对 值排序 sort_values . ascending：默认True升序排列；False降序排列 . obj = pd.Series(range(4), index=[&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) print(obj) #索引排序 print(&#39;索引排序 n&#39;,obj.sort_index()) #值排序 print(&#39;值排序 n&#39;,obj.sort_values(ascending=False)) . d 0 a 1 b 2 c 3 dtype: int64 索引排序 a 1 b 2 c 3 d 0 dtype: int64 值排序 c 3 b 2 a 1 d 0 dtype: int64 . frame = pd.DataFrame(np.arange(8).reshape((2,4)),index=[&#39;three&#39;,&#39;one&#39;], columns=[&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]) print(frame) # 索引排序 print(frame.sort_index()) # frame.sort_index(axis=1) # 降序 # frame.sort_index(axis=1, ascending=False) # 值排序 # frame.sort_values(by=&#39;a&#39;,ascending=False) # frame.sort_values(by=[&#39;a&#39;,&#39;b&#39;],ascending=False) # frame.sort_values(by=&#39;one&#39;,axis=1,ascending=False) . d a b c three 0 1 2 3 one 4 5 6 7 d a b c one 4 5 6 7 three 0 1 2 3 . c b a d . three 3 | 2 | 1 | 0 | . one 7 | 6 | 5 | 4 | . 7 总结 . 【合并数据表】用 merge 函数按数据表的共有列进行左/右/内/外合并。 . . 【连接数据表】用 concat 函数对 Series 和 DataFrame 沿着不同轴连接。 . 【重塑数据表】用 stack 函数将「列索引」变成「行索引」，用 unstack 函数将「行索引」变成「列索引」。它们只是改变数据表的布局和展示方式而已。 . . . . 【透视数据表】用 pivot 函数将「一张长表」变成「多张宽表」，用 melt 函数将「多张宽表」变成「一张长表」。它们只是改变数据表的布局和展示方式而已。 . . . 【分组数据表】用 groupBy 函数按不同「列索引」下的值分组。一个「列索引」或多个「列索引」就可以。 . 【聚合数据表】用 agg 函数对每个组做聚合而计算统计量。 . 【split-apply-combine】用 apply 函数做数据分析时美滋滋。 . . 至此，可以说已经打好 Python Basics 的基础，能用 NumPy 做数组计算，能用 Pandas 做数据分析，现在已经搞很多事情了。现在我们唯一欠缺的是如何画图或可视化数据，下帖从最基础的可视化工具 Matplotlib 开始讲。Stay Tuned! . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/06/02/Pandas(%E4%B8%8B).html",
            "relUrl": "/markdown/2020/06/02/Pandas(%E4%B8%8B).html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Pandas (上)",
            "content": "前言 . 本篇鸣谢 马川-燕大 的增删整理， 王圣元 ——原创文章，与原文不同之处包含我的学习记录。 . 匹配Jupyter Notebook的ipynb文档链接下载地址如下 . 源文档及相关文件 . . 0 引言 . Pandas 是 Python 为解决数据分析而创建的，详情看官网 https://pandas.pydata.org/。 在使用 pandas 之前，需要引进它，语法如下： . import pandas . 这样就可以用 pandas 里面所有的内置方法 (build-in methods) 了，比如创建一维的 Series 和二维的 DataFrame。 . pandas.Series() . pandas.DataFrame() . 但是每次写 pandas 字数有点多，通常给 pandas 起个别名 pd，用以下语法，这样所有出现 pandas 的地方都可以用 pd 替代。 . import pandas as pd#本篇使用的是0.25.1版本的pandas . Pandas 里面的数据结构是「多维数据表」，学习它可以类比这 NumPy 里的「多维数组」。1/2 维的「多维数据表」分别叫做 Series (系列)和 DataFrame (数据帧)，与1/2 维的「多维数组」的类比关系如下。 . . 由于「系列」、「数据帧」这些直译过来的中文名词听起来有些奇怪，在本帖还是直接用 Series和 DataFrame。 . 对比 NumPy (np) 和 Pandas (pd) 每个维度下的数据结构，不难看出 . pd 多维数据表 = np 多维数组 + 描述 . 其中 . Series = 1darray + index . | DataFrame = 2darray + index + columns &lt;/b&gt; . | . 每个维度上的「索引」使得「多维数据表」比「多维数组」涵盖更多的信息，如下图，左边的 2d array 仅仅储存了一组数值 (具体代表什么意思却不知道)，而右边的 DataFrame 一看就知道这是平安银行和茅台从 2018-1-3 到 2019-1-3 的价格。 . . 和学习 numpy 一样，学习 pandas 还是遵循的 Python 里「万物皆对象」的原则，既然把数据表当对象，就得按着数据表的创建、数据表的存载、数据表的获取、数据表的合并和连接、数据表的重塑和透视、和数据表的分组和整合来盘一盘 Pandas。 . 提纲： . . 由于篇幅原因，Pandas 系列分两贴，上贴讲前三节的内容，下帖讲后三节的内容。 . 1 数据表的创建 . 数据表有两大类型 . Series: 一维数据，类似于 python 中的基本数据的 list 或 NumPy 中的 1D array。Pandas 里最基本的数据结构 . | DataFrame: 二维数据，类似于 R 中的 data.frame 或 Matlab 中的 Tables。DataFrame 是 Series 的容器 . | . 知识点 最常见的数据类型是二维的 DataFrame，其中 . 每行代表一个示例 (instance) . | 每列代表一个特征 (feature) . | . DataFrame 可理解成是 Series 的容器，每一列都是一个 Series，或者 Series 是只有一列的 DataFrame。 . 接下来用代码来创建 pandas 数据表： . 一维 Series . 创建 Series 只需用下面一行代码 . pd.Series( x, index=idx ) . 其中 x 可以是 . 列表 (list) . | numpy 数组 (ndarray) . | 字典 (dict) . | 回顾Python编程基础中函数的定义，那么 . x 是位置参数 . | index 是默认参数，默认值为 idx = range(0, len(x)) . | . 用列表 s = pd.Series([27.2, 27.65, 27.70, 28]) s . 0 27.20 1 27.65 2 27.70 3 28.00 dtype: float64 . 打印出来并不仅仅是列表里面的浮点数，每个浮点数前面还有一个索引，在本例中是 0, 1, 2, 3。 . 因此在创建 Series 时，如果不显性设定 index，那么 Python 给定一个默认从 0 到 N-1 的值，其中 N 是 x 的长度。 . Series s 也是一个对象，用 dir(s) 可看出关于 Series 所有的属性和内置函数，其中最重要的是 . 用 s.values 打印 s 中的元素 . | 用 s.index 打印 s 中的元素对应的索引 . | . s.values . array([27.2 , 27.65, 27.7 , 28. ]) . s.index . RangeIndex(start=0, stop=4, step=1) . 不难发现，以上创建的 Series 和 numpy 数组比多了「索引」，但这种 0,1,2,3 的索引是在没有什么描述意义。实际上定义的 s 是海底捞在 2019 年 4 月 1 日到 2019 年 4 月 4 日的股价，那么用日期来当索引是不是更好些？ . dates = pd.date_range(&#39;20190401&#39;,periods=4) s2 = pd.Series( [27.2, 27.65, 27.70, 28], index=dates ) s2 . 2019-04-01 27.20 2019-04-02 27.65 2019-04-03 27.70 2019-04-04 28.00 Freq: D, dtype: float64 . pandas.date_range(start=None, end=None, periods=None, freq=’D’, tz=None, normalize=False, name=None, closed=None, **kwargs) . 该函数主要用于生成一个固定频率的时间索引，在调用构造方法时，必须指定start、end、periods中的两个参数值，否则报错。 . 主要参数说明： . periods：固定时期，取值为整数或None . | freq：日期偏移量，取值为string或DateOffset，默认为’D’ . | normalize：若参数为True表示将start、end参数值正则化到午夜时间戳 . | name：生成时间索引对象的名称，取值为string或None . | closed：可以理解成在closed=None情况下返回的结果中，若closed=‘left’表示在返回的结果基础上，再取左开右闭的结果，若closed=’right’表示在返回的结果基础上，再取做闭右开的结果 . | . 显然，s2 比 s 包含的信息更多，这是 s2 的索引是一组日期对象，数据类型是 datetime64，频率是 D (天)。 . s2.index . DatetimeIndex([&#39;2019-04-01&#39;, &#39;2019-04-02&#39;, &#39;2019-04-03&#39;, &#39;2019-04-04&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) . 甚至还可以给 s2 命名，就叫海底捞股价如何？ . s2.name = &#39;海底捞股价&#39; s2 . 2019-04-01 27.20 2019-04-02 27.65 2019-04-03 27.70 2019-04-04 28.00 Freq: D, Name: 海底捞股价, dtype: float64 . 用 numpy 数组 除了用列表，还可以用 numpy 数组来生成 Series。在下例中，加入缺失值 np.nan，并分析一下 Series 中另外 5 个属性或内置函数的用法： . len: s 里的元素个数 . | shape: s 的形状 (用元组表示) . | count: s 里不含 nan 的元素个数 . | unique: 返回 s 里不重复的元素 . | value_counts: 统计 s 里非 nan 元素的出现次数 . | . 对照上面函数的用法，下面的输出一看就懂了吧。 . 空值的产生只有np.nan() . 总结一下： . np.nan不是一个“空”对象，用 i is None判断是False； 对某个值是否为空值进行判断，只能用np.isnan(i)函数，万万不可用 i == np.nan()来做，否则你会死的很惨的，因为空值并不能用判断相等的“==”正确识别（上例前两条）； . np.nan非空对象，其类型为基本数据类型float（是不是很神奇，我也不知道为什么要这样设计） . import numpy as np s = pd.Series( np.array([27.2, 27.65, 27.70, 28, 28, np.nan]) ) print( &#39;The length is&#39;, len(s) ) print( &#39;The shape is&#39;, s.shape ) print( &#39;The count is&#39;, s.count() ) . The length is 6 The shape is (6,) The count is 5 . s.unique() . array([27.2 , 27.65, 27.7 , 28. , nan]) . s.value_counts() . 28.00 2 27.70 1 27.65 1 27.20 1 dtype: int64 . 用字典 创建 Series 还可以用字典。字典的「键值对」的「键」自动变成了 Series 的索引 (index)，而「值」自动变成了Series 的值 (values)。代码如下 (下列用 name 参数来对 s3 命名) . data_dict = { &#39;BABA&#39;: 187.07, &#39;PDD&#39;: 21.83, &#39;JD&#39;: 30.79, &#39;BIDU&#39;: 184.77 } s3 = pd.Series(data_dict, name=&#39;中概股&#39;) s3.index.name = &#39;股票代号&#39; s3 . 股票代号 BABA 187.07 PDD 21.83 JD 30.79 BIDU 184.77 Name: 中概股, dtype: float64 . 给 s3 起名中概股是因为阿里巴巴 (BABA)、拼多多 (PDD)、京东 (JD) 和百度 (BIDU) 都是中国公司但在美国上市的。此外还可以给 index 命名为 ‘股票代号’。 . 现在假设这里的股票代号为 . stock = [&#39;FB&#39;, &#39;BABA&#39;, &#39;PDD&#39;, &#39;JD&#39;] s4 = pd.Series( s3, index=stock ) s4 . FB NaN BABA 187.07 PDD 21.83 JD 30.79 Name: 中概股, dtype: float64 . 代号里多加了脸书 (FB)，而 sdata 字典中没有 FB 这个键，因此生成的 s4 在 FB 索引下对应的值为 NaN。再者，代号里没有百度 (BIDU)，因此 s4 里面没有 BIDU 对应的值 (即便 sdata 里面有)。 . 当两个 Series 进行某种操作时，比如相加，Python 会自动对齐不同 Series 的 index，如下面代码所示： . s3 + s4 . BABA 374.14 BIDU NaN FB NaN JD 61.58 PDD 43.66 Name: 中概股, dtype: float64 . Series 是 Pandas 里面最基本的数据结构，但是对应每个索引只有一个元素 (比如一个日期对应一个股价)，因此 Series 处理不了每个索引对应多个元素 (比如一个日期对应一个开盘价、收盘价、交易量等等)。而 DataFrame 可以解决这个问题。 . 二维 DataFrame . 创建 DataFrame 只需用下面一行代码 . pd.DataFrame( x, index=idx, columns=col ) . 其中 x 可以是 . 二维列表 (list) . | 二维 numpy 数组 (ndarray) . | 字典 (dict)，其值是一维列表、numpy 数组或 Series . | 另外一个 DataFrame . | 回顾Python编程基础中函数的定义，那么 . x 是位置参数 . | index 是默认参数，默认值为 idx = range(0, x.shape[0]),行索引 . | columns 是默认参数，默认值为 col = range(0, x.shape[1])，列索引 . | . 用列表或 numpy 数组 # df1 = pd.DataFrame( [[1, 2, 3], [4, 5, 6]] ) df1 = pd.DataFrame( np.array([[1, 2, 3], [4, 5, 6]]) ) df1 . 0 1 2 . 0 1 | 2 | 3 | . 1 4 | 5 | 6 | . 在创建 DataFrame 时，如果不显性设定 index 和 columns 时，那么Python 给它们默认值，其中 . index = 0 到 r-1，r 是 x 的行数 . | colmns = 0 到 c-1，c 是 x 的列数 . | . 用对象为列表的字典 symbol = [&#39;BABA&#39;, &#39;JD&#39;, &#39;AAPL&#39;, &#39;MS&#39;, &#39;GS&#39;, &#39;WMT&#39;] data = {&#39;行业&#39;: [&#39;电商&#39;, &#39;电商&#39;, &#39;科技&#39;, &#39;金融&#39;, &#39;金融&#39;, &#39;零售&#39;], &#39;价格&#39;: [176.92, 25.95, 172.97, 41.79, 196.00, 99.55], &#39;交易量&#39;: [16175610, 27113291, 18913154, 10132145, 2626634, 8086946], &#39;雇员&#39;: [101550, 175336, 100000, 60348, 36600, 2200000]} df2 = pd.DataFrame( data, index=symbol ) df2.name=&#39;美股&#39; df2.index.name = &#39;代号&#39; df2 . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 字典的「键值对」的「键」自动变成了 DataFrame 的栏 (columns)，而「值」自动变成了 DataFrame 的值 (values)，而其索引 (index) 需要另外定义。 . 分别来看 df2 的 values, columns 和 index。 . df2.values . array([[&#39;电商&#39;, 176.92, 16175610, 101550], [&#39;电商&#39;, 25.95, 27113291, 175336], [&#39;科技&#39;, 172.97, 18913154, 100000], [&#39;金融&#39;, 41.79, 10132145, 60348], [&#39;金融&#39;, 196.0, 2626634, 36600], [&#39;零售&#39;, 99.55, 8086946, 2200000]], dtype=object) . df2.columns . Index([&#39;行业&#39;, &#39;价格&#39;, &#39;交易量&#39;, &#39;雇员&#39;], dtype=&#39;object&#39;) . df2.index . Index([&#39;BABA&#39;, &#39;JD&#39;, &#39;AAPL&#39;, &#39;MS&#39;, &#39;GS&#39;, &#39;WMT&#39;], dtype=&#39;object&#39;, name=&#39;代号&#39;) . A 查看 DataFrame . 这里可以从头或从尾部查看 DataFrame 的 n 行，分别用 df2.head(n) 和 df2.tail(n)，如果没有设定 n，默认值为 5 行。 . df2.head() . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . df2.tail(3) . 行业 价格 交易量 雇员 . 代号 . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . B 统计 DataFrame . 可以用 df2.describe() 还可以看看 DataFrame 每栏的统计数据。 . df2.describe() . 价格 交易量 雇员 . count 6.000000 | 6.000000e+00 | 6.000000e+00 | . mean 118.863333 | 1.384130e+07 | 4.456390e+05 | . std 73.748714 | 8.717312e+06 | 8.607522e+05 | . min 25.950000 | 2.626634e+06 | 3.660000e+04 | . 25% 56.230000 | 8.598246e+06 | 7.026100e+04 | . 50% 136.260000 | 1.315388e+07 | 1.007750e+05 | . 75% 175.932500 | 1.822877e+07 | 1.568895e+05 | . max 196.000000 | 2.711329e+07 | 2.200000e+06 | . 函数 describe() 只对「数值型变量」有用 (没有对「字符型变量」行业栏做统计)，统计量分别包括个数、均值、标准差、最小值，25-50-75 百分数值，最大值。一般做数据分析第一步会用这个表大概看看 . 数据是否有缺失值 (每个栏下的 count 是否相等)？ | . *　数据是否有异常值 (最小值 min 和最大值 max 是否太极端)？ . C　升维 DataFrame . 用 MultiIndex.from_tuples() 还可以赋予 DataFrame 多层索引 (实际上增加了维度，多层索引的 DataFrame 实际上是三维数据)。 . df2.index = pd.MultiIndex.from_tuples( [(&#39;中国公司&#39;,&#39;BABA&#39;), (&#39;中国公司&#39;,&#39;JD&#39;), (&#39;美国公司&#39;,&#39;AAPL&#39;), (&#39;美国公司&#39;,&#39;MS&#39;), (&#39;美国公司&#39;,&#39;GS&#39;), (&#39;美国公司&#39;,&#39;WMT&#39;)] ) df2 . 行业 价格 交易量 雇员 . 中国公司 BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . 美国公司 AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 在 MultiIndex.from_tuples() 中传递一个「元组的列表」，每个元组，比如 (‘中国公司’, ‘BABA’)，第一个元素中国公司是第一层 index，第二个元素BABA是第二层 index。 . 2 数据表的存载 . 本节讲数据表的「保存」和「加载」，在 NumPy 一贴已经提到过，数据的存载没什么技术含量 . 保存只是为了下次再用处理好的 DataFrame . | 加载可以不用重新再定义 DataFrame . | . DataFrame 可以被保存为 Excel, csv, SQL 和 HDF5 格式，其语句一看就懂，用 to_数据格式，具体如下： . to_excel() . | to_csv() . | to_sql() . | to_hdf() . | . 如果要加载某种格式的数据到 DataFrame 里，用 read_数据格式，具体如下： . read_excel() . | read_csv() . | read_sql() . | read_hdf() . | . 这里只用 excel 和 csv 格式举例。 . Excel 格式 用 pd.to_excel 函数将 DataFrame 保存为 .xlsx 格式，并保存到 ‘Sheet1’ 中，具体写法如下： . pd.to_excel( ‘文件名’，’表名’ ) . df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6]])) df.to_excel(&#39;pd_excel.xlsx&#39;, sheet_name=&#39;Sheet2&#39;)#sheet_name :字符串,默认“Sheet1”，将包含DataFrame的表的名称。 df . 0 1 2 . 0 1 | 2 | 3 | . 1 4 | 5 | 6 | . 用 pd.read_excel( ‘文件名’，’表名’ ) 即可加载该文件并存成 DataFrame 形式 . df1 = pd.read_excel(&#39;pd_excel.xlsx&#39;, sheet_name=&#39;Sheet2&#39;) df1 . Unnamed: 0 0 1 2 . 0 0 | 1 | 2 | 3 | . 1 1 | 4 | 5 | 6 | . csv 格式 用 pd.to_csv 函数将 DataFrame 保存为 .csv 格式，注意如果 index 没有特意设定，最后不要把 index 值存到 csv 文件中。具体写法如下： . pd.to_csv( ‘文件名’，index=False ) . data = {&#39;Code&#39;: [&#39;BABA&#39;, &#39;00700.HK&#39;, &#39;AAPL&#39;, &#39;600519.SH&#39;], &#39;Name&#39;: [&#39;阿里巴巴&#39;, &#39;腾讯&#39;, &#39;苹果&#39;, &#39;茅台&#39;], &#39;Market&#39;: [&#39;US&#39;, &#39;HK&#39;, &#39;US&#39;, &#39;SH&#39;], &#39;Price&#39;: [185.35, 380.2, 197, 900.2], &#39;Currency&#39;: [&#39;USD&#39;, &#39;HKD&#39;, &#39;USD&#39;, &#39;CNY&#39;]} df = pd.DataFrame(data) df.to_csv(&#39;pd_csv.csv&#39;, index=False) . 用 pd.read_csv( ‘文件名’ ) 即可加载该文件并存成 DataFrame 形式 . df2 = pd.read_csv(&#39;pd_csv.csv&#39;) df2 . Code Name Market Price Currency . 0 BABA | 阿里巴巴 | US | 185.35 | USD | . 1 00700.HK | 腾讯 | HK | 380.20 | HKD | . 2 AAPL | 苹果 | US | 197.00 | USD | . 3 600519.SH | 茅台 | SH | 900.20 | CNY | . 如果一开始储存 df 的时候用 index=True，会发现加载完后的 df2 是以下的样子。 . . df2 里面第一栏是 df 的 index，由于没有具体的 columns 名称，系统给它一个 “Unamed: 0”。因此在存储 df 的时候，如果 df.index 没有特意设定，记住要在 to_csv() 中把 index 设置为 False。 . 3 数据表的索引和切片 . 由于索引/切片 Series 跟 numpy 数组很类似，因此本节只专注于对 DataFrame 做索引和切片。本节以下面 df 为例做展示。 . symbol = [&#39;BABA&#39;, &#39;JD&#39;, &#39;AAPL&#39;, &#39;MS&#39;, &#39;GS&#39;, &#39;WMT&#39;] data = {&#39;行业&#39;: [&#39;电商&#39;, &#39;电商&#39;, &#39;科技&#39;, &#39;金融&#39;, &#39;金融&#39;, &#39;零售&#39;], &#39;价格&#39;: [176.92, 25.95, 172.97, 41.79, 196.00, 99.55], &#39;交易量&#39;: [16175610, 27113291, 18913154, 10132145, 2626634, 8086946], &#39;雇员&#39;: [101550, 175336, 100000, 60348, 36600, 2200000]} df = pd.DataFrame( data, index=symbol ) df.name=&#39;美股&#39; df.index.name = &#39;代号&#39; df . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 用不同颜色标注了 df 的 index, columns 和 values，可视图如下： . . DataFrame 的索引或切片可以基于标签 (label-based) ，也可以基于位置 (position-based)，不像 numpy 数组的索引或切片只基于位置。 . DataFrame 的索引或切片有四大类： . 索引单元素： . 基于标签的 at . | 基于位置的 iat . | . | 切片 columns： . 用 . 来切片单列 . | 用 [] 来切片单列或多列 . | 基于标签的 loc . | 基于位置的 iloc . | . | 切片 index： . 用 [] 来切片单行或多行 . | 基于标签的 loc . | 基于位置的 iloc . | . | 切片 index 和 columns： . 基于标签的 loc . | 基于位置的 iloc . | . | . 总体规律，基于标签就用 at 和 loc，基于位置就用 iat 和 iloc。下面来一类类分析： . 3.1 索引单元素 . 两种方法来索引单元素，情况 1 基于标签 at，情况 2 基于位置 iat。 . 情况 1 - df.at[‘idx_i’, ‘attr_j’] . | 情况 2 - df.iat[i, j] . | . Python 里的中括号 [] 会代表很多意思，比如单元素索引，多元素切片，布尔索引等等，因此让 Python 猜你用的 [] 意图会很低效。如果想索引单元素，明明白白的用 at 和 iat 效率最高。 . 情况 1 df.at[&#39;AAPL&#39;,&#39;价格&#39;] . 172.97 . 用 at 获取「行标签」为 ‘AAPL’ 和「列标签」为 ‘价格’ 对应的元素。 . 情况 2 df.iat[2,1] . 172.97 . 用 iat 获取第 3 行第 2 列对应的元素。 . 索引单元素的总结图： . . 3.2 切片 columns . 切片单个 columns . 切片单个 columns 会返回一个 Series，有以下四种情况。情况 1 用点 .；情况 2 用中括号 []；情况 3 基于标签 loc，情况 4 基于位置 iloc。 . 情况 1 - df.attr_i . | 情况 2 - df[‘attr_i’] . | 情况 3 - df.loc[:, ‘attr_i’] . | 情况 4 - df.iloc[:, i] . | . 情况 1 记住就可以了，没什么可说的。 . 情况 2 非常像二维 numpy 数组 arr 的切片，用 arr[i] 就能获取 arr 在「轴 0」上的第 i 个元素 (一个 1darray)，同理 df[‘attr_i’] 也能获取 df 的第 i 个 Series。 . 情况 3 和 4 的 loc 和 iloc 可类比于上面的 at 和 iat。带 i 的基于位置 (位置用整数表示，i 也泛指整数)，不带 i 的基于标签。里面的冒号 : 代表所有的 index (和 numpy 数组里的冒号意思相同)。 . 个人建议，如果追求简洁和方便，用 . 和 []；如果追求一致和清晰，用 loc 和 iloc。 . 情况 1 df.价格 . 代号 BABA 176.92 JD 25.95 AAPL 172.97 MS 41.79 GS 196.00 WMT 99.55 Name: 价格, dtype: float64 . 用 . 获取「价格」那一栏下的 Series。 . 情况 2 df[&#39;价格&#39;] . 代号 BABA 176.92 JD 25.95 AAPL 172.97 MS 41.79 GS 196.00 WMT 99.55 Name: 价格, dtype: float64 . 用 [] 获取「价格」属性下的 Series。 . 情况 3 df.loc[:, &#39;交易量&#39;] . 代号 BABA 16175610 JD 27113291 AAPL 18913154 MS 10132145 GS 2626634 WMT 8086946 Name: 交易量, dtype: int64 . 用 loc 获取「交易量」属性下的 Series。 . 情况 4 df.iloc[:, 0] . 代号 BABA 电商 JD 电商 AAPL 科技 MS 金融 GS 金融 WMT 零售 Name: 行业, dtype: object . 用 iloc 获取第 1 列下的 Series。 . 切片单个 columns 的总结图： . . 切片多个 columns . 切片多个 columns 会返回一个 sub-DataFrame (原 DataFrame 的子集)，有以下三种情况。情况 1 用中括号 []；情况 2 基于标签 loc，情况 3 基于位置 iloc。 . 情况 1 - df[[‘attr_i’, ‘attr_j’]] . | 情况 2 - df.loc[:, ‘attr_i’:’attr_j’] . | 情况 3 - df.iloc[:, i:j] . | . 和切片单个 columns 相比： . 情况 1 用一个列表来储存一组属性 ‘attr_i’, ‘attr_j’，然后在放进中括号 [] 里获取它们 . | 情况 2 用 ‘attr_i’:’attr_j’ 来获取从属性 i 到属性 j 的 sub-DataFrame . | 情况 3 用 i:j 来获取从列 i+1 到列 j 的 sub-DataFrame . | . 个人建议，如果追求简洁和方便，用 []；如果追求一致和清晰，用 loc 和 iloc。 . 情况 1 df[ [&#39;雇员&#39;, &#39;价格&#39;] ]#两个中括号 . 雇员 价格 . 代号 . BABA 101550 | 176.92 | . JD 175336 | 25.95 | . AAPL 100000 | 172.97 | . MS 60348 | 41.79 | . GS 36600 | 196.00 | . WMT 2200000 | 99.55 | . 用 [] 获取「雇员」和「价格」两个属性下的 sub-DataFrame。 . 情况 2 df.loc[:, &#39;行业&#39;:&#39;交易量&#39;] . 行业 价格 交易量 . 代号 . BABA 电商 | 176.92 | 16175610 | . JD 电商 | 25.95 | 27113291 | . AAPL 科技 | 172.97 | 18913154 | . MS 金融 | 41.79 | 10132145 | . GS 金融 | 196.00 | 2626634 | . WMT 零售 | 99.55 | 8086946 | . 用 loc 获取从属性 ‘行业’ 到 ‘交易量‘ 的 sub-DataFrame。 . 情况 3 df.iloc[:, 0:2] . 行业 价格 . 代号 . BABA 电商 | 176.92 | . JD 电商 | 25.95 | . AAPL 科技 | 172.97 | . MS 金融 | 41.79 | . GS 金融 | 196.00 | . WMT 零售 | 99.55 | . 用 iloc 获取第 1 和 2 列下的 sub-DataFrame。 . 切片多个 columns 的总结图： . . 3.3 切片 index . 切片单个 index . 切片单个 index 有时会返回一个 Series，有以下两种情况。情况 1 基于标签 loc，情况 2 基于位置 iloc。 . 情况 1 - df.loc[‘idx_i’, :] . | 情况 2 - df.iloc[i, :] . | . 切片单个 index 有时会返回一个只有一行的 DataFrame，有以下两种情况。情况 3 用中括号 [] 加「位置」，情况 4 用中括号 [] 加「标签」。 . 情况 3 - df[i:i+1] . | 情况 4 - df[‘idx_i’:’idx_i’] . | . 情况 1 和 2 的 loc 和 iloc 可类比于上面的 at 和 iat。带 i 的基于位置 (位置用整数表示，i 也泛指整数)，不带 i 的基于标签。里面的冒号 : 代表所有的 columns (和 numpy 数组里的冒号意思相同)。 . 情况 3 用中括号 [] 加「位置」，位置 i:i+1 有前闭后开的性质。如果要获取第 i+1 行，需要用 i:i+1。 . 情况 4 用中括号 [] 加「标签」，标签没有前闭后开的性质。如果要获取标签 i，只需要用 ‘idx_i’:’idx_i’。为什么不能只用 ‘idx_i’ 呢？原因是 Python 会把 df[‘idx_i’] 当成切片 columns，然后发现属性中没有 ‘idx_i’ 这一个字符，会报错的。 . 个人建议，只用 loc 和 iloc。情况 3 太麻烦，获取一行还要用 i:i+1。情况 4 的 df[‘idx_i’] 很容易和切片 columns 中的语句 df[‘attr_j’] 混淆。 . 情况 1 df.loc[ &#39;GS&#39;, : ] . 行业 金融 价格 196 交易量 2626634 雇员 36600 Name: GS, dtype: object . 用 loc 获取标签为 ‘GS‘ 的 Series。(GS = Goldman Sachs = 高盛) . 情况 2 df.iloc[ 3, : ] . 行业 金融 价格 41.79 交易量 10132145 雇员 60348 Name: MS, dtype: object . 用 iloc 获取第 4 行下的 Series。(MS = Morgan Stanley = 摩根斯坦利) . 情况 3 df[1:2] . 行业 价格 交易量 雇员 . 代号 . JD 电商 | 25.95 | 27113291 | 175336 | . 用 [1:2] 获取第 2 行的 sub-DataFrame (只有一行)。 . 情况 4 df[&#39;JD&#39;:&#39;JD&#39;]#一个头一个尾 . 行业 价格 交易量 雇员 . 代号 . JD 电商 | 25.95 | 27113291 | 175336 | . df[&#39;JD&#39;:&#39;MS&#39;] . 行业 价格 交易量 雇员 . 代号 . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . 用 [‘JD’:’JD’] 获取标签为 ‘JD’ 的 sub-DataFrame (只有一行)。 . 切片单个 index 的总结图： . . 切片多个 index . 切片多个 index 会返回一个 sub-DataFrame，有以下四种情况。情况 1 用中括号 [] 加「位置」，情况 2 用中括号 [] 加「标签」，情况 3 基于标签 loc，情况 4 基于位置 iloc。 . 情况 1 - df[i:j] . | 情况 2 - df[‘idx_i’:’idx_j’] . | 情况 3 - df.loc[‘idx_i’:’idx_j’, :] . | 情况 4 - df.iloc[i:j, :] . | . 和切片单个 index 相比： . 情况 1 用 [i:j] 来获取行 i+1 到行 j 的 sub-DataFrame . | 情况 2 用 [‘idx_i’:’idx_j’] 来获取标签 i 到标签 j 的 sub-DataFrame . | 情况 3 用 loc 加 ‘idx_i’:’idx_j’ 来获取从标签 i 到标签 j 的 sub-DataFrame . | 情况 4 用 iloc 加 i:j 来获取从行 i+1 到行 j 的 sub-DataFrame . | . 个人建议，只用 loc 和 iloc。情况 1 和 2 的 df[] 很容易混淆中括号 [] 里的到底是切片 index 还是 columns。 . 情况 1 df[ 1:4 ] . 行业 价格 交易量 雇员 . 代号 . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . MS 金融 | 41.79 | 10132145 | 60348 | . 用 [1:4] 获取第 2 到 4 行的 sub-DataFrame。 . 情况 2 df[ &#39;GS&#39;:&#39;WMT&#39; ] . 行业 价格 交易量 雇员 . 代号 . GS 金融 | 196.00 | 2626634 | 36600 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 用 [‘GS’:’WMT’] 获取标签从’GS’ 到 ‘WMT’ 的 sub-DataFrame。(WMT = Walmart = 沃尔玛) . 情况 3 df.loc[ &#39;MS&#39;:&#39;GS&#39;, : ] . 行业 价格 交易量 雇员 . 代号 . MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . 用 loc 获取标签从 ‘MS‘ 到 ‘GS’ 的 sub-DataFrame。注意 ‘MS’:’GS’ 要按着 index 里面元素的顺序，要不然会返回一个空的 DataFrame，比如： . df.loc[ &#39;MS&#39;:&#39;JD&#39;, : ] . 行业 价格 交易量 雇员 . 代号 . 情况 4 df.iloc[ 1:3, : ] . 行业 价格 交易量 雇员 . 代号 . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . 用 iloc 获取第 2 到 3 行的 sub-DataFrame。 . 切片多个 index 的总结图： . . 3.4 切片 index 和 columns . 切片多个 index 和 columns 会返回一个 sub-DataFrame，有以下两种情况。情况 1 基于标签 loc，情况 2 基于位置 iloc。 . 情况 1 - df.loc[‘idx_i’:’idx_j’, ‘attr_k’:’attr_l’] . | 情况 2 - df.iloc[i:j, k:l] . | . 清清楚楚，明明白白，用 loc 和 iloc。 . 情况 1 df.loc[ &#39;GS&#39;:&#39;WMT&#39;, &#39;价格&#39;: ] . 价格 交易量 雇员 . 代号 . GS 196.00 | 2626634 | 36600 | . WMT 99.55 | 8086946 | 2200000 | . 用 loc 获取行标签从 ‘GS‘ 到 ‘WMT’，列标签从’价格’到最后的 sub-DataFrame。 . 情况 2 df.iloc[ :2, 1:3 ] . 价格 交易量 . 代号 . BABA 176.92 | 16175610 | . JD 25.95 | 27113291 | . 用 iloc 获取第 1 到 2 行，第 1 到 2 列的 sub-DataFrame。 . 切片 index 和 columns 的总结图： . . 3.5 高级索引 . 高级索引 (advanced indexing) 可以用布尔索引 (boolean indexing) 和调用函数 (callable function) 来实现，两种方法都返回一组“正确”的索引，而且可以和 loc , iloc , [] 一起套用，具体形式有以下常见几种： . df.loc[布尔索引, :] . | df.iloc[布尔索引, :] . | df[布尔索引] . | df.loc[调用函数, :] . | df.iloc[调用函数, :] . | df[调用函数] . | . 还有以下罕见几种： . df.loc[:, 布尔索引] . | df.iloc[:, 布尔索引] . | df.loc[:, 调用函数] . | df.iloc[:, 调用函数] . | . 读者可以想一想为什么第一组形式「常见」而第二组形式「罕见」呢？(Hint: 看看两组里冒号 : 在不同位置，再想想 DataFrame 每一行和每一列中数据的特点) . 布尔索引 . 在〖数组计算之 NumPy (上)〗提过，布尔索引就是用一个由布尔类型值组成的数组来选择元素的方法。 . 当要过滤掉雇员小于 100,000 人的公司，可以用 loc 加上布尔索引。 . print( df.雇员 &gt;= 100000 ) df.loc[ df.雇员 &gt;= 100000, : ] . 代号 BABA True JD True AAPL True MS False GS False WMT True Name: 雇员, dtype: bool . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 一种更简便的表达形式是用 df[]，但是个人不喜欢 []，总觉得会引起「到底在切片 index 还是 columns」的歧义。 . df[ df.雇员 &gt;= 100000 ] . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . WMT 零售 | 99.55 | 8086946 | 2200000 | . 现在来看一个「罕见」例子，假如想找到所有值为整数型的 columns . print( df.dtypes == &#39;int64&#39; ) df.loc[ :, df.dtypes == &#39;int64&#39; ] . 行业 False 价格 False 交易量 True 雇员 True dtype: bool . 交易量 雇员 . 代号 . BABA 16175610 | 101550 | . JD 27113291 | 175336 | . AAPL 18913154 | 100000 | . MS 10132145 | 60348 | . GS 2626634 | 36600 | . WMT 8086946 | 2200000 | . 调用函数 . 调用函数是只能有一个参数 (DataFrame, Series) 并返回一组索引的函数。因为调用函数定义在 loc , iloc , [] 里面，因此它就像在〖Python编程基础〗提过的匿名函数。 . 当要找出交易量大于平均交易量的所有公司，可以用 loc 加上匿名函数 (这里 x 代表 df)。 . df.loc[ lambda x: x.交易量 &gt; x.交易量.mean() , : ] . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . 在上面基础上再加一个条件 – 价格要在 100 之上 (这里 x 还是代表 df) . df.loc[ lambda x: (x.交易量 &gt; x.交易量.mean()) &amp; (x.价格 &gt; 100), : ] . 行业 价格 交易量 雇员 . 代号 . BABA 电商 | 176.92 | 16175610 | 101550 | . AAPL 科技 | 172.97 | 18913154 | 100000 | . 最后来看看价格大于 100 的股票 (注意这里 x 代表 df.价格) . df.价格.loc[ lambda x: x &gt; 100 ] . 代号 BABA 176.92 AAPL 172.97 GS 196.00 Name: 价格, dtype: float64 . 3.6 多层索引 . 层次化索引（hierarchical indexing）也叫多层索引，是pandas的一项重要功能，它使你能在一个轴上拥有多个（两个以上）索引级别。多层索引可以将「低维数据」升维到「高维数据」。抽象点说，它使你能以低维度形式处理高维度数据。 . 多层索引 Series . 首先定义一个 Series，注意它的 index 是一个二维列表，列表第一行 dates 作为第一层索引，第二行 codes 作为第二层索引。 . price = [190,32,196,192,200,189,31,30,199] dates = [&#39;2019-04-01&#39;]*3 + [&#39;2019-04-02&#39;]*2+[&#39;2019-04-03&#39;]*2 + [&#39;2019-04-04&#39;]*2 codes = [&#39;BABA&#39;,&#39;JD&#39;,&#39;GS&#39;,&#39;BABA&#39;,&#39;GS&#39;,&#39;BABA&#39;,&#39;JD&#39;,&#39;JD&#39;,&#39;GS&#39;] data = pd.Series( price, index=[ dates, codes ]) data . 2019-04-01 BABA 190 JD 32 GS 196 2019-04-02 BABA 192 GS 200 2019-04-03 BABA 189 JD 31 2019-04-04 JD 30 GS 199 dtype: int64 . 这个 Series 存储了四天里若干股票的价格，2019-04-01 储存了阿里巴巴、京东和高盛的股价，2019-04-04 只储存了京东和高盛的股价。试想，如果不用多层索引的 Series，则需要用一个 DataFrame 来存储在这样的数据，把 index 设置成 dates，把 colums 设置成 codes。 . 来看看 Series 的多层 index 是如何表示的 . data.index . MultiIndex([(&#39;2019-04-01&#39;, &#39;BABA&#39;), (&#39;2019-04-01&#39;, &#39;JD&#39;), (&#39;2019-04-01&#39;, &#39;GS&#39;), (&#39;2019-04-02&#39;, &#39;BABA&#39;), (&#39;2019-04-02&#39;, &#39;GS&#39;), (&#39;2019-04-03&#39;, &#39;BABA&#39;), (&#39;2019-04-03&#39;, &#39;JD&#39;), (&#39;2019-04-04&#39;, &#39;JD&#39;), (&#39;2019-04-04&#39;, &#39;GS&#39;)], ) . 输出是一个 MultiIndex 的对象，里面有 levels 和 labels 二类信息。 . 知识点 索引既然分多层，那么肯定分「内层」和「外层」把，levels 就是描述层的先后的。levels 是一个二维列表，每一行只存储着「唯一」的索引信息： . dates 是第一层索引，有 4 个「唯一」元素 . | codes 是第二层索引，有 3 个「唯一」元素 . | . 但是 data 里面有九行啊，4 个 dates 和 3 个 codes 怎么能描述这九行信息呢？这就需要 labels 了。labels 也是一个二维列表： . 第一行储存 dates 每个元素在 data 里的位置索引 . | 第二行储存 codes 每个元素在 data 里的位置索引 . | . 用 [] 加第一层索引可以获取第一层信息。 . data[&#39;2019-04-02&#39;] . BABA 192 GS 200 dtype: int64 . 同理，用 loc 加第一层索引也可以切片获取第一层信息。 . data.loc[&#39;2019-04-02&#39;:&#39;2019-04-04&#39;] . 2019-04-02 BABA 192 GS 200 2019-04-03 BABA 189 JD 31 2019-04-04 JD 30 GS 199 dtype: int64 . 此外，切片还可以在不同层上进行，下面 loc 中的冒号 : 表示第一层所有元素，‘GS’ 表示第二层标签为 ‘GS’。 . data.loc[ :, &#39;GS&#39; ]#[第一层索引，第二层索引] . 2019-04-01 196 2019-04-02 200 2019-04-04 199 dtype: int64 . 多层索引 DataFrame . Series 只有 index，上面刚介绍完多层 index，DataFrame 有 index 和 columns，它们可以设置成多层吗？下面代码用 MultiIndex 函数创建「多层 index 」midx 和「多层columns」mcol。 . midx 和 mcol 都是对象，各种都有 levels, labels, names 等性质。 . data = [ [&#39;电商&#39;, 101550, 176.92, 16175610], [&#39;电商&#39;, 175336, 25.95, 27113291], [&#39;金融&#39;, 60348, 41.79, 10132145], [&#39;金融&#39;, 36600, 196.00, 2626634] ] midx = pd.MultiIndex( levels=[[&#39;中国&#39;,&#39;美国&#39;], [&#39;BABA&#39;, &#39;JD&#39;, &#39;GS&#39;, &#39;MS&#39;]], codes=[[0,0,1,1],[0,1,2,3]], names=[&#39;地区&#39;, &#39;代号&#39;]) #codes是levals的排序 mcol = pd.MultiIndex( levels=[[&#39;公司数据&#39;,&#39;交易数据&#39;], [&#39;行业&#39;,&#39;雇员&#39;,&#39;价格&#39;,&#39;交易量&#39;]], codes=[[0,0,1,1],[0,1,2,3]], names=[&#39;概括&#39;,&#39;细分&#39;]) df = pd.DataFrame(data, index=midx, columns=mcol) df . 概括 公司数据 交易数据 . 细分 行业 雇员 价格 交易量 . 地区 代号 . 中国 BABA 电商 | 101550 | 176.92 | 16175610 | . JD 电商 | 175336 | 25.95 | 27113291 | . 美国 GS 金融 | 60348 | 41.79 | 10132145 | . MS 金融 | 36600 | 196.00 | 2626634 | . 这个 DataFrame 的 index 和 columns 都有两层，严格来说是个四维数据。下面看看如何进行「多层索引」的操作吧。 . 在第一层 columns 的 ‘公司数据’ 和第二层 columns 的 ‘行业’ 做索引，得到一个含两层 index 的 Series。 . # 1st level-1 column, 2nd level-2 column df[&#39;公司数据&#39;,&#39;行业&#39;] . 地区 代号 中国 BABA 电商 JD 电商 美国 GS 金融 MS 金融 Name: (公司数据, 行业), dtype: object . 在第一层 index 的 ‘中国’ 做切片，得到一个含两层 columns 的 DataFrame。 . df.loc[&#39;中国&#39;].loc[&#39;BABA&#39;:&#39;JD&#39;] . 概括 公司数据 交易数据 . 细分 行业 雇员 价格 交易量 . 代号 . BABA 电商 | 101550 | 176.92 | 16175610 | . JD 电商 | 175336 | 25.95 | 27113291 | . 调位 level 如果不喜欢 index level 的顺序，可用 swaplevel 将它们调位。 . df.swaplevel(&#39;地区&#39;, &#39;代号&#39;) . 概括 公司数据 交易数据 . 细分 行业 雇员 价格 交易量 . 代号 地区 . BABA 中国 电商 | 101550 | 176.92 | 16175610 | . JD 中国 电商 | 175336 | 25.95 | 27113291 | . GS 美国 金融 | 60348 | 41.79 | 10132145 | . MS 美国 金融 | 36600 | 196.00 | 2626634 | . df . 概括 公司数据 交易数据 . 细分 行业 雇员 价格 交易量 . 地区 代号 . 中国 BABA 电商 | 101550 | 176.92 | 16175610 | . JD 电商 | 175336 | 25.95 | 27113291 | . 美国 GS 金融 | 60348 | 41.79 | 10132145 | . MS 金融 | 36600 | 196.00 | 2626634 | . 如果不喜欢 columns level 的顺序，也可用 swaplevel 将它们调位。 . df.columns = df.columns.swaplevel(0,1) df . 细分 行业 雇员 价格 交易量 . 概括 公司数据 公司数据 交易数据 交易数据 . 地区 代号 . 中国 BABA 电商 | 101550 | 176.92 | 16175610 | . JD 电商 | 175336 | 25.95 | 27113291 | . 美国 GS 金融 | 60348 | 41.79 | 10132145 | . MS 金融 | 36600 | 196.00 | 2626634 | . 重设 index 有时候，一个 DataFrame 的一个或者多个 columns 适合做 index，这时可用 set_index 将它们设置为 index，如果要将 index 还原成 columns，那么用 reset_index 。 . 看下面这个例子。 . data = {&#39;地区&#39;: [&#39;中国&#39;, &#39;中国&#39;, &#39;美国&#39;, &#39;美国&#39;], &#39;代号&#39;: [&#39;BABA&#39;, &#39;JD&#39;, &#39;MS&#39;, &#39;GS&#39;], &#39;行业&#39;: [&#39;电商&#39;, &#39;电商&#39;, &#39;金融&#39;, &#39;金融&#39;], &#39;价格&#39;: [176.92, 25.95, 41.79, 196.00], &#39;交易量&#39;: [16175610, 27113291, 10132145, 2626634], &#39;雇员&#39;: [101550, 175336, 60348, 36600] } df = pd.DataFrame( data ) df . 地区 代号 行业 价格 交易量 雇员 . 0 中国 | BABA | 电商 | 176.92 | 16175610 | 101550 | . 1 中国 | JD | 电商 | 25.95 | 27113291 | 175336 | . 2 美国 | MS | 金融 | 41.79 | 10132145 | 60348 | . 3 美国 | GS | 金融 | 196.00 | 2626634 | 36600 | . 将「地区」和「代号」设置为第一层 index 和第二层 index。 . df2 = df.set_index( [&#39;地区&#39;,&#39;代号&#39;] ) df2 . 行业 价格 交易量 雇员 . 地区 代号 . 中国 BABA 电商 | 176.92 | 16175610 | 101550 | . JD 电商 | 25.95 | 27113291 | 175336 | . 美国 MS 金融 | 41.79 | 10132145 | 60348 | . GS 金融 | 196.00 | 2626634 | 36600 | . 将所有 index 变成 columns。 . df2.reset_index() . 地区 代号 行业 价格 交易量 雇员 . 0 中国 | BABA | 电商 | 176.92 | 16175610 | 101550 | . 1 中国 | JD | 电商 | 25.95 | 27113291 | 175336 | . 2 美国 | MS | 金融 | 41.79 | 10132145 | 60348 | . 3 美国 | GS | 金融 | 196.00 | 2626634 | 36600 | . 4 总结 . Pandas 里面的数据结构是多维数据表，细化为一维的 Series，二维的 DataFrame。 . pd 多维数据表 = np 多维数组 + 描述 . 其中 . Series = 1darray + index . | DataFrame = 2darray + index + columns &lt;/b&gt; . | . pd 多维数据表和 np 多维数组之间的类比关系如下图所示。 . . 【创建数据表】创建 Series, DataFrame 用下面语句 . pd.Series(x, index=idx) . | pd.DataFrame(x, index=idx, columns=col) . | . DataFrame 由多个 Series 组成，而 Series 非常类似于一维的 DataFrame，因此学 Pandas 把注意力放在 DataFrame 上即可。 . 【索引和切片数据表】在索引或切片 DataFrame，有很多种方法。最好记的而不易出错的是用基于位置的 at 和 loc，和基于标签的 iat 和 iloc，具体来说，索引用 at 和 iat，切片用 loc 和 iloc。带 i 的基于位置，不带 i 的基于标签。 . . 用 MultiIndex 可以创建多层索引的对象，获取 DataFrame df 的信息可用 . df.loc[1st].loc[2nd] . | df.loc[1st].iloc[2nd] . | df.iloc[1st].loc[2nd] . | df.iloc[1st].iloc[2nd] . | . 要调换 level 可用 . df.index.swaplevel(0,1) . | df.columns.swaplevel(0,1) . | . 要设置和重设 index 可用 . df.set_index( columns ) . | df.reset_index . | . 下篇讨论 Pandas 系列的后三节，分别是 . 「数据表的合并和连接」 . | 「数据表的重塑和透视」 . | 「数据表的分组和整合」 . | . Stay Tuned! . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/26/Pandas(%E4%B8%8A).html",
            "relUrl": "/markdown/2020/05/26/Pandas(%E4%B8%8A).html",
            "date": " • May 26, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Appium自动化操作03(界面操作和adb命令)",
            "content": "前言 . 最好有Selenium的Web自动化的实际经验 . 运行基础：client库(0.52版本)，Appium Server，安卓SDK(含JDK环境)，USB调试模式下的手机(开发者模式) . 所用apk包(wv.apk)链接： . https://spiritlhl.lanzous.com/icxhm7g . . 界面操作和adb命令 . click点击 . 最常见的操作之一，使用WebElement对象的click方法。 . . tap点按 . 但是最大的区别是，tap是针对坐标而不是针对找到的元素。 为了保证自动化代码在所有分辨率的手机上都能正常执行，我们通常应该使用click方法。 但有的时候，我们难以用通常的方法定位元素，可以用这个tap方法，根据坐标来点击 用inspect查看该元素的属性中，有一个bounds属性吗？ 它就是表示元素的左上角，右下角坐标的坐标。 我们还可以使用UIAutomatorviewer直接十字光标移动，看右边的属性提示。 tap方法可以像这样进行调用 python driver.tap([(1100,1080),],700) . 它有两个参数： . 第一个参数是个列表，表示点击的坐标。 . 注意最多可以有5个元素，代表5根手指点击5个坐标。所以是list类型。 . 如果我们只要模拟一根手指点击屏幕，list中只要一个元素就可以了 . 第二个参数表示tap点按屏幕后停留的时间（毫秒）。 . 如果点按时间过长，就变成了长按操作了。 . . 输入 . 最常见的操作之一，使用WebElement对象的send_keys方法。 . . 获取界面文本信息 . 可以通过WebElement对象的.text属性获取该对象的文本信息。 . . 滑动 . 做移动app测试的时候，经常需要滑动界面。 . 这需要使用WebDriver对象的swipe方法。 . driver.swipe(start_x=x, start_y=y1, end_x=x, end_y=y2, duration=800) . 前面4个参数是滑动起点和终点的x、y坐标。 . 第5个参数duration是滑动从起点到终点坐标所耗费的时间（毫秒）。 . 注意这个时间非常重要，在屏幕上滑动同样的距离，如果时间设置的很短，就是快速的滑动。 . 例如：一个翻动新闻的界面，快速的滑动，就会是扫动的动作，会导致内容随惯性滚动很多。 . . 按键 . 调用press_keycode方法，就能模拟按键动作，包括安卓手机的实体按键和键盘按钮。 . 具体代码如下： . from appium.webdriver.extensions.android.nativekey import AndroidKey # 输入回车键，确定搜索 driver.press_keycode(AndroidKey.ENTER) . 按键的定义，可以参考这篇文档https://github.com/appium/python-client/blob/master/appium/webdriver/extensions/android/nativekey.py . . 长按、双击、移动 . Appium的TouchAction类提供了更多的手机操作方法，如：长按、双击、移动 . 参考源代码中的注释https://github.com/appium/python-client/blob/master/appium/webdriver/common/touch_action.py . 下面有一个长按的例子 . from appium.webdriver.common.touch_action import TouchAction actions = TouchAction(driver) actions.long_press(element) actions.perform() . . 打开通知栏 . 安卓手机，查看通知栏的动作可以是从屏幕顶端下滑来查看通知。 . 也可以使用如下代码，直接打开通知栏 . driver.open_notifications() . 通知栏里面的元素，自动化的方法和前面介绍的App界面元素自动化是一样的。 . . 收起通知栏 . 收起通知栏，可以使用前面介绍的模拟按键，发出返回按键的方法。 . . adb 命令 . android sdk里面有一个命令行工具adb。 . adb全称Android Debug Bridge，这个adb使用非常广泛。 . 它可以与Android手机设备进行通信，它可进行各种设备操作。 . 如：安装应用和调试应用，传输文件，甚至登录到手机设备上shell的进行访问，就像远程登录一样 . 这个adb在sdk的platform-tools目录下面，请大家确保路径在Path环境变量中。 . Appium对anroid的自动化非常依赖这个adb工具。执行自动化过程中，有很多内部操作，比如获取设备信息，传送文件到手机，安装apk，启动某些程序等，都是通常这个adb实现的。 . 而自动化过程中，可能需要截屏手机，并且下载到指定目录中，可以在Python程序中这样写 python import os os.system(&#39;adb shell screencap /sdcard/screen3.png &amp;&amp; adb pull /sdcard/screen3.png&#39;) . 特别的，还可以通过adb使用am(activity manager)和pm(package manager)两个工具，可以启动Activity、强行停止进程、广播intent、修改设备屏幕属性、列出应用、卸载应用等。 . adb命令的官方文档：https://developer.android.google.cn/studio/command-line/adb.html#devicestatus . 一些常见的adb命令： . 查看连接的设备 . adb devices -l . 查看文件目录 . adb shell ls /sdcard . 上传文件 . adb push wv.apk /sdcard/wv.apk . 下载文件 . adb pull /sdcard/new.txt . 截屏 . adb shell screencap /sdcard/screen.png . 截屏后的文件存在手机上，可以使用adb pull下载下来 . . shell . 登录到手机设备上shell的进行访问，就像远程登录一样，可用来在连接的设备上运行各种命令。 . 输入adb shell然后执行各种安卓支持的Linux命令，比如ps、netstat、netstat -an|grep 4724、pwd、ls、cd、rm等。 . 执行quit退出shell .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/24/appium03.html",
            "relUrl": "/markdown/2020/05/24/appium03.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Appium自动化操作02(元素定位及查看工具)",
            "content": "前言 . 最好有Selenium的Web自动化的实际经验 . 运行基础：client库(0.52版本)，Appium Server，安卓SDK(含JDK环境)，USB调试模式下的手机(开发者模式) . 定位元素 . 从示例代码就可以发现，和Selenium Web自动化一样，要操作界面元素，必须先定位(选择)元素。 . Appium是基于Selenium的，所以和Selenium代码定位元素的基本规则相同： . find_elements_by_XXX方法，返回符合条件的所有元素的列表，找不到返回空列表 通过WebDriver对象调用这样的方法，查找范围是整个界面 通过WebElement对象调用这样的方法，查找范围是该节点的子节点 # 界面元素查看工具 做Selenium Web自动化的时候，要找到元素，我们是通过浏览器的开发者工具栏来查看元素的特性，根据这些特性（属性和位置），来定位元素 Appium要自动化手机应用，同样需要工具查看界面元素的特征。 常用的查看工具： Android Sdk中的uiautomateviewer Appium Desktop中的Appium Inspector ## uiautomateviewer 安卓查看APP界面元素，最常用的就是Android SDK中的工具uiautomateviewer，它在SDK目录目录的tools bin目录中 和Selenium一样，我们要定位选择元素，也是根据元素的特征，包括: 元素的属性 元素的相对位置（相对父元素、兄弟元素等） 具体细节，参考视频里面的讲解。 ## Appium Inspector Appium Desktop中的Appium Inspector也可以查看元素。 它的一个优点是可以直接验证**选择表达式是否能定位到元素** ## 定位元素的方法 1.根据ID 在Selenium Web自动化里，如果能根据ID选择定位元素，最好根据ID，因为通常来说ID是唯一的，所以根据ID选择 效率高。 在安卓应用自动化的时候，同样可以根据ID查找。 但是这个ID，是安卓应用元素的resource-id属性 具体代码： python driver.find_element_by_id(&#39;&#39;) . 2.根据CLASS NAME . 安卓界面元素的class属性其实就是根据元素的类型，类似web里面的tagname， 所以通常不是唯一的。 . 通常，我们根据class属性来选择元素，是要选择多个而不是一个。 . 当然如果你确定要查找的界面元素的类型 在当前界面中只有一个，就可以根据class来唯一选择。 . 具体代码： . driver.find_elements_by_class_name(&#39;&#39;) . 3.根据ACCESSIBILITY ID . 元素的content-desc属性是用来描述该元素的作用的。 . 如果要查询的界面元素有content-desc属性，我们可以通过它来定位选择元素。 . 具体代码： . driver.find_element_by_accessibility_id(&#39;&#39;) . 4.Xpath . Appium也支持通过Xpath选择元素。 . 但是其可靠性和性能不如Selenium Web自动化。因为Web自动化对Xpath的支持是由浏览器实现的，而Appium Xpath的支持是Appium Server实现的。 . 毕竟，浏览器产品的成熟度比Appium要高很多。 . 当然，Xpath是标准语法，所以这里表达式的语法规则和Selenium里面Xpath的语法是一样的，比如 . driver.find_element_by_xpath(&#39;//ele0/ele1[@attr=&quot;value&quot;]&#39;) . 注意： . selenium自动化中，xpath表达式中每个节点名是html的tagname。 . 但是在appium中，xpath表达式中每个节点名是元素的class属性值。 . 比如：要选择所有的文本节点，就用如下代码: . driver.find_element_by_xpath(&#39;//android.widget.TextView&#39;) . . 参考文档 . 根据id，classname， accessibilityid，xpath这些方法选择元素，其实底层都是利用了安卓uiautomator框架的API功能实现的。 . 这里是谷歌安卓官方文档介绍： https://developer.android.google.cn/training/testing/ui-automator . 也就是说，程序的这些定位请求，被Appium server转发给手机自动化代理程序，就转化为为uiautomator里面相应的定位函数调用。 . 其实，自动化程序，可以直接告诉手机上的自动化代理程序，让它调用UI Automator API的java代码，实现最为直接的自动化控制。 . 主要是通过UiSelector这个类里面的方法实现元素定位的，比如 . code = &#39;new UiSelector().text(&quot;热门&quot;).className(&quot;android.widget.TextView&quot;)&#39; ele = driver.find_element_by_android_uiautomator(code) ele.click() . 就是通过text属性和className的属性两个条件来定位元素。 . 比如 text方法 可以根据元素的文本属性查找元素 textContains 根据文本包含什么字符串 textStartsWith 根据文本以什么字符串开头 textmartch方法 可以使用正则表达式选择一些元素，如下 python code = &#39;new UiSelector().textMatches(&quot;^我的.*&quot;)&#39; UiSelector的instance和index也可以用来定位元素，都是从0开始计数，他们的区别： instance是匹配的结果所有元素里面 的第几个元素 index则是其父元素的几个节点，类似xpath里面的*[n] UiSelector的childSelector可以选择后代元素，比如 python code = &#39;new UiSelector().resourceId(&quot;tv.danmaku.bili:id/recycler_view&quot;).childSelector(new UiSelector().className(&quot;android.widget.TextView&quot;))&#39; ele = driver.find_element_by_android_uiautomator(code) . 注意：childSelector后面的引号要框住整个uiSelector的表达式 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/24/appium02.html",
            "relUrl": "/markdown/2020/05/24/appium02.html",
            "date": " • May 24, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Appium自动化操作01(环境安装与初始结构)",
            "content": "前言 . 最好有Selenium的Web自动化的实际经验 . 本篇用到的相关软件链接： . 链接: https://pan.baidu.com/s/126x-AgLKvM7qSJqdOzAAHA . 提取码: h9b2 . . Appium 基础知识 . Appium 用途和特点 . Appium 是一个移动 App （手机应用）自动化工具。 . 手机APP自动化有什么用？ . 自动化完成一些重复性的任务 . 比如 . 微信客服机器人 爬虫 自动化测试 . 爬虫就是通过手机自动化爬取信息。 . 为什么不通过网页、HTTP 爬取呢？ . 有的系统没有网页，也不方便通过HTTP爬取 . 自动化测试 . 很多软件开发里面有这样的需求 . Appium 自动化方案的特点： . 开源免费 支持多个平台 iOS （苹果）、安卓 App 的自动化都支持。 支持多种类型的自动化 支持 苹果、安卓 应用 原生界面 的自动化 支持 应用 内嵌 WebView 的自动化 支持 手机浏览器 中的 web网站自动化 支持 flutter 应用的自动化 支持多种编程语言 . 像 Selenium 一样，Appium可以用多种编程语言调用它开发自动化程序。 . . 自动化原理 . Appium自动化的原理图: . . 它和Selenium原理图很像。因为Appium自动化架构借鉴了Selenium。 . 它包含了3个主体部分：自动化程序、Appium Server、移动设备 . . 自动化程序 . 自动化程序是由我们来开发的，实现具体的手机自动化功能。 . 要发出具体的指令控制手机，也需要使用客户端库。 . 和Selenium一样，Appium 组织也提供了多种编程语言的客户端库，包括 java，python，js， ruby等，方便不同编程语言的开发者使用。 . 首先需要安装好客户端库，调用这些库，就可以发出自动化指令给手机。 . . Appium Server . Appium Server 是 Appium 组织开发的程序，它负责管理手机自动化环境，并且转发自动化程序的控制指令给手机，并且转发手机给自动化程序的响应消息。 . . 手机设备 . 这里说的手机设备，其实不仅仅是手机，包括所有苹果、安卓的移动设备，比如：手机、平板、智能手表等。 . 为了直观方便的讲解，这里我们简称：手机 . 当然手机上也包含了我们要自动化控制的手机应用APP。 . 手机设备为什么能接收并且处理自动化指令呢？ . 因为，Appium Server 会在手机上安装一个自动化代理程序，代理程序会等待自动化指令，并且执行自动化指令 . PS:这里使用手机端的自动化代理后你的键盘会无法弹出，只能接受电脑控制输入，手机键盘输入与电脑输入不能并存 . 比如：要模拟用户点击界面按钮，Appium自动化系统的流程是这样的： . 自动化程序调用客户端库相应的函数，发送点击元素的指令（封装在HTTP消息里）给Appium Server . Appium Server再转发这个指令给手机上的自动化代理 . 手机上的自动化代理接收到指令后，调用手机平台的自动化库，执行点击操作，返回点击成功的结果给 Appium Server . Appium Server转发给自动化程序 . 其中，自动化代理控制，使用的什么库来实现自动化的呢？ 如果测试的是苹果手机， 用的是苹果的 XCUITest 框架 （IOS9.3版本以后） 如果测试的是安卓手机，用的是安卓的 UIAutomator 框架 (Android4.2以后) 这些自动化框架提供了在手机设备上运行的库，可以让程序调用这些库，像人一样自动化操控设备和APP，比如：点击、滑动，模拟各种按键消息等。 # 自动化环境搭建 这里以安卓APP的自动化为例。 环境搭建需要下载安装不少软件，而且还有不少是国外网站下载的。 这些软件安装包都放在前言的百度网盘链接中了，请自行下载。 1.安装client第三方库 首先需要在开发环境下下载appium-python-client库，也可以用pip安装，如下(pip默认下载最新库，要指定特殊版本，要在后面加上==特殊版本名) PS:这里的appium-python-client库有特殊版本要求，需要安装的是0.52版本，不是1.0版本以上，否则会报错，建议使用Pycharm环境 . pip install appium-python-client==0.52 . 2.安装Appium Server Appium Server 是用 nodejs 运行的，基于js开发出来的。 Appium组织为了方便软件安装使用，制作了一个可执行程序 Appium Desktop，把nodejs 运行环境、Appium Server 和一些工具打包在里面了，只需要简单的下载安装就可以了。 可以从前言给出的百度网盘里下载安装： Appium-windows-1.15.1.exe Appium Desktop官方下载链接： [https://github.com/appium/appium-desktop/releases/tag/v1.15.1](https://github.com/appium/appium-desktop/releases/tag/v1.15.1) 3.安装JDK 安卓APP的自动化，必须要安装安卓SDK(后面会提到)，而安卓SDK需要JDK环境。 可以从前言给出的百度网盘里下载安装： jdk-8u211-windows-x64.exe 安装好之后，还需要添加一个环境变量JAVA_HOME，指定值为jdk安装目录，比如 JAVA_HOME D: Javajdk 实际情况如下： ![](https://pic.liesio.com/2020/05/23/b00d24eaac905.png) 4.安装Android SDK 对于安卓APP的自动化，Appium Server是需要Android SDK的。 因为要用到里面的一些工具，比如要执行命令设置手机、传送文件、安装应用、查看手机界面等。 可以从前言给出的百度网盘里下载Android SDK文件包： androidsdk.zip，并且解压，即可。 解压完成后，需要配置一下添加一个环境变量 ANDROID_HOME，设置值为sdk包解压目录，比如 D: androidsdk添加步骤参照第三步的图 另外，还推荐大家配置环境变量PATH，加入adb所在目录， D: 安卓dk androidsdk androidsdk platform-tools 实际情况如下： ![](https://pic.liesio.com/2020/05/23/e0f7ebf71e4d7.png) 注意：是添加该目录到环境变量PATH中，不是替换!否则会导致系统命令都找不到的严重后果，双击2处使用新建添加！。 5.连接手机 上述的软件环境都准备好以后，要自动化手机APP，需要： 在你运行程序的电脑上用USB线连接上你的安卓手机 进入手机设置 -&gt; 关于手机，不断点击版本号菜单（大概7次以上）进入开发者模式 退出到上级菜单，在设置首页里点系统与更新，在系统与更新的开发者模式中，启动USB调试 如果手机连接USB线后，手机界面弹出是否选择允许USB调试，请选择是。 注意： 有的手机系统，可能需要一些额外的选项需要设置好。 比如，有的手机，开发者选项里需要打开允许通过USB安装应用等。 总之，给USB开发调试尽可能方便的控制手机。 连接好以后，打开命令行窗口，执行adb devices -l命令来列出连接在电脑上的安卓设备。 如果输出类似如下的内容： . List of devices attached MGFNW19731015276 device product:HLK-AL00 model:HLK_AL00 device:HWHLK-H transport_id:1 . 表示电脑上可以查看到连接的设备，就可以运行自动化程序了。 # 第一个例子 运行代码前，首先得运行Appium Desktop python from appium import webdriver from appium.webdriver.extensions.android.nativekey import AndroidKey desired_caps = { &#39;platformName&#39;: &#39;Android&#39;, # 被测手机是安卓 &#39;platformVersion&#39;: &#39;10&#39;, # 手机安卓版本，这个需要在设置里的关于手机里查找，注意是Android版本，不是MIUI等系统版本 &#39;deviceName&#39;: &#39;HLK-AL00&#39;, # 设备名，安卓手机可以随意填写 &#39;appPackage&#39;: &#39;tv.danmaku.bili&#39;, # 启动APP Package名称 &#39;appActivity&#39;: &#39;.ui.splash.SplashActivity&#39;, # 启动Activity名称 &#39;unicodeKeyboard&#39;: True, # 使用自带输入法，输入中文时填True &#39;resetKeyboard&#39;: True, # 执行完程序恢复原来输入法 &#39;noReset&#39;: True, # 不要重置App &#39;newCommandTimeout&#39;: 6000, #服务自动断开时间 &#39;automationName&#39; : &#39;UiAutomator2&#39;#服务协议 } # 连接Appium Server，初始化自动化环境 driver = webdriver.Remote(&#39;http://localhost:4723/wd/hub&#39;, desired_caps) # 设置等待时间 driver.implicitly_wait(5) # 如果有`青少年保护`界面，点击`我知道了` iknow = driver.find_elements_by_id(&quot;text3&quot;) if iknow: iknow.click() # 根据id定位搜索位置框，点击 driver.find_element_by_id(&quot;expand_search&quot;).click() # 根据id定位搜索输入框，点击 sbox = driver.find_element_by_id(&#39;search_src_text&#39;) sbox.send_keys(&#39;祈LHL&#39;) # 输入回车键，确定搜索 driver.press_keycode(AndroidKey.ENTER) # 选择（定位）所有视频标题 eles = driver.find_elements_by_id(&quot;title&quot;) for ele in eles: # 打印标题 print(ele.text) input(&#39;**** Press to quit..&#39;) driver.quit() . . 查找应用Package和Activity . 1.应用已安装 . 如果应用已经安装在手机上了，可以直接打开手机上该应用，进入到你要操作的界面 . 然后在cmd执行 . adb shell dumpsys activity recents | find &quot;intent={&quot; . 会显示如下，最近的几个activity信息， . intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=tv.danmaku.bili/.ui.splash.SplashActivity} intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10010000 pkg=com.huawei.android.launcher cmp=com.huawei.android.launcher/.unihome.UniHomeLauncher} intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.settings/.HWSettings} intent={act=android.intent.action.MAIN flg=0x10840000 hwFlg=0x4100 cmp=com.android.incallui/.InCallActivity} . 其中第一行就是当前的应用，我们特别关注最后 . cmp=tv.danmaku.bili/.ui.splash.SplashActivity 应用的package名称就是 tv.danmaku.bili . 应用的启动Activity就是 .ui.splash.SplashActivity . 2.有apk但是没有安装到手机端 . 如果你已经获取到了apk，在cmd命令行窗口执行 . D: 安卓dk androidsdk build-tools 29.0.3 aapt.exe dump badging D: apk bili.apk | find &quot;package: name=&quot; . 输出信息中，就有应用的package名称 . PS:第一串链接里的D: 安卓dk是我解压androidsdk.zip压缩包的地址；第二串链接里的D: apk bili.apk是指的是我D盘的apk文件夹下有一个bili.apk的apk文件 . 输出结果： . package: name=&#39;tv.danmaku.bili&#39; versionCode=&#39;5531000&#39; versionName=&#39;5.53.1&#39; platformBuildVersionName=&#39;5.53.1&#39; compileSdkVersion=&#39;28&#39; compileSdkVersionCodename=&#39;9&#39; . 在命令行窗口执行 . D: 安卓dk androidsdk build-tools 29.0.3 aapt.exe dump badging d: tools apk bili.apk | find &quot;launchable-activity&quot; . 输出信息中，就有应用的启动Activity . 输出结果： . launchable-activity: name=&#39;tv.danmaku.bili.ui.splash.SplashActivity&#39; label=&#39;&#39; icon=&#39;&#39; .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/23/appium01.html",
            "relUrl": "/markdown/2020/05/23/appium01.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "NumPy (下)",
            "content": "前言 . 本篇鸣谢 马川-燕大 的增删整理， 王圣元 ——原创文章，与原文不同之处包含我的学习记录。 . 匹配Jupyter Notebook的ipynb文档链接下载地址如下 . 源文档 . 接着上篇继续后面两个章节，数组变形和数组计算。 . 提纲： . . 4 数组的变形 . 本节介绍四大类数组层面上的操作，具体有 . 重塑 (reshape) 和打平 (ravel, flatten) . | 合并 (concatenate, stack) 和分裂 (split) . | 重复 (repeat) 和拼接 (tile) . | 其他操作 (sort, insert, delete, copy) . | 4.1 重塑和打平 . 重塑 (reshape) 和打平 (ravel, flatten) 这两个操作仅仅只改变数组的维度 . 重塑是从低维到高维 . | 打平是从高维到低维 . | . 重塑 . 用reshape()函数将一维数组 arr 重塑成二维数组。 . import numpy as np arr = np.arange(12) print( arr ) print( arr.reshape(4,3) ) . [ 0 1 2 3 4 5 6 7 8 9 10 11] [[ 0 1 2] [ 3 4 5] [ 6 7 8] [ 9 10 11]] . 思考：为什么重塑后的数组不是 . [[ 0 4 8] [ 1 5 9] [ 2 6 10] [ 3 7 11]] . 当你重塑高维矩阵时，不想花时间算某一维度的元素个数时，可以用「-1」取代，程序会自动帮你计算出来。比如把 12 个元素重塑成 (2, 6)，你可以写成 (2,-1) 或者 (-1, 6)。 . print( arr.reshape((2,-1)) ) print( arr.reshape((-1,6)) ) . [[ 0 1 2 3 4 5] [ 6 7 8 9 10 11]] [[ 0 1 2 3 4 5] [ 6 7 8 9 10 11]] . 打平 . 用 ravel() 或flatten() 函数将二维数组 arr 打平成一维数组。 . arr = np.arange(12).reshape((4,3)) print( arr ) ravel_arr = arr.ravel() print( ravel_arr ) flatten_arr = arr.flatten() print( flatten_arr ) . [[ 0 1 2] [ 3 4 5] [ 6 7 8] [ 9 10 11]] [ 0 1 2 3 4 5 6 7 8 9 10 11] [ 0 1 2 3 4 5 6 7 8 9 10 11] . 思考：为什么打平后的数组不是 . [ 0 3 6 9 1 4 7 10 2 5 8 11] . 要回答本节两个问题，需要了解 numpy 数组在内存块的存储方式。 . 行主序和列主序 . 行主序 (row-major order) 指每行的元素在内存块中彼此相邻，而列主序 (column-major order) 指每列的元素在内存块中彼此相邻。 . 在众多计算机语言中， . 默认行主序的有 C 语言(下图 order=‘C’ 等价于行主序) . 默认列主序的有 Fortran 语言(下图 order=‘F’ 等价于列主序) . . 在 numpy 数组中，默认的是行主序，即 order =’C’。现在可以回答本节那两个问题了。 . 如果你真的想在「重塑」和「打平」时用列主序，只用把 order 设为 ‘F’，以重塑举例： . print( np.arange(12).reshape((4,3), order=&#39;F&#39;) ) . [[ 0 4 8] [ 1 5 9] [ 2 6 10] [ 3 7 11]] . 细心的读者可能已经发现为什么「打平」需要两个函数 ravel() 或 flatten()？它们的区别在哪里？ . 知识点 . 函数 ravel() 或 flatten() 的不同之处是 . 1. ravel() 按「行主序」打平时没有复制原数组，按「列主序」在打平时复制了原数组 . 2. flatten() 在打平时复制了原数组 . 用代码验证一下，首先看 flatten()，将打平后的数组 flatten 第一个元素更新为 10000，并没有对原数组 arr 产生任何影响 (证明 flatten() 是复制了原数组) . arr = np.arange(6).reshape(2,3) print( arr ) flatten = arr.flatten() print( flatten ) flatten_arr[0] = 10000 print( arr ) . [[0 1 2] [3 4 5]] [0 1 2 3 4 5] [[0 1 2] [3 4 5]] . 再看 ravel() 在「列主序」打平，将打平后的数组 ravel_F 第一个元素更新为 10000，并没有对原数组 arr 产生任何影响 (证明 ravel(order=’F’) 是复制了原数组) . ravel_F = arr.ravel( order=&#39;F&#39; ) ravel_F[0] = 10000 print( ravel_F ) print( arr ) . [10000 3 1 4 2 5] [[0 1 2] [3 4 5]] . 最后看 ravel() 在「行主序」打平，将打平后的数组 ravel_C 第一个元素更新为 10000，原数组 arr[0][0] 也变成了 10000 (证明 ravel() 没有复制原数组) . ravel_C = arr.ravel() ravel_C[0] = 10000 print( ravel_C ) print( arr ) . [10000 1 2 3 4 5] [[10000 1 2] [ 3 4 5]] . 4.2 合并和分裂 . 合并 (concatenate, stack) 和分裂 (split) 这两个操作仅仅只改变数组的分合 . 合并是多合一 . | 分裂是一分多 . | . 合并 . 使用「合并」函数有两种选择 . 有通用的 concatenate . | 有专门的 vstack, hstack, dstack . | 用下面两个数组来举例： . arr1 = np.array([[1, 2, 3], [4, 5, 6]]) arr2 = np.array([[7, 8, 9], [10, 11, 12]]) . concatenate . np.concatenate([arr1, arr2], axis=0) . array([[ 1, 2, 3], [ 4, 5, 6], [ 7, 8, 9], [10, 11, 12]]) . np.concatenate([arr1, arr2], axis=1) . array([[ 1, 2, 3, 7, 8, 9], [ 4, 5, 6, 10, 11, 12]]) . 在 concatenate() 函数里通过设定轴，来对数组进行竖直方向合并 (轴 0) 和水平方向合并 (轴 1)。 . vstack, hstack, dstack . 通用的东西是好，但是可能效率不高，NumPy 里还有专门合并的函数 . vstack：v 代表 vertical，竖直合并，等价于 concatenate(axis=0) . | hstack：h 代表 horizontal，水平合并，等价于 concatenate(axis=1) . | dstack：d 代表 depth-wise，按深度合并，深度有点像彩色照片的 RGB 通道 . | . 一图胜千言： . . 用代码验证一下： . print( np.vstack((arr1, arr2)) ) print( np.hstack((arr1, arr2)) ) print( np.dstack((arr1, arr2)) ) . [[ 1 2 3] [ 4 5 6] [ 7 8 9] [10 11 12]] [[ 1 2 3 7 8 9] [ 4 5 6 10 11 12]] [[[ 1 7] [ 2 8] [ 3 9]] [[ 4 10] [ 5 11] [ 6 12]]] . 和 vstack, hstack 不同，dstack 将原数组的维度增加了一维。 . np.dstack((arr1, arr2)).shape . (2, 3, 2) . 分裂 . 使用「分裂」函数有两种选择 . 有通用的 split . | 有专门的 hsplit, vsplit . | 用下面数组来举例： . arr = np.arange(25).reshape((5,5)) print( arr ) . [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] . split . 和 concatenate() 函数一样，我们可以在 split() 函数里通过设定轴，来对数组沿着竖直方向分裂 (轴 0) 和沿着水平方向分裂 (轴 1)。 . first, second, third = np.split(arr,[1,3]) print( &#39;The first split is&#39;, first ) print( &#39;The second split is&#39;, second ) print( &#39;The third split is&#39;, third ) . The first split is [[0 1 2 3 4]] The second split is [[ 5 6 7 8 9] [10 11 12 13 14]] The third split is [[15 16 17 18 19] [20 21 22 23 24]] . split() 默认沿着轴 0 分裂，其第二个参数 [1, 3] 相当于是个切片操作，将数组分成三部分： . 第一部分 - :1 (即第 1 行) . | 第二部分 - 1:3 (即第 2 到 3 行) . | 第二部分 - 3: (即第 4 到 5 行) . | . hsplit, vsplit . vsplit() 和 split(axis=0) 等价，hsplit() 和 split(axis=1) 等价。一图胜千言： . . 为了和上面不重复，我们只看 hsplit。 . first, second, third = np.hsplit(arr,[1,3]) print( &#39;The first split is&#39;, first ) print( &#39;The second split is&#39;, second ) print( &#39;The third split is&#39;, third ) . The first split is [[ 0] [ 5] [10] [15] [20]] The second split is [[ 1 2] [ 6 7] [11 12] [16 17] [21 22]] The third split is [[ 3 4] [ 8 9] [13 14] [18 19] [23 24]] . 4.3 重复和拼接 . 重复 (repeat) 和拼接 (tile) 这两个操作本质都是复制 . 重复是在元素层面复制 . | 拼接是在数组层面复制 . | . 重复 . 函数 repeat() 复制的是数组的每一个元素，参数有几种设定方法： . 一维数组：用标量和列表来复制元素的个数 . | 多维数组：用标量和列表来复制元素的个数，用轴来控制复制的行和列 . | . 标量 arr = np.arange(3) print( arr ) print( arr.repeat(3) ) . [0 1 2] [0 0 0 1 1 1 2 2 2] . 标量参数 3 - 数组 arr 中每个元素复制 3 遍。 . 列表 print( arr.repeat([2,3,4]) ) . [0 0 1 1 1 2 2 2 2] . 列表参数 [2,3,4] - 数组 arr 中每个元素分别复制 2, 3, 4 遍。 . 标量和轴 arr2d = np.arange(6).reshape((2,3)) print( arr2d ) print( arr2d.repeat(2, axis=0) ) . [[0 1 2] [3 4 5]] [[0 1 2] [0 1 2] [3 4 5] [3 4 5]] . 标量参数 2 和轴 0 - 数组 arr2d 中每个元素沿着轴 0 复制 2 遍。 . 列表和轴 print( arr2d.repeat([2,3,4], axis=1) ) . [[0 0 1 1 1 2 2 2 2] [3 3 4 4 4 5 5 5 5]] . 列表参数 [2,3,4] 和轴 1 - 数组 arr2d 中每个元素沿着轴 1 分别复制 2, 3, 4 遍。 . 拼接 . 函数 tile() 复制的是数组本身，参数有几种设定方法： . 标量：把数组当成一个元素，一列一列复制 . | 形状：把数组当成一个元素，按形状复制 . | . 标量 arr2d = np.arange(6).reshape((2,3)) print( arr2d ) print( np.tile(arr2d,2) ) . [[0 1 2] [3 4 5]] [[0 1 2 0 1 2] [3 4 5 3 4 5]] . 标量参数 2 - 数组 arr 按列复制 2 遍。 . 形状 tile 是瓷砖的意思，顾名思义，这个函数就是把数组像瓷砖一样铺展开来。 . arr2d2 = np.array([[1,2], [3, 4]]) print( arr2d2 ) . [[1 2] [3 4]] . 横向 . . np.tile(arr2d2, (1,4)) # 与 np.tile(arr2d2, 4) 等价 . array([[1, 2, 1, 2, 1, 2, 1, 2], [3, 4, 3, 4, 3, 4, 3, 4]]) . 纵向 . . np.tile(arr2d2, (3,1)) . array([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]) . 横向+纵向 . . print( np.tile(arr2d2, (3,4)) ) . [[1 2 1 2 1 2 1 2] [3 4 3 4 3 4 3 4] [1 2 1 2 1 2 1 2] [3 4 3 4 3 4 3 4] [1 2 1 2 1 2 1 2] [3 4 3 4 3 4 3 4]] . 形状参数 (3,4) - 数组 arr 按形状复制 12 (3×4) 遍，并以 (3,4) 的形式展现。 . 4.4 其他操作 . 本节讨论数组的其他操作，包括排序 (sort)，插入 (insert)，删除 (delete) 和复制 (copy)。 . 排序 . 排序包括直接排序 (direct sort) 和间接排序 (indirect sort)。 . 直接排序 arr = np.array([5,3,2,6,1,4]) print( &#39;Before sorting&#39;, arr ) arr.sort() print( &#39;After sorting&#39;, arr ) . Before sorting [5 3 2 6 1 4] After sorting [1 2 3 4 5 6] . sort()函数是按升序 (ascending order) 排列的，该函数里没有参数可以控制 order，因此你想要按降序排列的数组，只需 . print( arr[::-1] ) . [6 5 4 3 2 1] . 现在让人困惑的地方来了。 . 知识点 用来排序 numpy 用两种方式： . arr.sort()#原址排序 . | np.sort( arr )#副本排序 . | 第一种 sort 会改变 arr，第二种 sort 在排序时创建了 arr 的一个复制品，不会改变 arr。看下面代码，用一个形状是 (3, 4) 的「二维随机整数」数组来举例，用整数是为了便于读者好观察排序前后的变化： . arr = np.random.randint( 40, size=(3,4) ) print( arr ) . [[10 3 38 38] [27 32 14 11] [11 5 11 0]] . 第一种 arr.sort()，对第一列排序，发现 arr 的元素改变了。 . arr[:, 0].sort() print( arr ) . [[10 3 38 38] [11 32 14 11] [27 5 11 0]] . 第二种 np.sort(arr)，对第二列排序，但是 arr 的元素不变。 . np.sort(arr[:,1]) . array([ 3, 5, 32]) . print( arr ) . [[10 3 38 38] [11 32 14 11] [27 5 11 0]] . 此外也可以在不同的轴上排序，对于二维数组，在「轴 0」上排序是「跨行」排序，在「轴 1」上排序是「跨列」排序。 . arr.sort(axis=1) print( arr ) . [[ 3 10 38 38] [11 11 14 32] [ 0 5 11 27]] . 间接排序 有时候我们不仅仅只想排序数组，还想在排序过程中提取每个元素在原数组对应的索引(index)，这时 argsort() 就派上用场了。以排列下面五个学生的数学分数为例： . score = np.array([100, 60, 99, 80, 91]) idx = score.argsort()#得到排序索引 print( idx ) . [1 3 4 2 0] . 这个 idx = [1 3 4 2 0] 怎么理解呢？很简单，排序完之后分数应该是 [60 80 91 99 100]， . 60，即 score[1] 排在第0位， 因此 idx[0] =1 . | 80，即 score[3] 排在第1 位， 因此 idx[1] =3 . | 91，即 score[4] 排在第2 位， 因此 idx[2] =4 . | 99，即 score[2] 排在第3 位， 因此 idx[3] =2 . | 100，即 score[0] 排在第4 位， 因此 idx[4] =0 . | . 用这个 idx 对 score 做一个「花式索引」得到 (还记得上贴的内容吗？) . print( score[idx] ) . [ 60 80 91 99 100] . 再看一个二维数组的例子。 . arr = np.random.randint( 40, size=(3,4) ) print( arr ) . [[38 14 23 19] [15 8 38 37] [ 4 0 21 23]] . 对其第一行 arr[0] 排序，获取索引，在应用到所用行上。 . arr[:, arr[0].argsort()] . array([[14, 19, 23, 38], [ 8, 37, 38, 15], [ 0, 23, 21, 4]]) . 这不就是「花式索引」吗？来我们分解一下以上代码，先看看索引。传入[索引] . print( arr[0].argsort() ) . [1 3 2 0] . 「花式索引」来了，结果和上面一样的。 . arr[:, [2, 0, 3, 1]] . array([[23, 38, 19, 14], [38, 15, 37, 8], [21, 4, 23, 0]]) . 插入和删除 . 和列表一样，我们可以给 numpy 数组 . 用insert()函数在某个特定位置之前插入元素 . | 用delete()函数删除某些特定元素 . | . a = np.arange(6) print( a ) print( np.insert(a, 1, 100) ) print( np.delete(a, [1,3]) ) . [0 1 2 3 4 5] [ 0 100 1 2 3 4 5] [0 2 4 5] . 复制 . 用copy()函数来复制数组 a 得到 a_copy，很明显，改变 a_copy 里面的元素不会改变 a。 . a = np.arange(6) a_copy = a.copy() print( &#39;Before changing value, a is&#39;, a ) print( &#39;Before changing value, a_copy is&#39;, a_copy ) a_copy[-1] = 99 print( &#39;After changing value, a_copy is&#39;, a_copy ) print( &#39;After changing value, a is&#39;, a ) . Before changing value, a is [0 1 2 3 4 5] Before changing value, a_copy is [0 1 2 3 4 5] After changing value, a_copy is [ 0 1 2 3 4 99] After changing value, a is [0 1 2 3 4 5] . 5数组的计算 . 本节介绍两大类数组计算，具体有 . 元素层面 (element-wise) 计算 . | 广播机制 (broadcasting) 计算 . | 5.1 元素层面计算 . Numpy 数组元素层面计算包括： . 二元运算 (binary operation)：加减乘除 . | 数学函数：倒数、平方、指数、对数 . | 比较运算 (comparison) . | 先定义两个数组 arr1 和 arr2。 . arr1 = np.array([[1., 2., 3.], [4., 5., 6.]]) arr2 = np.ones((2,3)) * 2 print( arr1 ) print( arr2 ) . [[1. 2. 3.] [4. 5. 6.]] [[2. 2. 2.] [2. 2. 2.]] . 加、减、乘、除 print( arr1 + arr2 + 1 ) print( arr1 - arr2 ) print( arr1 * arr2 ) print( arr1 / arr2 ) . [[4. 5. 6.] [7. 8. 9.]] [[-1. 0. 1.] [ 2. 3. 4.]] [[ 2. 4. 6.] [ 8. 10. 12.]] [[0.5 1. 1.5] [2. 2.5 3. ]] . 倒数、平方、指数、对数 print( 1 / arr1 ) print( arr1 ** 2 ) print( np.exp(arr1) ) print( np.log(arr1) ) . [[1. 0.5 0.33333333] [0.25 0.2 0.16666667]] [[ 1. 4. 9.] [16. 25. 36.]] [[ 2.71828183 7.3890561 20.08553692] [ 54.59815003 148.4131591 403.42879349]] [[0. 0.69314718 1.09861229] [1.38629436 1.60943791 1.79175947]] . 比较 arr1 &gt; arr2 arr1 &gt; 3 . array([[False, False, False], [ True, True, True]]) . 从上面结果可知 . 「数组和数组间的二元运算」都是在元素层面上进行的 . | 「作用在数组上的数学函数」都是作用在数组的元素层面上的。 . | 「数组和数组间的比较」都是在元素层面上进行的 . | . 但是在「数组和标量间的比较」时，python 好像先把 3 复制了和 arr1 形状一样的数组 [[3,3,3], [3,3,3]]，然后再在元素层面上作比较。上述这个复制标量的操作叫做「广播机制」，是 NumPy 里最重要的一个特点，在下一节会详细讲到。 . 5.2 广播机制计算 . 广播的引出 . 当两个数组的形状并不相同的时候，我们可以通过扩展数组的方法来实现相加、相减、相乘等操作，这种机制叫做广播（broadcasting）。 . 比如，一个二维数组减去列平均值，来对数组的每一列进行距平化处理： . arr = np.random.randn(4,3) #shape(4,3) arr_mean = arr.mean(0) #shape(3,) demeaned = arr -arr_mean print(arr) print(arr_mean) print(demeaned) . [[ 0.48226402 1.20876697 -0.67351982] [ 0.65606798 -1.16182488 -1.68726346] [-0.92629614 0.49865982 -0.07100581] [ 0.73134776 -0.28327924 0.14857151]] [ 0.23584591 0.06558067 -0.5708044 ] [[ 0.24641812 1.1431863 -0.10271542] [ 0.42022208 -1.22740555 -1.11645907] [-1.16214204 0.43307915 0.49979858] [ 0.49550185 -0.34885991 0.71937591]] . 很明显上式arr和arr_mean维度并不形同，但是它们可以进行相减操作，这就是通过广播机制来实现的。 . 广播的原则 . 如果两个数组的后缘维度（trailing dimension，即从末尾开始算起的维度）的轴长度相符，或其中的一方的长度为1，则认为它们是广播兼容的。广播会在缺失和（或）长度为1的维度上进行。 . 这句话乃是理解广播的核心。广播主要发生在两种情况，一种是两个数组的维数不相等，但是它们的后缘维度的轴长相符，另外一种是有一方的长度为1。 . 数组维度不同，后缘维度的轴长相符 . 我们来看一个例子： . import numpy as np arr1 = np.array([[0, 0, 0],[1, 1, 1],[2, 2, 2], [3, 3, 3]]) #arr1.shape = (4,3) arr2 = np.array([1, 2, 3]) #arr2.shape = (3,) arr_sum = arr1 + arr2 print(arr_sum) . [[1 2 3] [2 3 4] [3 4 5] [4 5 6]] . 上例中arr1的shape为（4,3），arr2的shape为（3，）。可以说前者是二维的，而后者是一维的。但是它们的后缘维度相等，arr1的第二维长度为3，和arr2的维度相同。arr1和arr2的shape并不一样，但是它们可以执行相加操作，这就是通过广播完成的，在这个例子当中是将arr2沿着0轴进行扩展。 . 上面程序当中的广播如下图所示(一维数据在轴0上的广播): . . 同样的例子还有(三维数据在轴0上的广播)： . . 从上面的图可以看到，（3,4,2）和（4,2）的维度是不相同的，前者为3维，后者为2维。但是它们后缘维度的轴长相同，都为（4,2），所以可以沿着0轴进行广播。 . 同样，还有一些例子：（4,2,3）和（2,3）是兼容的，（4,2,3）还和（3）是兼容的，后者需要在两个轴上面进行扩展。 . 数组维度相同，其中有个轴为1 . 我们来看下面的例子： . import numpy as np arr1 = np.array([[0, 0, 0],[1, 1, 1],[2, 2, 2], [3, 3, 3]]) #arr1.shape = (4,3) arr2 = np.array([[1],[2],[3],[4]]) #arr2.shape = (4, 1) arr_sum = arr1 + arr2 print(arr_sum) . [[1 1 1] [3 3 3] [5 5 5] [7 7 7]] . arr1的shape为（4,3），arr2的shape为（4,1），它们都是二维的，但是第二个数组在1轴上的长度为1，所以，可以在1轴上面进行广播，如下图所示(二维数组在轴1上的广播)： . . 在这种情况下，两个数组的维度要保证相等，其中有一个轴的长度为1，这样就会沿着长度为1的轴进行扩展。这样的例子还有：（4,6）和（1,6） 。（3,5,6）和（1,5,6）、（3,1,6）、（3,5,1），后面三个分别会沿着0轴，1轴，2轴进行广播。 . 人们经常需要通过算术运算过程将较低维度的数组在除0轴以外的其他轴向上广播。根据广播的原则，较小数组的“广播维”必须为1。 . 对于三维的情况，在三维中的任何一维上广播其实也就是将数据重塑为兼容的形状而已。下图说明了要在三维数组各维度上广播的形状需求(能在该三维数组上广播的二维数组的形状)。 . . 6 总结 . NumPy 篇终于完结！即上贴讨论过的数组创建、数组存载和数组获取，本贴讨论了数组变形、数组计算。 . 数组变形有以下重要操作： . 改变维度的重塑和打平 . | 改变分合的合并和分裂 . | 复制本质的重复和拼接 . | 其他排序插入删除复制 . | . 数组计算有以下重要操作： . 元素层面：四则运算、函数，比较 . | 广播机制：太重要了，大量用于科学计算和机器学习中！ . | .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/22/NumPy-(%E4%B8%8B).html",
            "relUrl": "/markdown/2020/05/22/NumPy-(%E4%B8%8B).html",
            "date": " • May 22, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Selenium的web自动化操作03(语法补充)",
            "content": "前言 . 需要下载Chrome或Firefox的driver，Chrome内核81.440与Firefox内核74.0下载链接如下： . Firefox . Chrome . 其他版本请在搜索引擎查找，本篇使用该版本，注意，driver下载后需要配置对应内核的游览器，电脑本身需要有该内核的游览器。 . . 正文 . . Xpath语法简介 . 可以发现CSS选择元素非常灵活、强大。 . 还有一种灵活、强大的选择元素的方式，就是使用Xpath表达式。 . XPath (XML Path Language) 是由国际标准化组织W3C指定的，用来在XML和HTML文档中选择节点的语言。 . 目前主流浏览器 (chrome、firefox，edge，safari) 都支持XPath语法，xpath有 1 和 2 两个版本，目前浏览器支持的是 xpath 1的语法。 . 既然已经有了CSS，为什么还要学习Xpath呢？因为 . 有些场景用css选择web元素很麻烦，而xpath却比较方便。 . 另外Xpath还有其他领域会使用到，比如爬虫框架Scrapy，手机App框架Appium。 . 测试网址：http://cdn1.python3.vip/files/selenium/test1.html . 按F12打开调试窗口，点击Elements标签。 . 要验证Xpath语法是否能成功选择元素，也可以像验证CSS语法那样，按组合键Ctrl + F就会出现搜索框 . xpath语法中，整个HTML文档根节点用’/‘表示，如果我们想选择的是根节点下面的html节点，则可以在搜索框输入 . /html . 如果输入下面的表达式 . /html/body/div . 这个表达式表示选择html下面的body下面的div元素。 . 注意/有点像CSS中的&gt;,表示直接子节点关系。 . . 绝对路径选择 . 从根节点开始的，到某个节点，每层都依次写下来，每层之间用/分隔的表达式，就是某元素的绝对路径 . 上面的xpath表达式/html/body/div，就是一个绝对路径的xpath表达式，等价于css表达式html&gt;body&gt;div . 自动化程序要使用Xpath来选择web元素，应该调用WebDriver对象的方法find_element_by_xpath或者find_elements_by_xpath，像这样： . elements = driver.find_elements_by_xpath(&quot;/html/body/div&quot;) . . 相对路径选择 . 有的时候，我们需要选择网页中某个元素，不管它在什么位置 。 . 比如，选择示例页面的所有标签名为div的元素，如果使用css表达式，直接写一个div就行了。 . 那xpath怎么实现同样的功能呢？xpath需要前面加//, 表示从当前节点往下寻找所有的后代元素,不管它在什么位置。 . 所以xpath表达式，应该这样写：//div . ‘//’ 符号也可以继续加在后面,比如，要选择所有的div元素里面的所有的p元素 ，不管div在什么位置，也不管p元素在div下面的什么位置，则可以这样写//div//p . 对应的自动化程序如下 . elements = driver.find_elements_by_xpath(&quot;//div//p&quot;) . 如果使用CSS选择器，对应代码如下 . elements = driver.find_elements_by_css_selector(&quot;div p&quot;) . 如果，要选择所有的div元素里面的直接子节点p，xpath就应该这样写了//div/p . 如果使用CSS选择器，则为div &gt; p . . 通配符 . 如果要选择所有div节点的所有直接子节点，可以使用表达式//div/* . *是一个通配符，对应任意节点名的元素，等价于CSS选择器div &gt; * . 代码如下： . elements = driver.find_elements_by_xpath(&quot;//div/*&quot;) for element in elements: print(element.get_attribute(&#39;outerHTML&#39;)) . . 根据属性选择 . Xpath 可以根据属性来选择元素。 . 根据属性来选择元素是通过这种格式来的[@属性名=&#39;属性值&#39;] . . 注意： . 属性名注意前面有个@ . 属性值一定要用引号，可以是单引号，也可以是双引号 . . 根据id属性选择 . 选择id为west的元素，可以这样//*[@id=&#39;west&#39;] . . 根据class属性选择 . 选择所有select元素中class为single_choice的元素，可以这样//select[@class=&#39;single_choice&#39;] . 如果一个元素class有多个，比如 . &lt;p id=&quot;beijing&quot; class=&#39;capital huge-city&#39;&gt; 北京 &lt;/p&gt; . 如果要选它，对应的xpath就应该是//p[@class=&quot;capital huge-city&quot;] . 不能只写一个属性，像这样//p[@class=&quot;capital&quot;]则不行 . . 根据其他属性 . 同样的道理，我们也可以利用其它的属性选择 . 比如选择具有multiple属性的所有页面元素，可以这样//*[@multiple] . . 属性值包含字符串 . 要选择style属性值包含color字符串的页面元素，可以这样//*[contains(@style,&#39;color&#39;)] . 要选择style属性值以color字符串开头的页面元素，可以这样//*[starts-with(@style,&#39;color&#39;)] . style属性值以某个字符串结尾的页面元素，大家可以推测是//*[ends-with(@style,&#39;color&#39;)]，但是很遗憾，这是xpath 2.0 的语法，目前浏览器都不支持。 . . 按次序选择 . 前面学过css表达式可以根据元素在父节点中的次序选择，非常实用。 . xpath也可以根据次序选择元素。语法比css更简洁，直接在方括号中使用数字表示次序 . 比如 . 某类型第几个子元素 . 比如 . 要选择p类型第2个的子元素，就是 . //p[2] . 注意，选择的是p类型第2个的子元素，不是第2个子元素，并且是p类型 。 . 再比如，要选取父元素为div中的p类型第2个子元素 . //div/p[2] . . 第几个子元素 . 也可以选择第2个子元素，不管是什么类型，采用通配符 . 比如 选择父元素为div的第2个子元素，不管是什么类型 . //div/*[2] . . 某类型倒数第几个子元素 . 当然也可以选取倒数第几个子元素 . 比如： . 选取p类型倒数第1个子元素 —&gt; //p[last()] 选取p类型倒数第2个子元素 —&gt; //p[last()-1] 选择父元素为div中p类型倒数第3个子元素 —&gt;//div/p[last()-2] . . 范围选择 . xpath还可以选择子元素的次序范围。 . 比如， . 选取option类型第1到2个子元素 . //option[position()&lt;=2] . 或者 . //option[position()&lt;3] . 选择class属性为multi_choice的前3个子元素 . //*[@class=&#39;multi_choice&#39;]/*[position()&lt;=3] . 选择class属性为multi_choice的后3个子元素 . //*[@class=&#39;multi_choice&#39;]/*[position()&gt;=last()-2] . 为什么不是 last()-3 呢？因为 . last()-1本身代表倒数第2个元素 last()-2本身代表倒数第3个元素 ### 组选择、父节点、兄弟节点 ##### 组选择 css有组选择，可以同时使用多个表达式，多个表达式选择的结果都是要选择的元素 css组选择，表达式之间用逗号隔开 xpath也有组选择，是用竖线隔开多个表达式 比如，要选所有的option元素和所有的h4元素，可以使用 . #xpath //option | //h4 . 等同于CSS选择器 . #css option , h4 . 再比如，要选所有的class为single_choice和class为multi_choice的元素，可以使用 . #xpath //[@class=’single_choice’] | //[@class=’multi_choice’] . 等同于CSS选择器 . #css .single_choice , .multi_choice . ### 选择父节点 xpath可以选择父节点，这是css做不到的。 某个元素的父节点用/..表示 比如，要选择id为china的节点的父节点，可以这样写//*[@id=&#39;china&#39;]/.. 。 当某个元素没有特征可以直接选择，但是它有子节点有特征， 就可以采用这种方法，先选择子节点，再指定父节点。 还可以继续找上层父节点，比如//*[@id=&#39;china&#39;]/../../.. ### 兄弟节点选择 前面学过css选择器，要选择某个节点的后续兄弟节点，用波浪线 xpath也可以选择后续兄弟节点，用这样的语法following-sibling:: 比如，要选择class为single_choice的元素的所有后续兄弟节点//*[@class=&#39;single_choice&#39;]/following-sibling::* 等同于CSS选择器.single_choice ~ * 如果，要选择后续节点中的div节点，就应该这样写//*[@class=&#39;single_choice&#39;]/following-sibling::div xpath还可以选择前面的兄弟节点，用这样的语法preceding-sibling:: 比如，要选择class为single_choice的元素的所有前面的兄弟节点//*[@class=&#39;single_choice&#39;]/preceding-sibling::* 而CSS选择器目前还没有方法选择前面的兄弟节点 要了解更多Xpath选择语法，可以点击[这里](https://www.w3school.com.cn/xpath/index.asp)，打开Xpath选择器参考手册 ### selenium 注意点 原代码： 先选择示例网页中，id是china的元素 然后通过这个元素的WebElement对象，使用find_elements_by_xpath，选择里面的p元素， python # 先寻找id是china的元素 china = wd.find_element_by_id(&#39;china&#39;) # 再选择该元素内部的p元素 elements = china.find_elements_by_xpath(&#39;//p&#39;) # 打印结果 for element in elements: print(&#39;-&#39;) print(element.get_attribute(&#39;outerHTML&#39;)) . 运行发现，打印的不仅仅是china内部的p元素，而是所有的p元素。 . 要在某个元素内部使用xpath选择元素，需要在xpath表达式最前面加个点。 . 像这样 . elements = china.find_elements_by_xpath(&#39;.//p&#39;) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/17/selenium03.html",
            "relUrl": "/markdown/2020/05/17/selenium03.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Selenium的web自动化操作02(基本语法)",
            "content": "前言 . 需要下载Chrome或Firefox的driver，Chrome内核81.440与Firefox内核74.0下载链接如下： . Firefox . Chrome . 其他版本请在搜索引擎查找，本篇使用该版本，注意，driver下载后需要配置对应内核的游览器，电脑本身需要有该内核的游览器。 . . 正文 . . radio框 . radio框选择选项，直接用WebElement的click方法，模拟用户点击就可以了。 . 比如, 我们要在下面的html中： . 先打印当前选中的 . # 获取当前选中的元素 element = wd.find_element_by_css_selector( &#39;#s_radio input[checked=checked]&#39;) print(&#39;当前选中的是: &#39; + element.get_attribute(&#39;value&#39;)) # 点选 wd.find_element_by_css_selector( &#39;#s_radio input[value=&quot;小雷老师&quot;]&#39;).click() . . checkbox框 . 对checkbox进行选择，也是直接用WebElement的click方法，模拟用户点击选择。 . 需要注意的是，要选中checkbox的一个选项，必须先获取当前该复选框的状态。 如果该选项已经勾选了，就不能再点击。 否则反而会取消选择。 . 先把已经选中的选项全部点击一下，确保都是未选状态再点击要选的 . # 先把 已经选中的选项全部点击一下 elements = wd.find_elements_by_css_selector( &#39;#s_checkbox input[checked=&quot;checked&quot;]&#39;) for element in elements: element.click() wd.find_element_by_css_selector( &quot;#s_checkbox input[value=&#39;要选&#39;]&quot;).click() . . select框 . radio框及checkbox框都是input元素，只是里面的type不同而已。 . select框 则是一个新的select标签，大家可以对照浏览器网页内容查看一下 . 对于Select 选择框， Selenium 专门提供了一个 Select类 进行操作。 . Select类 提供了如下的方法 . select_by_value . 根据选项的 value属性值 ，选择元素。 . 比如，下面的HTML . &lt;option value=&quot;xxl&quot;&gt;cool&lt;/option&gt; . 就可以根据 xxl 这个值选择该选项 . s.select_by_value(&#39;xxl&#39;) . select_by_index . 根据选项的 次序 （从0开始），选择元素 . select_by_visible_text . 根据选项的 可见文本 ，选择元素。 . 比如，下面的HTML： . &lt;option value=&quot;xxl&quot;&gt;cool&lt;/option&gt; . 就可以根据 cool 这个内容，选择该选项 . s.select_by_visible_text(&#39;cool&#39;) . deselect_by_value . 根据选项的value属性值， 去除选中元素 . deselect_by_index . 根据选项的次序，去除选中元素 . deselect_by_visible_text . 根据选项的可见文本，去除选中元素 . deselect_all . 去除选中所有元素 . . Select单选框 . 对于 select单选框，操作比较简单： 不管原来选的是什么，直接用Select方法选择即可。 例如，选择要选的，示例代码如下 . # 导入Select类 from selenium.webdriver.support.ui import Select # 创建Select对象（实例化） select = Select(wd.find_element_by_id(&quot;要选id&quot;)) # 通过 Select 对象选中 要选选项 select.select_by_visible_text(&quot;要选选项&quot;) . . Select多选框 . 对于select多选框，要选中某几个选项，要注意去掉原来已经选中的选项。 . 例如，我们选择示例多选框中的 x1 和 x2 . 可以用select类的deselect_all方法，清除所有 已经选中 的选项。 . 然后再通过select_by_visible_text方法选择 x1 和 x2。 . 示例代码如下： . # 导入Select类 from selenium.webdriver.support.ui import Select # 创建Select对象 select = Select(wd.find_element_by_id(&quot;x&quot;)) # 清除所有 已经选中 的选项 select.deselect_all() # 选择 x1 和 x2 select.select_by_visible_text(&quot;x1&quot;) select.select_by_visible_text(&quot;x2&quot;) . . ActionChains类 . 鼠标右键点击、双击、移动鼠标到某个元素、鼠标拖拽等。 . 这些操作，可以通过Selenium提供的ActionChains类来实现。 . ActionChains类里面提供了 一些特殊的动作的模拟，我们可以通过ActionChains类的代码查看到，如下所示 . 我们以移动鼠标到某个元素为例。 . 百度首页的右上角，有个选项 . 网址：https://www.baidu.com/ . 如果我们把鼠标放在上边，就会弹出下面的各种图标。 . 使用ActionChains来模拟鼠标移动 操作的代码如下： . (百度网站首页可能有变化，选择的类可能需要更改) . from selenium import webdriver driver = webdriver.Chrome(r&#39;f: chromedriver.exe&#39;) driver.implicitly_wait(5) driver.get(&#39;https://www.baidu.com/&#39;) from selenium.webdriver.common.action_chains import ActionChains ac = ActionChains(driver) # 鼠标移动到 元素上 ac.move_to_element( driver.find_element_by_css_selector(&#39;[name=&quot;tj_briicon&quot;]&#39;) ).perform() . 直接执行javascript . 我们可以直接让浏览器运行一段javascript代码，并且得到返回值，如下 . # 直接执行 javascript，里面可以直接用return返回我们需要的数据 nextPageButtonDisabled = driver.execute_script( &#39;&#39;&#39; ele = document.querySelector(&#39;.soupager &gt; button:last-of-type&#39;); return ele.getAttribute(&#39;disabled&#39;) &#39;&#39;&#39;) # 返回的数据转化为Python中的数据对象进行后续处理 if nextPageButtonDisabled == &#39;disabled&#39;: # 是最后一页 return True else: # 不是最后一页 return False . . 冻结界面 . 有些网站上面的元素，我们鼠标放在上面，会动态弹出一些内容。 . 比如，百度首页的右上角，有个选项：https://www.baidu.com/ . 如果我们把鼠标放在上边，就会弹出很多图标。 . 如果我们要用selenium自动化点击其中图标，就需要F12查看这个元素的特征。 . 但是当我们的鼠标从图标移开，这个栏目就整个消失了，就没法查看其对应的HTML。 . 怎么办？ . 在开发者工具栏console里面执行如下js代码 . setTimeout(function(){debugger}, 5000) . 这句JavaScript代码什么意思呢？ . 表示在 5000毫秒后，执行debugger命令 . 执行该命令会 浏览器会进入debug状态。debug状态有个特性，界面被冻住，不管我们怎么点击界面都不会触发事件。 . 所以，我们可以在输入上面代码并回车 执行后，立即鼠标放在界面右上角图标处。 . 这时候，就会弹出下面的各种图标。 . 然后，我们仔细等待5秒到了以后，界面就会因为执行了debugger命令而被冻住。 . 然后，我们就可以点击开发者工具栏的查看箭头，再去点击其中图标，查看其属性了。 . . 弹出对话框 . 有的时候，我们经常会在操作界面的时候，出现一些弹出的对话框。 . 弹出的对话框有三种类型，分别是 Alert（警告信息）、confirm（确认信息）和prompt（提示输入） . . Alert . Alert 弹出框，目的就是显示通知信息，只需用户看完信息后，点击 OK（确定） 就可以了。 . 那么，自动化的时候，代码怎么模拟用户点击 OK 按钮呢？ . selenium提供如下方法进行操作 . driver.switch_to.alert.accept() . 注意：如果我们不去点击它，页面的其它元素是不能操作的。 . 如果程序要获取弹出对话框中的信息内容，可以通过如下代码 . driver.switch_to.alert.text . 示例代码如下 . from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) driver.get(&#39;http://cdn1.python3.vip/files/selenium/test4.html&#39;) # alert driver.find_element_by_id(&#39;b1&#39;).click() # 打印 弹出框 提示信息 print(driver.switch_to.alert.text) # 点击 OK 按钮 driver.switch_to.alert.accept() . . Confirm . Confirm弹出框，主要是让用户确认是否要进行某个操作。 . 比如：当管理员在网站上选择删除某个账号时，就可能会弹出Confirm弹出框，要求确认是否确定要删除。 . Confirm弹出框 有两个选择供用户选择，分别是OK和Cancel，分别代表确定和取消操作。 . 那么，自动化的时候，代码怎么模拟用户点击OK或者Cancel按钮呢？ . selenium提供如下方法进行操作 . 如果我们想点击OK按钮，还是用刚才的accept方法，如下 . driver.switch_to.alert.accept() . 如果我们想点击 Cancel 按钮， 可以用 dismiss方法，如下 . driver.switch_to.alert.dismiss() . 示例代码如下 . from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) driver.get(&#39;http://cdn1.python3.vip/files/selenium/test4.html&#39;) # confirm driver.find_element_by_id(&#39;b2&#39;).click() # 打印 弹出框 提示信息 print(driver.switch_to.alert.text) # 点击 OK 按钮 driver.switch_to.alert.accept() driver.find_element_by_id(&#39;b2&#39;).click() # 点击 取消 按钮 driver.switch_to.alert.dismiss() . . Prompt . 出现 Prompt 弹出框 是需要用户输入一些信息，提交上去。 . 比如：当管理员在网站上选择给某个账号延期时，就可能会弹出 Prompt 弹出框， 要求输入延期多长时间。 . 可以调用如下方法 . driver.switch_to.alert.send_keys() . 示例代码如下 . from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) driver.get(&#39;http://cdn1.python3.vip/files/selenium/test4.html&#39;) # prompt driver.find_element_by_id(&#39;b3&#39;).click() # 获取 alert 对象 alert = driver.switch_to.alert # 打印 弹出框 提示信息 print(alert.text) # 输入信息，并且点击 OK 按钮 提交 alert.send_keys(&#39;web自动化 - selenium&#39;) alert.accept() # 点击 Cancel 按钮 取消 driver.find_element_by_id(&#39;b3&#39;).click() alert = driver.switch_to.alert alert.dismiss() . 注意： 有些弹窗并非浏览器的alert 窗口，而是html元素，这种对话框，只需要通过之前介绍的选择器选中并进行相应的操作就可以了。 . . 其他技巧 . 下面是一些其他的 Selenium 自动化技巧 . . 窗口大小 . 有时间我们需要获取窗口的属性和相应的信息，并对窗口进行控制 . 获取窗口大小 . driver.get_window_size() . 改变窗口大小 . driver.set_window_size(x, y) . . 获取当前窗口标题 . 浏览网页的时候，我们的窗口标题是不断变化的，可以使用WebDriver的title属性来获取当前窗口的标题栏字符串。 . driver.title . 获取当前窗口URL地址 . driver.current_url . 例如，访问网易，并获取当前窗口的标题和URL . from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) # 打开网站 driver.get(&#39;https://www.163.com&#39;) # 获取网站标题栏文本 print(driver.title) # 获取网站地址栏文本 print(driver.current_url) . . 截屏 . 有的时候，我们需要把浏览器屏幕内容保存为图片文件。 . 比如，做自动化测试时，一个测试用例检查点发现错误，我们可以截屏为文件，以便测试结束时进行人工核查。 . 可以使用WebDriver的get_screenshot_as_file方法来截屏并保存为图片。 . from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) # 打开网站 driver.get(&#39;https://www.baidu.com/&#39;) # 截屏保存为图片文件 driver.get_screenshot_as_file(&#39;1.png&#39;) . . 手机模式 . 我们可以通过 desired_capabilities 参数，指定以手机模式打开chrome浏览器 . 参考代码，如下 . from selenium import webdriver mobile_emulation = { &quot;deviceName&quot;: &quot;Nexus 5&quot; } chrome_options = webdriver.ChromeOptions() chrome_options.add_experimental_option(&quot;mobileEmulation&quot;, mobile_emulation) driver = webdriver.Chrome( desired_capabilities = chrome_options.to_capabilities()) driver.get(&#39;http://www.baidu.com&#39;) input() driver.quit() . . 上传文件 . 有时候，网站操作需要上传文件。 . 比如，著名的在线图片压缩网站： https://tinypng.com/ . 通常，网站页面上传文件的功能，是通过 type 属性 为 file 的 HTML input 元素实现的。 . 如下所示： . &lt;input type=&quot;file&quot; multiple=&quot;multiple&quot;&gt; . 使用selenium自动化上传文件，我们只需要定位到该input元素，然后通过 send_keys 方法传入要上传的文件路径即可。 . 如下所示： . # 先定位到上传文件的 input 元素 ele = wd.find_element_by_css_selector(&#39;input[type=file]&#39;) # 再调用 WebElement 对象的 send_keys 方法 ele.send_keys(r&#39;h: g02.png&#39;) . 如果需要上传多个文件，可以多次调用send_keys，如下 . ele = wd.find_element_by_css_selector(&#39;input[type=file]&#39;) ele.send_keys(r&#39;h: g01.png&#39;) ele.send_keys(r&#39;h: g02.png&#39;) . . 自动化Edge浏览器 . 自动化基于Chromium内核的微软最新Edge浏览器，首先需要查看Edge的版本。 . 点击菜单 帮助和反馈 &gt; 关于Microsoft Edge ，在弹出界面中，查看到版本，比如 . Microsoft Edge 是最新版本。 版本 81.0.416.72 (官方内部版本) (64 位) . 然后点击这里，打开Edge浏览器驱动下载网页 ，并选择下载对应版本的驱动。 . 在自动化代码中，指定使用Edge Webdriver类，并且指定Edge驱动路径，如下所示 . from selenium import webdriver driver = webdriver.Edge(r&#39;d: tools webdrivers msedgedriver.exe&#39;) driver.get(&#39;http://www.51job.com&#39;) . . 自动化Electron程序 . Electron程序都是基于基于Chromium技术开发的，所以基本也可以用Chromedriver驱动自动化。 . 要自动化，首先需要得到内置Chromium的版本号。 . 向开发人员查询打开 Dev Tools 窗口的快捷键（通常是ctrl + Shift + I），打开Dev Tools 窗口后， 在 Console tab中输入 如下语句，查看版本 . navigator.appVersion.match(/.*Chrome /([0-9.]+)/)[1] “79.0.3945.130” . 然后去 chromedriver下载网址 ，下载对应版本的驱动。 . 在自动化程序中需要指定打开的可执行程序为Electron程序，而不是 Chrome浏览器。 . 如下所示 . from selenium import webdriver from selenium.webdriver.chrome.options import Options ops = Options() # 指定Electron程序路径 ops.binary_location = r&quot;C: electronAPP.exe&quot; driver = webdriver.Chrome(r&quot;e: chromedriver.exe&quot;, options = ops) . . 黑科技 . . 使用代理 . selenium 自动化谷歌浏览器可以这样使用代理 . from selenium import webdriver from selenium.webdriver.common.proxy import Proxy, ProxyType prox = Proxy() prox.proxy_type = ProxyType.MANUAL prox.http_proxy = &quot;127.0.0.1:10800&quot; prox.ssl_proxy = &quot;127.0.0.1:10800&quot; # prox.socks_proxy = &quot;127.0.0.1:10800&quot; capabilities = webdriver.DesiredCapabilities.CHROME prox.add_to_capabilities(capabilities) driver = webdriver.Chrome(desired_capabilities=capabilities) driver.get(&#39;https://youtube.com&#39;) input() . . 使用缺省用户的profile运行浏览器 . 前面我们selenium打开浏览器，都是创建一个临时的新的用户，在新的用户环境中运行自动化。 . 如果我们想使用现有缺省用户的 profile运行浏览器自动化，可以这样 . from selenium import webdriver from selenium.webdriver.chrome.options import Options options = Options() # 缺省使用的是该目录下面的 Default目录里面保存的用户profile options.add_argument(r&#39;user-data-dir=c: Users baiyh AppData Local Google Chrome User Data&#39;) driver = webdriver.Chrome(options=options) . . 自动化手工打开的Chrome浏览器 . Selenium自动化打开的浏览器，每次都是使用全新的profile，有的网站用Selenium自动化，会有奇怪的问题（可能是profile的原因），比如不能登录，打开首页是空白等等。 . 这时，我们可以 . 1.关闭所有的Chrome浏览器 . 2.找到chrome的安装目录，打开命令行窗口，cd进入该目录， . 3.输入如下命令，手动启动Chrome浏览器，指定debug端口。 . chrome.exe --remote-debugging-port=9222 . 因为没有 –user-data-dir 参数，使用的是缺省用户profile。就是我们手动直接启动Chrome使用的profile。 . 这一步，也可以不这么麻烦，参考这篇文章，修改chrome桌面快捷图标启动参数，修改后双击打开Chrome . 然后 手动操作浏览器网页，比如登录，进入到可以自动化的状态， . 然后，自动化程序中这样写 . from selenium import webdriver from selenium.webdriver.chrome.options import Options options = Options() # 指定Chrome的debug地址 和前面命令行中启动参数一致 # 这样，就会直接自动化刚才启动的浏览器 options.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1:9222&quot;) wd = webdriver.Chrome(options=options) wd.implicitly_wait(10) # 下面接着写自动化的代码 . . 无头模式 . from selenium import webdriver from selenium.webdriver.chrome.options import Options options = Options() # 设置为无头模式参数 options.add_argument(&quot;--headless&quot;) driver = webdriver.Chrome(options=options) driver.implicitly_wait(10) driver.get(&#39;http://www.ahtba.org.cn/Category/Detail?id=568&#39;) eles = driver.find_elements_by_css_selector(&#39;#night_7460 li a&#39;) for ele in eles: print(ele.text) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/16/selenium02.html",
            "relUrl": "/markdown/2020/05/16/selenium02.html",
            "date": " • May 16, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "NumPy (上)",
            "content": "前言 . 本篇鸣谢 马川——燕大 增删整理，王圣元——原创文章，与原文不同之处包含我的学习记录。 . 匹配Jupyter Notebook的ipynb文档链接下载地址如下 . 源文档 . . . 0 引言 . Numpy 是 Python 专门处理高维数组 (high dimensional array) 的计算的包，每次使用它遇到问题都会它的官网 (www.numpy.org). 去找答案。 在使用 numpy 之前，需要引进它，语法如下： . import numpy . 这样你就可以用 numpy 里面所有的内置方法 (build-in methods) 了，比如求和与均值。 . numpy.sum() numpy.mean() . 但是每次写 numpy 字数有点多，通常我们给 numpy 起个别名 np，用以下语法，这样所有出现 numpy 的地方都可以用 np 替代。 . import numpy as np . 为什么要专门学习数组呢？看下面「numpy 数组」和「列表」之间的计算效率对比：两个大小都是 1000000，把每个元素翻倍，运行 10 次用 %time 记时。 . my_arr = np.arange(1000000) my_list = list(range(1000000)) . %time for _ in range(10): my_arr2 = my_arr * 2 . Wall time: 34.3 ms . %time for _ in range(10): my_list2 = [x * 2 for x in my_list] . Wall time: 1.8 s . 「numpy 数组」效率是「列表」效率的10到100倍（甚至更快），并且使用的内存更少。如果元素全是数值型变量 (numerical variable)，那么 numpy 数组明显是个很好的数据结构。 . 学习 numpy 还是遵循的 Python 里「万物皆对象」的原则，既然把数组当对象，我们就按着数组的创建、数组的存载、数组的获取、数组的变形、和数组的计算来盘一盘 NumPy，目录如下： . . 由于篇幅原因，NumPy 系列分两贴，上贴讲前三节的内容，下帖讲后两节的内容。 . 1 数组的创建 . 1.1 初次印象 . 数组 (array) 是相同类型的元素 (element) 的集合所组成数据结构 (data structure)。numpy 数组中的元素用的最多是「数值型」元素，平时我们说的一维、二维、三维数组长下面这个样子 (对应着线、面、体)。四维数组很难被可视化。 . . 注意一个关键字 axis，中文叫「轴」，一个数组是多少维度就有多少根轴。由于 Python 计数都是从 0 开始的，那么 . 第 1 维度 = axis 0 . | 第 2 维度 = axis 1 . | 第 3 维度 = axis 2 . | . 但这些数组只可能在平面上打印出来，那么它们 (高于二维的数组) 的表现形式稍微有些不同。 . . 分析上图各个数组的在不同维度上的元素： . 一维数组：轴 0 有 3 个元素 . | 二维数组：轴 0 有 2 个元素，轴 1 有 3 个元素 . | 三维数组：轴 0有 2 个元素 (2 块)，轴 1 有 2 个元素，轴 2 有 3 个元素 . | 四维数组：轴 0 有 2 个元素 (2 块)，轴 1 有 2 个元素 (2 块)，轴 2 有 2 个元素，轴 3 有 3 个元素 . | . 1.2 创建数组 . 带着上面这个对轴的认识，接下来我们用代码来创建 numpy 数组，有三种方式： . 按步就班的 np.array() 用在列表和元组上 . | 定隔定点的 np.arange() 和 np.linspace() . | 一步登天的 np.ones(), np.zeros(), np.eye() 和 np.random.random() . | 按步就班法 . 给了「列表」和「元组」原材料，用 np.array() 包装一下便得到 numpy 数组。 . l = [3.5, 5, 2, 8, 4.2] np.array(l) . array([3.5, 5. , 2. , 8. , 4.2]) . t = (3.5, 5, 2, 8, 4.2) np.array(t) . array([3.5, 5. , 2. , 8. , 4.2]) . 注意，numpy 数组的输出都带有 array() 的字样，里面的元素用「中括号 []」框住。 . 定隔定点法 . 更常见的两种创建 numpy 数组方法： . 定隔的 arange：固定元素大小间隔 . | 定点的 linspace：固定元素个数 . | . 先看 arange 例子： . print( np.arange(8) ) print( np.arange(2,8) ) print( np.arange(2,8,2)) . [0 1 2 3 4 5 6 7] [2 3 4 5 6 7] [2 4 6] . 函数 arange 的参数为起点 , 终点 , 间隔 . arange(start , stop , step) . 其中 stop 必须要有，start 为 0和 step 没有的话默认为 1。对着这个规则看看上面各种情况的输出。 . 注：用函数 print 打印 numpy 数组就没有 array() 的字样了，只用其内容，而且元素之间的「逗号」也没有了。 . 再看 linspace 的例子：第三个参数输入，等分段落 . print( np.linspace(2,6,3) ) print( np.linspace(3,8,11,endpoint) ) #linescape里面有一个参数endpoint=False,意思是最后一个数字不取到，默认取到最后一个数字。 . [2. 4. 6.] [3. 3.5 4. 4.5 5. 5.5 6. 6.5 7. 7.5 8. ] . 函数 linspace 的参数为起点 , 终点 , 点数 (左右区间都是闭合的) . linspace (start , stop , num) . 其中 start 和 stop 必须要有，num 没有的话默认为 50。对着这个规则看看上面各种情况的输出。 . 一步登天法 . NumPy 还提供一次性 . 用 zeros(n) 创建全是 0 的 n 维数组 . | 用 ones(n) 创建全是 1 的 n 维数组 . | 用 random(n,行数,列数) 创建随机 n 维数组 . | 用 eye() 创建对角矩阵 (二维数组) . | . 对于前三种，由于输出是 n 为数组，它们的参数是一个「标量」或「元组类型的形状」，下面三个例子一看就懂了： . print( np.zeros(5) ) # 标量5代表形状(5,) print( np.ones((2,3)) ) print( np.random.random((2,3,4)) ) . [0. 0. 0. 0. 0.] [[1. 1. 1.] [1. 1. 1.]] [[[0.14428606 0.18096881 0.62007296 0.6772929 ] [0.1455759 0.8892189 0.62079121 0.11571584] [0.35057464 0.15843398 0.95314951 0.00487452]] [[0.2036554 0.77356948 0.70228873 0.62647952] [0.97942093 0.16552439 0.37465336 0.11141434] [0.75365885 0.20963809 0.87369812 0.47554261]]] . 对于函数 eye()，它的参数就是一个标量，控制矩阵的行数或列数： . np.eye(4) . array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]]) . 此外还可以设定 eye() 里面的参数 k . 默认设置 k = 0 代表 1 落在对角线上 . | k = 1 代表 1 落在对角线右上方 . | k = -1 代表 1 落在对角线左下方 . | . np.eye(4, k=1) . array([[0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.], [0., 0., 0., 0.]]) . 1.3 数组性质 . 还记得 Python 里面「万物皆对象」么？numpy 数组也不例外，那么我们来看看数组有什么属性 (attributes) 和方法 (methods)。 . 一维数组 . 用按步就班的 np.array() 带列表生成数组 arr . arr = np.array([3.5, 5, 2, 8, 4.2]) arr . array([3.5, 5. , 2. , 8. , 4.2]) . 现在你应该会用 dir(arr) 来查看数组的属性了吧，看完之后我们对 type, ndim, len(), size, shape, stride, dtype 几个感兴趣，打印出来看看： . print( &#39;The type is&#39;, type(arr) ) print( &#39;The dimension is&#39;, arr.ndim ) print( &#39;The length of array is&#39;, len(arr) ) print( &#39;The number of elements is&#39;, arr.size ) print( &#39;The shape of array is&#39;, arr.shape ) print( &#39;The stride of array is&#39;, arr.strides ) print( &#39;The type of elements is&#39;, arr.dtype ) . The type is &lt;class &#39;numpy.ndarray&#39;&gt; The dimension is 1 The length of array is 5 The number of elements is 5 The shape of array is (5,) The stride of array is (8,) The type of elements is float64 . 根据结果我们来看看上面属性到底是啥： . type：数组类型，当然是 numpy.ndarray . | ndim：维度个数是 1 . | len()：数组长度为 5 (注意这个说法只对一维数组有意义) . | size：数组元素个数为 5 . | shape：数组形状，即每个维度的元素个数 (用元组来表示)，只有一维，元素个数为 5，写成元组形式是 (5,) . | strides：跨度，即在某一维度下为了获取到下一个元素需要「跨过」的字节数 (用元组来表示)，float64 是 8 个字节数 (bytes)，因此跨度为 8 . | dtype：数组元素类型，是双精度浮点 (注意和 type 区分) . | . 注意 strides，这个概念对于解决引言的「转置高维数组」问题很重要。一图胜千言。 . . 咦，为什么有个 Python View 和 Memory Block 啊？这两个不是一样的么？对一维数组来说，「Python 视图」看它和「内存块」存储它的形式是一样的，但对二维数组甚至高维数组呢？ . 二维数组 . 还是用按步就班的 np.array() 带二维列表生成二维数组 arr2d . l2 = [[1, 2, 3], [4, 5, 6]] arr2d = np.array(l2) arr2d . array([[1, 2, 3], [4, 5, 6]]) . 打印属性出来看看： . print( &#39;The type is&#39;, type(arr2d) ) print( &#39;The dimension is&#39;, arr2d.ndim ) print( &#39;The length of array is&#39;, len(arr2d) ) print( &#39;The number of elements is&#39;, arr2d.size ) print( &#39;The shape of array is&#39;, arr2d.shape ) print( &#39;The stride of array is&#39;, arr2d.strides ) print( &#39;The type of elements is&#39;, arr2d.dtype ) . The type is &lt;class &#39;numpy.ndarray&#39;&gt; The dimension is 2 The length of array is 2 The number of elements is 6 The shape of array is (2, 3) The stride of array is (12, 4) The type of elements is int32 . 同样，我们来分析一下上面属性： . $ color{red}{type}$：数组类型 numpy.ndarray . | $ color{red}{ndim}$：维度个数是 2 . | $ color{red}{len()}$：数组长度为 2 (严格定义 len 是数组在「轴 0」的元素个数) . | $ color{red}{size}$：数组元素个数为 6 . | $ color{red}{shape}$：数组形状 (2, 3） . | $ color{red}{strides}$：跨度 (12, 4) 看完下图再解释 . | $ color{red}{dtype}$：数组元素类型 int32 . | . 对于二维数组，「Python 视图」看它和「内存块」存储它的形式是不一样的，如下图所示： . . 在 numpy 数组中，默认的是行主序 (row-major order)，意思就是每行的元素在内存块中彼此相邻，而列主序 (column-major order) 就是每列的元素在内存块中彼此相邻。 . 回顾跨度 (stride) 的定义，即在某一维度下为了获取到下一个元素需要「跨过」的字节数。注：每一个 int32 元素是 4 个字节数。对着上图： . 第一维度(轴0)：沿着它获取下一个元素需要跨过 3 个元素，即 12 = 3×4 个字节 . 第二维度 (轴 1)：沿着它获取下一个元素需要跨过 1 个元素，即 4 = 1×4 个字节 . 因此该二维数组的跨度为 (12, 4)。 . n 维数组 . 用 np.random.random() 来生成一个多维数组： . arr4d = np.random.random( (2,2,2,3) ) print(arr4d) . [[[[0.3655641 0.14651352 0.05611382] [0.09145433 0.66341311 0.93410998]] [[0.32589061 0.21609648 0.65855021] [0.01984889 0.29624348 0.38033199]]] [[[0.57298013 0.5646688 0.80097287] [0.00362119 0.59812186 0.9974391 ]] [[0.726032 0.29853497 0.66405837] [0.83010788 0.95585422 0.13115111]]]] . 里面具体元素是什么不重要，arr4d 的属性比较重要： . print( &#39;The type is&#39;, type(arr4d) ) print( &#39;The dimension is&#39;, arr4d.ndim ) print( &#39;The length of array is&#39;, len(arr4d) ) print( &#39;The number of elements is&#39;, arr4d.size ) print( &#39;The shape of array is&#39;, arr4d.shape ) print( &#39;The stride of array is&#39;, arr4d.strides ) print( &#39;The type of elements is&#39;, arr4d.dtype ) . The type is &lt;class &#39;numpy.ndarray&#39;&gt; The dimension is 4 The length of array is 2 The number of elements is 24 The shape of array is (2, 2, 2, 3) The stride of array is (96, 48, 24, 8) The type of elements is float64 . 除了 stride，都好理解，请根据下图好好想想为什么 stride 是 (96, 48, 24, 8)？[Hint: 一个 float64 的元素占 8 个字节] . . 算了还是分析一下吧 (免得掉粉 )。回顾跨度 (stride) 的定义，即在某一维度下为了获取到下一个元素需要「跨过」的字节数。注：每一个 float64 元素是 8 个字节数 . 第一维度 (轴 0)：沿着它获取下一个元素需要跨过 12 个元素，即 96 = 12×8 个字节 . | 第二维度 (轴 1)：沿着它获取下一个元素需要跨过 6 个元素，即 48 = 6×8 个字节 . | 第三维度 (轴 2)：沿着它获取下一个元素需要跨过 3 个元素，即 24 = 3×8 个字节 . | 第四维度 (轴 3)：沿着它获取下一个元素需要跨过 1 个元素，即 8 = 1×8 个字节 . | . 因此该四维数组的跨度为 (96, 48, 24, 8)。 . 留一道思考题，strides 和 shape 有什么关系？ . strides = (96, 48, 24, 8) shape = (2, 2, 2, 3) . 总不能每个高维数组都用可视化的方法来算 strides 吧。 . 3*8 3*2*8 3*2*2*8 3*2*2*2*8 . 2 数组的存载 . 本节讲数组的「保存」和「加载」，我知道它们没什么技术含量，但是很重要。假设你已经训练完一个深度神经网络，该网络就是用无数参数来表示的。比如权重都是 numpy 数组，为了下次不用训练而重复使用，将其保存成 .npy 格式或者 .csv 格式是非常重要的。 . numpy 自身的 .npy 格式 . 用 np.save 函数将 numpy 数组保存为 .npy 格式，具体写法如下： . np.save(&quot;文件名&quot;，数组 ) . arr_disk = np.arange(8) np.save(&quot;arr_disk&quot;, arr_disk) arr_disk . array([0, 1, 2, 3, 4, 5, 6, 7]) . . arr_disk.npy 保存在 Jupyter Notebook 所在的根目录下。要加载它也很简单，用 np.load( “文件名” ) 即可： . np.load(&quot;arr_disk.npy&quot;) . array([0, 1, 2, 3, 4, 5, 6, 7]) . 文本 .txt 格式 . 用 np.savetxt 函数将 numpy 数组保存为 .txt 格式，具体写法如下： . np.savetxt(“文件名”,数组 ) . arr_text = np.array([[1., 2., 3.], [4., 5., 6.]]) np.savetxt(&quot;arr_from_text.txt&quot;, arr_text) . arr_from_text.txt 保存在 Jupyter Notebook 所在的根目录下，用 Notepad 打开看里面确实存储着 [[1,2,3], [4,5,6]]。 . . 用 np.loadtxt( “文件名” ) 即可加载该文件 . np.loadtxt(&quot;arr_from_text.txt&quot;) . array([[1., 2., 3.], [4., 5., 6.]]) . 文本 .csv 格式 . 另外，假设我们已经在 arr_from_csv 的 csv 文件里写进去了 [[1,2,3], [4,5,6]]，每行的元素是由「分号 ;」来分隔的，展示如下： . . 用 np.genfromtxt( “文件名” ) 即可加载该文件 . np.genfromtxt(&quot;arr_from_csv.csv&quot;) . array([nan, nan]) . 奇怪的是数组里面都是 nan，原因是没有设定好「分隔符 ;」，那么函数 genfromtxt 读取的两个元素是 . 1;2;3 . | 4;5;6 . | . 它们当然不是数字拉，Numpy 只能用两个 nan (Not a Number) 来代表上面的四不像了。 . 带上「分隔符 ;」再用 np.genfromtxt( “文件名”，分隔符 ) 即可加载该文件 . np.genfromtxt(&quot;arr_from_csv.csv&quot;, delimiter=&quot;;&quot;) . array([[1., 2., 3.], [4., 5., 6.]]) . 3 数组的获取 . 获取数组是通过索引 (indexing) 和切片 (slicing) 来完成的， . 切片是获取一段特定位置的元素 . | 索引是获取一个特定位置的元素 . | . 索引和切片的方式和列表一模一样。对于一维数组 arr, . 切片写法是 arr[start : stop : step] . | 索引写法是 arr[index] . | . 因此，切片的操作是可以用索引操作来实现的 (一个一个总能凑成一段)，只是没必要罢了。为了简化，我们在本章三节标题里把切片和索引都叫做索引。 . 索引数组有三种形式，正规索引 (normal indexing)、布尔索引 (boolean indexing) 和花式索引 (fancy indexing)。 . 3.1 正规索引 . 虽然切片操作可以由多次索引操作替代，但两者最大的区别在于 . 切片得到的是原数组的一个视图 (view) ，修改切片中的内容会改变原数组 . | 索引得到的是原数组的一个复制 (copy)，修改索引中的内容不会改变原数组 . | . 请看下面一维数组的例子来说明上述两者的不同。 . 一维数组 . arr = np.arange(10) arr . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . 用 arr[6] 索引第 7 个元素 (记住 Python 是从 0 开始记录位置的) . arr[6] . 6 . 把它赋给变量 a，并重新给 a 赋值 1000，但是元数组 arr 第 7 个元素的值还是 6，并没有改成 1000。 . a = arr[6] a = 1000 arr . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . 用 arr[5:8] 切片第 6 到 8 元素 (记住 Python 切片包头不包尾) . arr[5:8] . array([5, 6, 7]) . 把它赋给变量 b，并重新给 b 的第二个元素赋值 12，再看发现元数组 arr 第 7 个元素的值已经变成 12 了。 . b = arr[5:8] b[1] = 12 arr . array([ 0, 1, 2, 3, 4, 5, 12, 7, 8, 9]) . 这就证实了切片得到原数组的视图 (view)，更改切片数据会更改原数组，而索引得到原数组的复制 (copy)， 更改索引数据不会更改原数组。希望用下面一张图可以明晰 view 和 copy 的关系。 . . 了解完一维数组的切片和索引，类比到二维和多维数组上非常简单。 . 二维数组 . arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) arr2d . array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) . 索引 . 情况一：用 arr2d[2] 来索引第三行，更严格的说法是索引「轴 0」上的第三个元素。 . arr2d[2] . array([7, 8, 9]) . 情况二：用 arr2d[0][2] 来索引第一行第三列 . arr2d[0][2] . 3 . 索引二维数组打了两个中括号好麻烦，索引五维数组不是要打了五个中括号？还有一个简易方法，用 arr2d[0, 2] 也可以索引第一行第三列 . arr2d[0,2] . 3 . 切片 . 情况一：用 arr2d[:2] 切片前两行，更严格的说法是索引「轴 0」上的前两个元素。 . arr2d[:2] . array([[1, 2, 3], [4, 5, 6]]) . 情况二：用 arr2d[:, [0,2]] 切片第一列和第三列 . arr2d[:,[0,2]] . array([[1, 3], [4, 6], [7, 9]]) . 情况三：用 arr2d[1, :2] 切片第二行的前两个元素 . arr2d[1, :2] . array([4, 5]) . 情况四：用 arr2d[:2, 2] 切片第三列的前两个元素 . arr2d[:2, 2] . array([3, 6]) . 3.2 布尔索引 . 布尔索引，就是用一个由布尔 (boolean) 类型值组成的数组来选择元素的方法。 . 假设我们有阿里巴巴 (BABA)，脸书 (FB) 和京东 (JD) 的 . 股票代码 code 数组 . | 股票价格 price 数组：每行记录一天开盘，最高和收盘价格。 . | . code = np.array([&#39;BABA&#39;, &#39;FB&#39;, &#39;JD&#39;, &#39;BABA&#39;, &#39;JD&#39;, &#39;FB&#39;]) price = np.array([[170,177,169],[150,159,153], [24,27,26],[165,170,167], [22,23,20],[155,116,157]]) price . array([[170, 177, 169], [150, 159, 153], [ 24, 27, 26], [165, 170, 167], [ 22, 23, 20], [155, 116, 157]]) . 假设我们想找出 BABA 对应的股价，首先找到 code 里面是 ‘BABA’ 对应的索引 (布尔索引)，即一个值为 True 和 False 的布尔数组。 . code == &#39;BABA&#39; . array([ True, False, False, True, False, False]) . 用该索引可以获取 BABA 的股价： . price[ code == &#39;BABA&#39; ] . array([[170, 177, 169], [165, 170, 167]]) . 用该索引还可以获取 BABA 的最高和收盘价格： . price[ code == &#39;BABA&#39;, 1: ] . array([[177, 169], [170, 167]]) . 再试试获取 JD 和 FB 的股价： . price[ (code == &#39;FB&#39;)|(code == &#39;JD&#39;) ] . array([[150, 159, 153], [ 24, 27, 26], [ 22, 23, 20], [155, 116, 157]]) . 虽然下面操作没有实际意义，试试把股价小于 25 的清零。 . price[ price &lt; 25 ] = 0 price . array([[170, 177, 169], [150, 159, 153], [ 0, 27, 26], [165, 170, 167], [ 0, 0, 0], [155, 116, 157]]) . 注：这种布尔索引的操作在 Pandas 更常用也更方便，看完 pandas 那帖后就可以忽略这一节了。 . 3.3 花式索引 . 花式索引是获取数组中想要的特定元素的有效方法。考虑下面数组： . arr = np.arange(32).reshape(8,4) arr . array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23], [24, 25, 26, 27], [28, 29, 30, 31]]) . 假设你想按特定顺序来获取第 5, 4 和 7 行时，用 arr[ [4,3,6] ] . arr[ [4,3,6] ] . array([[16, 17, 18, 19], [12, 13, 14, 15], [24, 25, 26, 27]]) . 假设你想按特定顺序来获取倒数第 4, 3 和 6 行时 (即正数第 4, 5 和 2 行)，用 arr[ [-4,-3,-6] ] . arr[ [-4,-3,-6] ] . array([[16, 17, 18, 19], [20, 21, 22, 23], [ 8, 9, 10, 11]]) . 此外，你还能更灵活的设定「行」和「列」中不同的索引，如下 . arr[ [1,5,7,2], [0,3,1,2] ] . array([ 4, 23, 29, 10]) . 检查一下，上行代码获取的分别是第二行第一列、第六行第四列、第八行第二列、第三行第三列的元素，它们确实是 4, 23, 29 和 10。如果不用花式索引，就要写下面繁琐但等价的代码： . np.array( [ arr[1,0], arr[5,3], arr[7,1], arr[2,2] ] ) . array([ 4, 23, 29, 10]) . 最后，我们可以把交换列，把原先的 [0,1,2,3] 的列换成 [0,3,1,2]。 . arr[:,[0,3,1,2]] . array([[ 0, 3, 1, 2], [ 4, 7, 5, 6], [ 8, 11, 9, 10], [12, 15, 13, 14], [16, 19, 17, 18], [20, 23, 21, 22], [24, 27, 25, 26], [28, 31, 29, 30]]) . 4 总结 . 本帖讨论了 NumPy 的前三节，数组创建、数组存载和数组获取。同样把 numpy 数组当成一个对象，要学习它，无非就是学习怎么 . 创建它：按步就班法、定隔定点法、一步登天法 . | 存载它：保存成 .npy, .txt 和 .csv 格式，下次加载即用 . | 获取它：一段用切片，一个用索引；有正规法、布尔法、花式法 . | . 等等，你好像还没教什么 numpy 数组硬核的东西呢，下帖讨论 NumPy 的后两节就教怎么 . 变形它：重塑和打平，合并和分裂，元素重复和数组重复 . | 计算它：元素层面计算，线性代数计算，广播机制计算 . | . 欧了！下篇讨论 NumPy 系列的「数组的变形」和「数组的计算」。Stay Tuned! . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/12/NumPy-(%E4%B8%8A).html",
            "relUrl": "/markdown/2020/05/12/NumPy-(%E4%B8%8A).html",
            "date": " • May 12, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Selenium的web自动化操作01(环境布置与标准流程)",
            "content": "前言 . 需要下载Chrome或Firefox的driver，Chrome内核81.440与Firefox内核74.0下载链接如下： . Firefox . Chrome . 其他版本请在搜索引擎查找，本篇使用该版本，注意，driver下载后需要配置对应内核的游览器，电脑本身需要有该内核的游览器。 . . web自动化操作流程 . from selenium import webdriver import time wd = webdriver.Chrome(r&#39;C: chromedriver.exe&#39;) &#39;&#39;&#39; wd.get(&#39;https://www.baidu.com&#39;) #webdriver类选择的是整个页面 element = wd.find_element_by_id(&quot;kw&quot;) #class，name，id(id比较精确) #通过webelement对象进行操作 element.send_keys(&#39;csdn&#39;)#输入 如果输入csdn n可以模拟回车键 element = wd.find_element_by_id(&#39;su&#39;)#点击搜索 element.click()#点击 &#39;&#39;&#39; wd.get(&#39;https://blog.csdn.net/spiritLHL/article/details/105252792?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158864611119724848300006%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.57677%2522%257D&amp;request_id=158864611119724848300006&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1&#39;) #elements = wd.find_element_by_class_name(&quot;blog-content-box&quot;) #time.sleep(2)#模拟点击等待的时间(找不找得到都会等待) wd.implicitly_wait(5)#更方便的等待时间(找不到元素才会等待) elements = wd.find_elements_by_tag_name(&quot;p&quot;) for e in elements: print(e.text) #print(elements.get_attribute(&#39;href&#39;)) wd.close()#关闭游览器 . . find_element和find_elements的区别 . 使用find_elements选择的是符合条件的所有元素，如果没有符合条件的元素，回空列表 使用find_element选择的是符合条件的第一个元素，如果没有符合条件的元素，抛出异常 . 获取属性值—&gt; element.get_attribute(&#39;href&#39;) . 获取整个元素对应html—&gt; elements.get_attribute(&#39;outerHTML&#39;) . 获取某元素内所有html文本内容—&gt; elements.get_attribute(&#39;innerHTML&#39;) . 获取输入框内的文本内容—&gt; elements.get_attribute(&#39;value&#39;) . . 获取元素文本内容 . 通过WebElement对象的text属性，可以获取元素展示在界面上的文本内容。 . 但是，有时候，元素的文本内容没有展示在界面上，或者没有完全完全展示在界面上。这时用WebElement的text属性,获取文本内容，就会有问题。 . 出现这种情况，可以尝试使用 . element.get_attribute(&#39;innerText&#39;) . 或者 . element.get_attribute(&#39;textContent&#39;) . . css选择器 . wd.find_element_by_css_selector() . CSS Selector同样可以根据tag名、id 属性和class属性来选择元素`。 . 根据tag名选择元素的CSS Selector语法非常简单，直接写上tag名即可。 . 比如要选择所有的tag名为div的元素,就可以是这样 . elements = wd.find_elements_by_css_selector(&#39;div&#39;) . 等价于 . elements = wd.find_elements_by_tag_name(&#39;div&#39;) . . 根据属性值定位 . element = wd.find_element_by_css_selector(&#39;[href=&quot;http://ww.miitbeian.gov.cn&quot;]&#39;) . . 验证所找元素是否正确书写格式 . 在开发者工具中按ctrl+f，输入所写格式，若存在着会高亮显示 css选择某个class的所有，写 .class0 (表示选中名为class0的所有标签) css选择两个不同名class(都选中)(中间写英文逗号）写 .class1 , .class2 逗号左右的属性类型可以不同 . . 父元素 . . 父元素的第几个某类型的子节点 . 我们可以指定选择的元素是父元素的第几个某类型的子节点(要选择元素的上一层级为父节点) 使用 nth-of-type 比如，我们要选择class1和class2的第几个元素， 可以像上面那样思考：选择的是第2个子元素，并且是span类型 所以这样可以这样写 span:nth-child(2) 还可以这样思考，选择的是第1个span类型的子元素 所以也可以这样写 span:nth-of-type(1) . . 父元素的倒数第几个某类型的子节点 . 当然也可以反过来，选择父元素的倒数第几个某类型的子节点 使用 nth-last-of-type 像这样 . #### 相邻兄弟节点选择 上面的例子里面，我们要选择我们要选择class1和class2的第几个元素， 还有一种思考方法，就是选择h3后面紧跟着的兄弟节点span。 这就是一种相邻兄弟关系，可以这样写h3 + span 表示元素紧跟关系的是加号 #### 后续所有兄弟节点选择 如果要选择是选择 h3 后面所有的兄弟节点span可以这样写 h3 ~ span ### 内嵌 内嵌html页面的，使用wd.switch_to.frame(frame_reference)切换到内嵌 页面进行操作。 其中，frame_reference可以是frame元素的属性name或者ID。 比如这里，就可以填写iframe元素的id&#39;frame1&#39; 或者name属性值&#39;innerFrame&#39;。 像这样 python wd.switch_to.frame(&#39;frame1&#39;) . 或者 . wd.switch_to.frame(&#39;innerFrame&#39;) . 也可以填写frame所对应的WebElement对象。 我们可以根据frame的元素位置或者属性特性，使用find系列的方法，选择到该元素，得到对应的WebElement对象 比如，这里就可以写 . wd.switch_to.frame(wd.find_element_by_tag_name(&quot;iframe&quot;)) . 然后，就可以进行后续操作frame里面的元素了。 上面的例子的正确代码如下 . from selenium import webdriver wd = webdriver.Chrome(r&#39;d: webdrivers chromedriver.exe&#39;) wd.get(&#39;http://cdn1.python3.vip/files/selenium/sample2.html&#39;) # 先根据name属性值 &#39;innerFrame&#39;，切换到iframe中 wd.switch_to.frame(&#39;innerFrame&#39;) # 根据 class name 选择元素，返回的是 一个列表 elements = wd.find_elements_by_class_name(&#39;plant&#39;) for element in elements: print(element.text) #如果我们已经切换到某个iframe里面进行操作了，那么后续选择和操作界面元素 就都是在这个frame里面进行的。 #这时候，如果我们又需要操作主html（我们把最外部的html称之为主html）里面的元素了呢？ #怎么切换回原来的主html呢？ #很简单，写如下代码即可 wd.switch_to.default_content() #例如，在上面 代码 操作完 frame里面的元素后， 需要 点击 主html 里面的按钮，就可以这样写 from selenium import webdriver wd = webdriver.Chrome(r&#39;d: webdrivers chromedriver.exe&#39;) wd.get(&#39;http://cdn1.python3.vip/files/selenium/sample2.html&#39;) # 先根据name属性值 &#39;innerFrame&#39;，切换到iframe中 wd.switch_to.frame(&#39;innerFrame&#39;) # 根据 class name 选择元素，返回的是 一个列表 elements = wd.find_elements_by_class_name(&#39;plant&#39;) for element in elements: print(element.text) # 切换回 最外部的 HTML 中 wd.switch_to.default_content() # 然后再 选择操作 外部的 HTML 中 的元素 wd.find_element_by_id(&#39;outerbutton&#39;).click() wd.quit() . 如果我们要到新的窗口里面操作，该怎么做呢？ 可以使用Webdriver对象的switch_to属性的window方法，如下所示： . wd.switch_to.window(handle) . 其中，参数handle需要传入什么呢？ WebDriver对象有window_handles属性，这是一个列表对象，里面包括了当前浏览器里面所有的窗口句柄。 所谓句柄，大家可以想象成对应网页窗口的一个ID， 那么我们就可以通过类似下面的代码， . for handle in wd.window_handles: # 先切换到该窗口 wd.switch_to.window(handle) # 得到该窗口的标题栏字符串，判断是不是我们要操作的那个窗口 if &#39;Bing&#39; in wd.title: # 如果是，那么这时候WebDriver对象就是对应的该该窗口，正好，跳出循环， break . 上面代码的用意就是： 我们依次获取wd.window_handles里面的所有句柄对象，并且调用wd.switch_to.window(handle)方法，切入到每个窗口，然后检查里面该窗口对象的属性(可以是标题栏，地址栏)判断是不是我们要操作的那个窗口，如果是，就跳出循环。 同样的，如果我们在新窗口操作结束后， 还要回到原来的窗口，该怎么办？ 我们可以仍然使用上面的方法，依次切入窗口，然后根据标题栏之类的属性值判断。 还有更省事的方法: 因为我们一开始就在原来的窗口里面，我们知道进入新窗口操作完后，还要回来，可以事先保存该老窗口的句柄，使用如下方法 (mainWindow变量保存当前窗口的句柄) . mainWindow = wd.current_window_handle . 切换到新窗口操作完后，就可以直接像下面这样，将driver对应的对象返回到原来的窗口 (通过前面保存的老窗口的句柄，自己切换到老窗口) . wd.switch_to.window(mainWindow) . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/10/selenium01.html",
            "relUrl": "/markdown/2020/05/10/selenium01.html",
            "date": " • May 10, 2020"
        }
        
    
  
    
        ,"post18": {
            "title": "Python数据分析快速入门",
            "content": "前言 . 本篇鸣谢 燕大——马川 的整理 . 匹配Jupyter Notebook的ipynb文档链接下载地址如下 . 源文档 . Python编程基础 . by 马川 燕大 . 代码胜于雄辩 Talks is cheap. Show me the code. —-Linus Torvalds(Linux操作系统的奠基者) . 对于任何一种计算机语言，最重要的就是： . 数据类型 . | 控制结构 . | 函数 . | 这三方面一定要打牢基础。 . 此外 Python 非常简洁，具有很多高级特性，使得一行代码 (one-liner) 就能做很多事情，我们将重点介绍各种「解析式」和「高阶函数」。 . shirft + Tab 看Jupyter Notebook解释文档 . 00 Python概览 . . #直接在当前文件里运行时会调用main，但是在其他文件里import这个文件，就不会执行这个文件的main（上图解释） . Python程序实例解析 . 温度转换程序 . 根据华氏和摄氏温度定义，转换公式如下： . C = ( F – 32 ) / 1.8 F = C * 1.8 + 32 . 其中，C表示摄氏温度，F表示华氏温度 . #e1.1TempConvert.py TempStr = input(&quot;请输入带有符号的温度值: &quot;) if TempStr[-1] in [&#39;F&#39;,&#39;f&#39;]: C = (eval(TempStr[0:-1]) - 32)/1.8 print(&quot;转换后的温度是{:.2f}C&quot;.format(C)) elif TempStr[-1] in [&#39;C&#39;,&#39;c&#39;]: F = 1.8*eval(TempStr[0:-1]) + 32 print(&quot;转换后的温度是{:.2f}F&quot;.format(F)) else: print(&quot;输入格式错误&quot;) . Python语法元素分析 . 格式框架、注释、变量、表达式、语句函数 . 缩进 . 1个缩进 = 4个空格 . (1)用以在Python中标明代码的层次关系 . (2)缩进是Python语言中表明程序框架的唯一手段 . 注释 . 单行注释以#开头 . print(&quot;Hello world&quot;) #打印显示 . 多行注释以 ‘&#39;’开头和结尾 . ’&#39;’python This is a multiline comment used in Python ‘’’ . 命名与保留字 . 常量： 程序中值不发生改变的元素 . 变量：程序中值发生改变或者可以发生改变的元素 . Python语言允许采用大写字母、小写字母、数字、下划线(_)和汉字等字符及其组合给变量命名，但名字的首字符不能是数字，中间不能出现空格，长度没有限制 注意：标识符对大小写敏感，python和Python是两个不同的名字 . 字符串 . Python语言中，字符串是用两个双引号“ ”或者单引号‘ ’括起来的一个或多个字符。 . Python字符串的两种序号体系 . . str = &quot;Hello World&quot; print(str[0:-1]) . 赋值语句 . Python语言中，= 表示“赋值”，即将等号右侧的值计算后将结果值赋给左侧变量，包含等号（=）的语句称为“赋值语句” . 同步赋值 . x=5 y=10 x,y=y,x print(x,y) x,y,z=1,4,5 print(x,y,z) . input()函数 . 获得用户输入之前，input()函数可以包含一些提示性文字 . &lt;变量&gt; = input(&lt;提示性文字&gt;) 字符型 . input(&quot;请输入: &quot;) . eval() 函数 . eval()函数是Python语言中一个十分重要的函数，它**去掉字符串最外侧的引号**并以**Python表达式的方式解析并执行**去掉引号后的字符串内容，将返回结果输出(会进行数值运算) . tmp=&quot;102C&quot; print(eval(&quot;tmp&quot;)) print(eval(tmp[0:-1])) value=eval(input(&quot;输入数值&quot;)) print(value*2) s = &quot;11+5in&quot; print(eval(s[1:-2])) . 输出函数 . #print()函数用来输出字符信息，或以字符形式输出变量。 F=10.258 print(F) print(&quot;转换后的温度是{:.2f}&quot;.format(F)) . Python 库的引入与调用 . import关键字 . import是一个关键字，用来引入一些外部库 . 引入方式1 . import numpy print(numpy.arange(0,10)) . 引入方式2 . from numpy import * print(arange(0,10)) . 引入方式3 . import numpy as np print(np.arange(0,10)) . 01 数据 . 在 Python 中数据可分两大类： . 基本数据类型(元素型)：整数、浮点数、复数、布尔型 . | 组合数据类型(容器型)：字符串、元组、列表、字典、集合 . | . 1.1 基本数据类型（元素型） . Python 里面有自己的内置数据类型 (build-in data type)，本节介绍四种数字类型(Numbers): . 整型 (int) . | 浮点型 (float) . | 复数 (complex) . | 布尔型 (bool) . | 思维导图(图中左侧部分的字符串属于组合数据类型) . . 数字类型 . print( 1, type(1) ) print( 1., type(1.) ) print( 1 + 2j, type(1 + 2j) ) print( True, type( True )) . 布尔型 (boolean) . 布尔 (boolean) 型变量只能取两个值，True 和 False。当把布尔变量用在数字运算中，用 1 和 0 代表 True 和 False。 . T = True F = False print( T + 2 ) print( F - 8 ) . 数字类型的转换 . int(4.5) # = 4 ，直接去掉小数部分 float(4) # = 4.0，增加小数部分 complex(4) # = 4 + 0j bool(4.5) . bool(x) . 若x为基本数据类型，则只要x不是整型 0、浮点型 0.0，bool(x) 就是 True，其余就是 False。 . 若x为组合数据类型，则只要x不是空的变量，bool(x) 就是 True，其余就是 False。 . 类型的判断 . type() . 函数：type(x)，返回x的类型，适用于所有类型的判断 . print(type(4+2j)) . dir和help函数 . dir() . dir()用来查询一个类或者对象的所有属性 . dir(list) . help() . help()函数帮助我们了解模块、类型、对象、方法、属性的详细信息 . 1.帮助查看类型详细信息，包含类的创建方式、属性、方法 . help(list) . 2.帮助查看方法的详细使用信息（使用时要注意输入完整路径，使用模块帮助时，需要先导入模块） . import math help(math.sqrt) . 字符串类型及其操作 . 字符串是用双引号“”或者单引号‘’ 或’’’括起来的一个或多个字符。 . 字符串可以保存在变量中，也可以单独存在。 . 可以用type()函数测试一个字符串的类型 . print(&#39;单引号表示可以使用&quot;双引号&quot;作为内容&#39;) print(&quot;双引号表示可以使用&#39;单引号&#39;作为内容&quot;) print(&#39;&#39;&#39;三引号表示可以使用&quot;双引号&quot; 单引号&#39;作为内容&#39;，还可以换行 &#39;&#39;&#39;) . 常用的字符串处理函数 . len . len()函数返回一个字符串的长度 . print(len(&quot;天行健，君子以自强不息&quot;)) . str . 大多数数据类型都可以通过str()函数转换为字符串 . str(123.456) str(123e+10) . 遍历字符串 . 可以通过 for 和 in 组成的循环来遍历字符串中每个字符 . mystr=&quot;地势坤，君子以厚德载物&quot; for s in mystr: print(s) . split . 按指定字符分割字符串为数组 . mystr=&quot;敕勒川，阴山下，天似穹庐，笼盖四野&quot; print(mystr.split(&quot;，&quot;)) . join . 连接两个字符串序列 . mystr = &quot;@&quot; ls = [&quot;天苍苍&quot;,&quot;野茫茫&quot;,&quot;风吹草低见牛羊&quot;] print(mystr.join(ls)) . replace . 字符串替换 . myOldStr=&quot;今夕何夕溪，搴舟中流。今日何日溪，得与王子同舟。&quot; myNewStr=myOldStr.replace(&quot;溪&quot;,&quot;兮&quot;) print(myNewStr) . format方法的基本使用 . hero=&quot;乔峰&quot; department=&quot;丐帮&quot; skill=&quot;降龙十八掌&quot; print(&quot;{}大侠，{}人士，成名绝技{},此前已刻苦练功{}个时辰&quot;.format(hero,department,skill,1234.5678)) #&quot;{0:*^30}大侠，{1}人士，成名绝技{2},此前已刻苦练功{3:,.2f}个时辰&quot;.format(hero,department,skill,1234.5678) . 1.2 组合数据类型(容器型) . 思维导图 . . 序列 . 序列是一组有顺序的元素向量，通过序号访问，元素之间不排他。 . 1. 字符串(具体细节见“基本数据类型”思维导图左侧部分) . mystr=&quot;Hello world&quot; mystr[0:3] mystr[0:-1] print(&quot;Hello world&quot;[0:3]) . 2. 元组 . creature = &quot;cat&quot;, &quot;dog&quot;, &quot;tiger&quot;, &quot;human&quot; color = (&quot;red&quot;, 0x001100, &quot;blue&quot;, creature) color[2] color[-1][2]#索引可以索引两重 . 应用场景 . def func(x): #函数多返回值 return x, x**3 a, b = &#39;dog&#39;, &#39;tiger&#39; #多变量同步赋值 a, b = (b, a) #多变量同步赋值，括号可省略 func(3) . import math for x, y in ((1,0), (2,5), (3,8)): #循环遍历 print(math.hypot(x,y)) #求多个坐标值到原点的距离 . 3. 列表 . ls = [425, &quot;BIT&quot;, [10, &quot;CS&quot;], 425] ls[2][-1][0]#多重索引 list((425, &quot;BIT&quot;, [10, &quot;CS&quot;], 425)) list(&quot;中国是一个伟大的国家&quot;) list() print(ls[2][-1][0]) . ls = [425, &quot;BIT&quot;, 1024] #用数据赋值产生列表ls lt = ls #lt是ls所对应数据的引用，lt并不包含真实数据 #lt = ls[:] #ls通过分片操作将列表ls的元素全部拷贝给lt ls[0] = 0 print(id(ls),id(lt)) . vlist = list(range(5)) len(vlist[2:]) #计算从第3个位置开始到结尾的子串长度 2 in vlist #判断2是否在列表vlist中 vlist[3]=&quot;python&quot; #修改序号3的元素值和类型 vlist[1:3]=[&quot;bit&quot;, &quot;computer&quot;] print(vlist) . 多增少减 . vlist[1:3]=[&quot;new_bit&quot;, &quot;new_computer&quot;, 123] vlist #vlist[1:3]=[&quot;fewer&quot;] print(vlist) . #以k为步数 ls = [425, &quot;BIT&quot;, [10, &quot;CS&quot;], 123, &quot;Hello Ysu&quot;, 23 , (10,29)] lt=[&quot;1st&quot;,&quot;2nd&quot;,&quot;3rd&quot;] ls[0:5:2] = lt print(ls) del ls[0:5:2]#删去了024号元素 print(ls) . ls = [&quot;1st&quot;,&quot;2nd&quot;,&quot;3rd&quot;] lt = [425, &quot;BIT&quot;, [10, &quot;CS&quot;], 425, &quot;Hello Ysu&quot;, 23, 425, (10,29)] #在列表ls最后增加一个元素x ls.append(&quot;4th&quot;) print(ls) #删除ls中所有元素 ls.clear() print(ls) #生成一个新列表，复制lt中所有元素 ls = lt.copy() print(ls) #在列表ls第i位置增加元素x ls.insert(1,&quot;ysu&quot;) print(ls) #将列表ls中第i项元素取出并删除该元素BIT ls.pop(2) #将列表中出现的第一个元素x删除 ls.remove(425) print(ls) #列表ls中元素反转 ls.reverse() print(ls) . for e in vlist: print(e, end=&quot; &quot;)#不换行显示 . 4. 集合 . 集合类型是一个元素集合，元素之间无序，相同元素在集合中唯一存在。 . #元素类型只能是固定数据类型，例如：整数、浮点数、字符串、元组等 S = {425, &quot;BIT&quot;, (10, &quot;CS&quot;), 424} T = {425, &quot;BIT&quot;, (10, &quot;CS&quot;), 424, 425, &quot;BIT&quot;} #列表、字典和集合类型本身都是可变数据类型，不能作为集合的元素出现。 X = {425, &quot;BIT&quot;, [10, &quot;CS&quot;], {&quot;蜀&quot;:&quot;诸葛亮&quot;}, {234,(10,&quot;haha&quot;)}} . #set(x)函数可以用于生成集合 W = set(&#39;apple&#39;) V = set((&quot;cat&quot;, &quot;dog&quot;, &quot;tiger&quot;, &quot;human&quot;)) print(V) . 应用场景 . &quot;BIT&quot; in {&quot;PYTHON&quot;, &quot;BIT&quot;, 123, &quot;GOOD&quot;} #成员关系测试 tup = (&quot;PYTHON&quot;, &quot;BIT&quot;, 123, &quot;GOOD&quot;, 123) tup1 = set(tup)#元素去重 newtup = tuple(set(tup)-{&#39;PYTHON&#39;}) # 去重同时删除数据项 print(tup1) . 集合类型的4种基本操作，交集（&amp;）、并集（|）、差集（-）、补集（^），操作逻辑与数学定义相同 . . A = {425, &quot;BIT&quot;, (10, &quot;CS&quot;), 424, 125, &quot;This is A&quot;} B = {425, &quot;BIT&quot;, (10, &quot;CS&quot;), 424, 425, &quot;BIT&quot;,&quot;This is B&quot;} print(A | B) print(A - B) print(A &amp; B) print(A ^ B) . s = [123,(45,&quot;Hello world&quot;),&quot;set&quot;] t = [123,(45,&quot;Hello world&quot;),&quot;set&quot;,&quot;haha&quot;] print(s &lt;= t) print(s &gt;= t) . 5. 映射 . 映射类型是“键-值”数据项的组合，每个元素是一个键值对，表示为(key, value) . 字典是集合类型的延续，各个元素并没有顺序之分 . Dcountry={&quot;中国&quot;:&quot;北京&quot;, &quot;美国&quot;:&quot;华盛顿&quot;, &quot;法国&quot;:&quot;巴黎&quot;} print(Dcountry) #访问 Dcountry[&quot;中国&quot;] #修改 Dcountry[&quot;中国&quot;]=&#39;大北京&#39; print(Dcountry) #增加新元素 Dcountry={&quot;中国&quot;:&quot;北京&quot;, &quot;美国&quot;:&quot;华盛顿&quot;, &quot;法国&quot;:&quot;巴黎&quot;} Dcountry[&quot;英国&quot;]=&quot;伦敦&quot; print(Dcountry) #直接使用大括号（{}）可以创建一个空的字典，并通过中括号（[]）向其增加元素 Dp={} Dp[&#39;2^10&#39;]=1024 print(Dp) . 字典类型的操作 . Dcountry={&quot;中国&quot;:&quot;北京&quot;, &quot;美国&quot;:&quot;华盛顿&quot;, &quot;法国&quot;:&quot;巴黎&quot;} Dcountry.keys() list(Dcountry.values()) Dcountry.items() &#39;中国&#39; in Dcountry #只对键进行判断 Dcountry.get(&#39;美国&#39;, &#39;悉尼&#39;) #&#39;美国&#39;在字典中存在 Dcountry.get(&#39;澳大利亚&#39;, &#39;悉尼&#39;) #&#39;澳大利亚&#39;在字典中不存在 for key in Dcountry: print(key) . 02 程序的控制结构 . 思维导图 . . 分支结构 . #求两个数的最大值 x=int(input(&quot;请输入x:&quot;)) y=int(input(&quot;请输入y:&quot;)) if x&gt;y: print(x) else: print(y) . #条件判断从左到右执行，并且在and或or两侧的条件会有&quot;短路&quot;现象 a = 5 b = 7 c = 8 d = 6 if a&lt;b or c&gt;d: print(&quot;True&quot;) def suma(y): global a a=a+y return a if suma(2) or suma(3): print(&quot;a={}&quot;.format(a)) . 身体质量指数BMI . . #多分支 height, weight = eval(input(&quot;请输入身高(米)和体重(公斤)[逗号隔开]: &quot;)) bmi = weight / pow(height, 2) print(&quot;BMI数值为：{:.2f}&quot;.format(bmi)) wto, dom = &quot;&quot;, &quot;&quot; if bmi &lt; 18.5: wto, dom = &quot;偏瘦&quot;, &quot;偏瘦&quot; elif 18.5 &lt;= bmi &lt; 24: wto, dom = &quot;正常&quot;, &quot;正常&quot; elif 24 &lt;= bmi &lt; 25: wto, dom = &quot;正常&quot;, &quot;偏胖&quot; elif 25 &lt;= bmi &lt; 28: wto, dom = &quot;偏胖&quot;, &quot;偏胖&quot; elif 28 &lt;= bmi &lt; 30: wto, dom = &quot;偏胖&quot;, &quot;肥胖&quot; else: wto, dom = &quot;肥胖&quot;, &quot;肥胖&quot; print(&quot;BMI指标为:国际&#39;{0}&#39;, 国内&#39;{1}&#39;&quot;.format(wto, dom)) . 循环结构 . 遍历循环：for语句 . 循环次数确定，循环次数采用遍历结构中元素的个数来体现 . #判断一个数是否为素数 integer=int(input(&quot;请输入一个整数:&quot;)) flag=False for i in range(2,integer):#从2到输入的整数求余数，若都为0就是素数 if integer%i==0: break else: # if i==integer-1 flag=True print(&quot;问：整数{}是素数吗？ n答：{}&quot;.format(integer,flag)) . continue vs break . for i in range(4): for j in range(4): if j==i: print(&#39;-&#39;,end=&#39; t&#39;) break # 试试continue print(&#39;*&#39;,end=&#39; t&#39;) print() . 无限循环：while语句 . 循环次数不确定。无限循环一直保持循环操作，直到特定循环条件不被满足才结束 . #猜密码 guess=0 #输入的数字 secret=7 #预设的数字 while guess!=secret: #条件 也可用True/barek构造无限循环 guess=int(input(&quot;@数字区间0-9，请输入你猜的数字:&quot;)) if guess==secret: print(&quot;你猜对了，真厉害！&quot;) else: print(&quot;很遗憾，猜错了！&quot;) print(&quot;游戏结束&quot;) . #猜密码 secret=7 #预设的数字 while True: # 用True/barek构造无限循环 guess=int(input(&quot;@数字区间0-9，请输入你猜的数字:&quot;)) if guess==secret: print(&quot;你猜对了，真厉害！&quot;) break else: print(&quot;很遗憾，猜错了！&quot;) print(&quot;游戏结束&quot;) . 03 函数 . 思维导图 . . . def - 使用def关键字定义函数 . | function_name - 函数名，起名应有意义，见名知意 . | arg1 - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定 . | arg2 = v - 默认参数 = 默认值，调用函数的时候，默认参数已经有值，可省略 . | *args - 可变参数，可以是从零个到任意个，自动组装成元组 . | ：- 冒号，在第一行最后要加个冒号，表示后面内容为函数体部分 . | ”&quot;”docstring””” - 函数说明，用于介绍该函数，可省略，但写函数说明是一个好习惯，可使你写的代码可读性更好 . | statement - 函数体部分(函数内容) . | . 函数的参数传递 . 默认值 . def dup(str, times = 2): print(str*times) dup(&quot;knock~&quot;) dup(&quot;knock~&quot;,4) . 可选参数 . def func(x1,y1,z1,x2,y2,z2): return (x1,y1,z1,x2,y2,z2) # 按位置给参数赋值 result = func(1,2,3,4,5,6) # 按参数名给参数赋值 result = func(x2=4, y2=5, z2=6, x1=1, y1=2, z1=3) . 可变参数 . def vfunc(a, *b): print(type(b)) for n in b: a += n return a vfunc(1,2,3,4,5) . 注意： . 在 Python 中定义函数时，若定义了位置参数、默认参数、可变参数，参数定义的顺序必须是： . 位置参数、默认参数、可变参数 . 否则，程序会报错。 . 函数的返回值 . def func(a, b): return a*b s = func(&quot;knock~&quot;, 2) print(s) def func(a, b): return b,a s = func(&quot;knock~&quot;, 2) #print(s, type(s)) . 全局变量与局部变量 . n = 1 #n是全局变量 def func(a, b): c = a * b #c是局部变量，a和b作为函数参数也是局部变量 return c s = func(&quot;knock~&quot;, 2) print(c) print(s) . n = 1 #n是全局变量 def func(a, b): n = b #这个n是在函数内存中新生成的局部变量 return a*b s = func(&quot;knock~&quot;, 2) print(s, n) . n = 1 #n是全局变量 def func(a, b): global n n = b #将局部变量b赋值给全局变量n return a*b s = func(&quot;knock~&quot;, 2) print(s, n) . ls = [] #建立ls全局列表变量 def func(a, b): ls.append(b) #将局部变量b增加到全局列表变量ls中 return a*b s = func(&quot;knock~&quot;, 2) print(s, ls) #测试一下ls值是否改变 . ls = [] #ls是全局列表变量 def func(a, b): ls = [] #创建了名称为ls的局部列表变量列 ls.append(b) #将局部变量b增加到局部列表变量ls中 return a*b s = func(&quot;knock~&quot;, 3) print(s, ls) #测试一下ls值是否改变 . 函数的递归 . def fact(n): if n == 0: return 1 else: return n * fact(n-1) num = eval(input(&quot;请输入一个整数: &quot;)) print(fact(abs(int(num)))) . def reverse(s): if s==&quot;&quot;: return s else: return reverse(s[1:]) + s[0] . lambda函数(匿名函数) . . lambda - 定义匿名函数的关键字 . | argument_list - 函数参数，可以是位置参数、默认参数、可变参数等，和正规函数里的参数类型一样 . | ：- 冒号，在函数参数和表达式中间要加个冒号 . | expression - 函数表达式，输入函数参数，输出一些值 . | . 注意 lambda 函数没有所谓的函数名，所以也叫匿名函数。下面是一些 lambda 函数示例： . lambda所表示的匿名函数的内容应该是很简单的，如果复杂的话，干脆就重新定义一个函数了，使用lambda就有点过于执拗了。 . # 输入 x 和 y，输出其积 x*y func = lambda x, y: x*y func(2, 3) . 和下面的正规函数等价： . def func(x,y): return x*y func(2,3) . # 输入任意个数的参数，输出其和 func = lambda *args: sum(args) func( 1, 2, 3, 4, 5 ) . 和下面的正规函数等价： . def func(*args): return sum(args) func( 1, 2, 3, 4, 5 ) . 04 高级特性 . 在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。 . 因此，Python中有许多高级特性，这里仅介绍推导式和高阶函数。 . 推导式 . 推导式comprehensions（又称生成式、解析式），是Python的一种独有特性。推导式是可以从一个数据序列构建另一个新的数据序列的结构体。 共有三种推导，在Python2和3中都有支持： . 列表(list)推导式 | 字典(dict)推导式 | 集合(set)推导式 | . 基本格式 . variable = [out_exp_res for out_exp in input_list if out_exp == 2] . [要添加的元素 for循环 if判断条件] . out_exp_res:　　列表生成元素表达式，可以是有返回值的函数。 | for out_exp in input_list：　　迭代input_list将out_exp传入out_exp_res表达式中。 | if out_exp == 2：　　根据条件过滤哪些值可以。 | . 问题： . 如何从一个含整数列表中把奇数 (odd number) 挑出来？ . lst = [1, 2, 3, 4, 5] odds = [] for n in lst: if n % 2 == 1: odds.append(n * 2) odds . 任务完成了，但不够简洁，看看下面这一行代码： . odds = [n * 2 for n in lst if n % 2 == 1] odds . 乍一看从「for 循环」到「解析式」不直观，我来用不同颜色把这个过程可视化一下，如下图： . 现在你可能会说上面「for 循环」只有一层，如果两层怎么转换「列表解析式」？具体来说怎么解决下面这个问题。 . 问题： . 如何用「列表解析式」将一个二维列表中的元素按行一个个展平？ . 没思路？先用「for 循环」试试？ . lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] flattened = [] for row in lst: for n in row: flattened.append(n) flattened . 套用一维「列表解析式」的做法 . . 两点需要注意： . 该例没有「if 条件」条件，或者认为有，写成「if True」。如果有「if 条件」那么直接加在「内 for 循环」后面。 . | 「外 for 循环」写在「内 for 循环」前面。 . | . lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] flattened = [n for row in lst for n in row] flattened . 我们把「列表解析式」那一套举一反三的用到其他解析式上，用下面两图理解一下「字典解析式」和「集合解析式」。 . . 再看一些例子： . #列表生成式 #两层循环 [m + n for m in &#39;ABC&#39; for n in &#39;XYZ&#39;] . #字典生成式 #大小写key合并 mcase = {&#39;a&#39;: 10, &#39;b&#39;: 34, &#39;A&#39;: 7, &#39;Z&#39;: 3} mcase_frequency = {v: k for k, v in mcase.items()} print(mcase_frequency) . #集合生成式 squared = {x**2 for x in [1, 1, 2]} print(squared) . 高阶函数 . 高阶函数 (high-order function) 在函数化编程 (functional programming) 很常见，主要有两种形式： . 参数是函数 (map, filter, reduce) . | 返回值是函数 (closure, partial, currying) . | 这里只介绍第一种。 . Map, Filter, Reduce . Python 里面的 map, filter 和 reduce 属于第一种高阶函数，参数是函数。这时候是不是很自然的就想起了 lambda 函数？ . 作为内嵌在别的函数里的参数，lambda 函数就像微信小程序一样，即用即丢，非常轻便。 . 首先看看 map, filter 和 reduce 的语法： . map(函数 f, 序列 x)： . 对序列 x 中每个元素依次执行函数 f，将 f(x) 组成一个「map 对象」返回 (可以将其转换成 list 或 set) | . filter(函数 f, 序列 x)： . 对序列 x 中每个元素依次执行函数 f，将 f(x) 为 True 的结果组成一个「filter 对象」返回 (可以将其转换成 list 或 set) | . f(x)是一个判断函数，取值为正的时候返回对象 . reduce(函数 f, 序列 x)： . 对序列 x 的第一个和第二个元素执行函数 f，得到的结果和序列 x 的下一个元素执行函数 f，一直遍历完的序列 x 所有元素。 | . . map() 函数接收两个参数，一个是函数，一个是 Iterable (可迭代对象，如列表、元组、字典、字符串等可以用for遍历的数据结构)，map 将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator(可以将其转换成 list 或 set)返回。 . 看个具体的平方示例，用 map 函数对列表每个元素平方。 . . lst = [1, 2, 3, 4, 5, 6, 7, 8, 9] map_iter = map( lambda x: x**2, lst ) print( map_iter ) print( list(map_iter) ) . 接着再看看 filter 函数，顾名思义就是筛选函数，那么我们把刚才列表中的计数筛选出来吧。 . filter_iter = filter(lambda n: n % 2 == 1, lst) print( filter_iter ) print( list(filter_iter) ) . 在 filter 函数中 . 第一个参数是一个识别奇数的「匿名函数」 . | 第二个参数是列表，即该「匿名函数」作用的对象 . | . 同样，filter_iter 作为 filter 函数的返回对象，也是一个迭代器，想要将其内容显示出来，需要用 list 将其转换成「列表」形式。 . 最后来看看 reduce 函数，顾名思义就是累积函数，把一组数减少 (reduce) 到一个数。 . from functools import reduce reduce( lambda x,y: x+y, lst ) . 在 reduce 函数中 . 第一个参数是一个求和相邻两个元素的「匿名函数」 | 第二个参数是列表，即该「匿名函数」作用的对象 | . 在 reduce 函数的第三个参数还可以赋予一个初始值 . reduce( lambda x,y: x+y, lst, 100 ) . 05 综合示例 . Jieba库的使用 . #jieba库的安装 #pip install jieba import jieba jieba.lcut(&quot;中国是一个伟大的国家&quot;) . 精确模式：将句子最精确地切开，适合文本分析 . jieba.lcut(&quot;中华人民共和国是一个伟大的国家&quot;) . 全模式：把句中所有可以成词的词语都扫描出来，速度快，但不能解决歧义 . jieba.lcut(&quot;中华人民共和国是一个伟大的国家&quot;, cut_all=True) . 搜索引擎模式：在精确模式的基础上，对长词再次切分，适合搜索引擎分词 . jieba.lcut_for_search(&quot;中华人民共和国是一个伟大的国家&quot;) . 《三国演义》人物出场统计 . import jieba excludes = {&quot;将军&quot;,&quot;却说&quot;,&quot;荆州&quot;,&quot;二人&quot;,&quot;不可&quot;,&quot;不能&quot;,&quot;如此&quot;} txt = open(&quot;三国演义.txt&quot;, &quot;r&quot;, encoding=&#39;utf-8&#39;).read() words = jieba.lcut(txt) counts = {} for word in words: if len(word) == 1: continue elif word == &quot;诸葛亮&quot; or word == &quot;孔明曰&quot;: rword = &quot;孔明&quot; elif word == &quot;关公&quot; or word == &quot;云长&quot;: rword = &quot;关羽&quot; elif word == &quot;玄德&quot; or word == &quot;玄德曰&quot;: rword = &quot;刘备&quot; elif word == &quot;孟德&quot; or word == &quot;丞相&quot;: rword = &quot;曹操&quot; else: rword = word counts[rword] = counts.get(rword,0) + 1 for word in excludes: del(counts[word]) items = list(counts.items()) items.sort(key=lambda x:x[1], reverse=True) for i in range(10): word, count = items[i] print (&quot;{0:&lt;10}{1:&gt;5}&quot;.format(word, count)) . Sort函数 . 列表有自己的sort方法，其对列表进行原址排序 . x = [4, 6, 2, 1, 7, 9] x.sort() print(x) . sort和sorted方法还有两个可选参数：key和reverse . key接受一个函数，这个函数只接受一个元素，这个函数用于从每个元素中提取一个用于比较的关键字,默认为None . x = [&#39;mmm&#39;, &#39;mm&#39;, &#39;mm&#39;, &#39;m&#39; ] x.sort(key = len) #指定key=len，就是比较len()之后的结果 print(x) . reverse是一个布尔值。如果设置为True，列表元素将被倒序排列，默认为False . y = [3, 2, 8 ,0 , 1] y.sort(reverse = False) print(y) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/09/python%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",
            "relUrl": "/markdown/2020/05/09/python%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",
            "date": " • May 9, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "爬虫流程及方法14(正则表达式篇)",
            "content": "前言 . re库的实用实例如下 . import requests import re import os a = True while a: #创建一个文件夹，保存所有图片 if not os.path.exists(&#39;./tupianLibs&#39;): os.mkdir(&#39;./tupianLibs&#39;) headers = { &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#39; } url = &quot;https://www.pexels.com/&quot; #使用通用爬虫对整张页面进行爬取 page_text = requests.get(url=url, headers=headers).text #使用聚焦爬虫将页面中所有的图片进行解析/提取 #正则.*?表示一切内容 #re.S单行匹配 ex = &#39;&lt;a class=&quot;js-photo-link photo-item__link&quot; style.*? &gt;.*?&lt;img srcset=&quot;(.*?)&quot; class.*?&gt;&lt;/div&gt;&#39; image_src_list = re.findall(ex, page_text, re.S ) for src in image_src_list: src = &#39;https:&#39;+ src #拼接出一个完整的图片url image_data = requests.get(url=src, headers=headers).content #请求到了图片的二进制数据 image_name = src.split(&#39;/&#39;)[-1] #生成图片名称 imgPath = &#39;./tupianlbs/&#39; + image_name #图片最终存储的路径 with open(imgPath, &#39;W&#39;) as fp: fp.write(image_data) print(&#39;下载成功&#39;) a = False . 正则表达式详情 . . . raw string类型区别于原生字符串类型（不包含转义字符） . r&#39;[1-9] d{5}&#39; . . re.search(pattern, string, flags=0) . 在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。 . pattern:正则表达式的字符串或原生字符串表示 string:待匹配字符串 flags:正则表达式使用时的控制标记 . . re.split(pattern, string, maxsplit=0, flags=0) . 将一个字符串按照正则表达式匹配结果进行分割,返回列表类型。 . pattern:正则表达式的字符串或原生字符串表示 string:待匹配字符串 maxsplit:最大分割数，剩余部分作为最后一个元素输出 flags:正则表达式使用时的控制标记 . re.finditer(pattern, string, flags=0) . 搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象。 . pattern:正则表达式的字符串或原生字符串表示 string:待匹配字符串 flags:正则表达式使用时的控制标记 . re.sub(pattern, repl, string, count=0, flags=0) . 在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串。 . pattern:正则表达式的字符串或原生字符串表示 repl:替换匹配字符串的字符串 string:待匹配字符串 flags:正则表达式使用时的控制标记 . regex = re.compile(pattern, flags=0) . 将正则表达式的字符串形式编译成正则表达式对象 . pattern:正则表达式的字符串或原生字符串表示 flags:正则表达式使用时的控制标记 Match:对象的属性 . . match = re.search(r&#39;PY.*N&#39;,&#39; PYANBNCNDN&#39; ) match.group(0) . Re库默认采用贪婪匹配，即输出匹配最长的子串。 . 输出’PYANBNCNDN’ . match = re.search(r&#39;PY. *?N&#39;, &#39; PYANBNCNDN&#39;) match group(0) . 输出’PYAN ‘ . . import re restr=&quot;&lt;td data-v-80203e10=&quot;&quot;&gt;（ d+）&lt;/td&gt;&quot;#括号表示只取数据（数字） regex=re.compile(restr,re.IGNORECASE) mylist=regex.findall(province) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/03/%E7%88%AC%E8%99%AB14.html",
            "relUrl": "/markdown/2020/05/03/%E7%88%AC%E8%99%AB14.html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "爬虫流程及方法13(xpath解析页面)",
            "content": "前言 . xpath解析原理: 1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。 2.调用et ree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。 . 环境的安装: . pip install Lxml . 如何实例化一个etree对象: . from Lxml import etree . 1.将本地的html文档中的源码数据加载到etree对象中: . etree.parse(fiLePath) . 2.可以将从互联网上获取的源码数据加裁到该对象中 . etree.HTML( &#39;page_ text&#39; ) . xpath(&#39;xpath表达式&#39;) . #3.7版本后引入etree模块如下，3.5版本以下可以直接从lxml中引入 from lxml import html etree = html.etree parser = etree.HTMLParser(encoding=&quot;utf-8&quot;) #实例化好了一个etree对象，且将被解析的源码加载到了该对象中 tree = etree.parse(&#39;bs4练习.html&#39;, parser=parser) # r = tree.xpath(&#39;/html/body/div&#39;) # r = tree.xpath(&#39;/html//div&#39;) # r = tree.xpath(&#39;//div&#39;) . /表示的是从根节点开始定位，一个/x/表示一个层级，//表示跨越多个层级,可以表示从任意位置开始定位 . r = tree.xpath(&#39;//div[@class=&quot;song&quot;]&#39;) . 属性定位： . //div[@class=&quot;song&quot;] tag[@attrName=&quot;attrValue&quot;] . r = tree.xpath(&#39;//div[@class=&quot;song&quot;]/p[3]&#39;) . 索引定位： . &#39;//div[@class=&quot;song&quot;]/p[3]&#39; #这里索引以1开始 . r = tree.xpath(&#39;//div[@class=&quot;tang&quot;]//li[5]/a/text()&#39;)[0] 取文本： . /text() #获取的是标签中直系的文本内容 . . //text() #获取标签中非直系文本内容（所有文本内容） . python r = tree.xpath(&#39;//div[@class=&quot;tang&quot;]/text()&#39;) . 取属性： . /@attrName ==&gt;img/src . r = tree.xpath(&#39;//div[@class=&quot;song&quot;]/img/@src&#39;) . 实际案例： . #3.7版本后引入etree模块如下，3.5版本以下可以直接从lxml中引入 from lxml import html import requests etree = html.etree a = True while a: #爬取页面源码数据 url = &#39;https://mm.58.com/ershoufang/&#39; headers = { &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#39; } page_text = requests.get(url=url, headers=headers).text #数据解析 tree = etree.HTML(page_text) li_list = tree.xpath(&#39;//ul[@class=&quot;house-list-wrap&quot;]/li&#39;) fp = open(&#39;58.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) for li in li_list: #页面数据局部解析 title = li.xpath(&#39;./div[2]/h2/a/text()&#39;)[0]#./表示从前面的li开始（局部开始） print(title) fp.write(title+&#39; n&#39;) a = False .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/03/%E7%88%AC%E8%99%AB13.html",
            "relUrl": "/markdown/2020/05/03/%E7%88%AC%E8%99%AB13.html",
            "date": " • May 3, 2020"
        }
        
    
  
    
        ,"post21": {
            "title": "爬虫流程及方法12(高性能异步爬虫)",
            "content": "前言 . 目的:在爬虫中使用异步实现高性能的数据爬取操作。 异步爬虫的方式: –多线程，多进程(不建议): 好处:可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行。 弊端:无法无限制的开启多线程或者多进程。 . ps:get方法与post方法是阻塞的方法 . –线程池、进程池(适当的使用)： 好处:我们可以降低系统对进程或者线程创建和销毁的一个频率，从而很好的降低系统的开销。 弊端:池中线程或进程的数量是有上限。| . 模拟多线程操作 . 单线程模拟： . import time #使用单线程串行方式执行 def get_page(str): print(&quot;正在下载: &quot;, str) time.sleep(2) print(&#39;下载成功: &#39;, str) name_list = [&#39;xiaozi&#39;, &#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;] start_time = time.time() for i in range(len(name_list)): get_page(name_list[i]) end_time = time.time() print(&#39;%d second&#39; % (end_time-start_time)) . 结果:8s . 线程池模拟： . import time #导入线程池模块对应的类 from multiprocessing.dummy import Pool #使用线程池方式进行 #导入线程池所对应的pool start_time = time.time()#程序开始时计时 def get_page(str): print(&quot;正在下载: &quot;, str) time.sleep(2) print(&#39;下载成功: &#39;, str) name_list = [&#39;xiaozi&#39;, &#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;]#可迭代对象 #实例化一个线程对象 pool = Pool(4)#线程池开启4个线程 #将列表中每一个列表元素传递给get_page进行处理 pool.map(get_page, name_list)#若有返回值返回的是列表，因为多次传入到map end_time = time.time()#程序结束时结束计时 print(end_time-start_time) . 结果:2s . 实际案例 . 提取js动态加载内容，使用re正则匹配 . js源码 . var contId=&quot;1671755&quot;,liveStatusUrl=&quot;liveStatus.jsp&quot;,liveSta=&quot;&quot;,playSta=&quot;1&quot;,autoPlay=!1,isLiving=!1,isVrVideo=!1,hdflvUrl=&quot;&quot;,sdflvUrl=&quot;&quot;,hdUrl=&quot;&quot;,sdUrl=&quot;&quot;,ldUrl=&quot;&quot;,srcUrl=&quot;https://video.pearvideo.com/mp4/third/20200429/cont-1671755-11742488-084919-hd.mp4&quot;,vdoUrl=srcUrl,skinRes=&quot;//www.pearvideo.com/domain/skin&quot;,videoCDN=&quot;//video.pearvideo.com&quot; . 正则匹配 . ex = ‘srcUrL=”( .*? )”,vdoUrl’ . 分组操作提取链接 . import requests from bs4 import BeautifulSoup import re from multiprocessing import Pool def get_video_data(dic): headers = { &#39;User-Agent&#39;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&quot; } #使用线程池对视频数据进行请求（较为耗时的堵塞操作） url = dic[&#39;url&#39;] print(dic[&#39;name&#39;], &#39;正在下载&#39;) data = requests.get(url=url, headers=headers, timeout=0.5).content #持久化存储操作 with open(dic[&#39;name&#39;], &#39;wb&#39;) as fp: fp.write(data) print(dic[&#39;name&#39;], &#39;下载成功&#39;) if __name__ == &#39;__main__&#39;: headers = { &#39;User-Agent&#39;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&quot; } url = &#39;https://www.pearvideo.com/category_5&#39; page_text = requests.get(url=url, headers=headers).text soup = BeautifulSoup(page_text, &#39;lxml&#39;) li_urls = soup.select(&#39;.vervideo-bd&#39;) urls = []#存储所有视频的链接和名字 i = 1 for li in li_urls: try: i = i + 1 detail_url = &#39;https://www.pearvideo.com/&#39; + li.a[&#39;href&#39;] name = soup.select(&#39;.vervideo-title&#39;)[i].text+&#39;.mp4&#39; detail_page_text = requests.get(url=detail_url, headers=headers, timeout=0.5).text ex = &#39;srcUrl=&quot;(.*?)&quot;,vdoUrl&#39; video_url = re.findall(ex, detail_page_text)[0] dic = { &#39;name&#39;: name, &#39;url&#39;: video_url } urls.append(dic) except: continue pool = Pool(4) pool.map(get_video_data, urls) pool.close() pool.join() . 总结： . 1.windows环境下需要将主函数放在以下代码下方 . if __name__ == &#39;__main__&#39;: . mac环境下不需要此操作 . 2.下载时下载二进制数据，使用’wb’而不是’w’。 . 3.如果下载视频过多(爬取大量数据)，网站要求验证证书，大量爬取需要使用其他方法应对ssl反爬策略。 . ps：感谢csdn学院提供的案例支持 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/05/01/%E7%88%AC%E8%99%AB12.html",
            "relUrl": "/markdown/2020/05/01/%E7%88%AC%E8%99%AB12.html",
            "date": " • May 1, 2020"
        }
        
    
  
    
        ,"post22": {
            "title": "爬虫流程及方法11(PyQuery解析网页篇)(全)",
            "content": "前言 . 本篇鸣谢 清华——尹成 的整理收集 . PyQuery文档https://www.osgeo.cn/pyquery/index.html . PyQuery库也是一个非常强大又灵活的网页解析库，如果你有前端开发经验的，都应该接触过jQuery,那么PyQuery就是你非常绝佳的选择，PyQuery 是 Python 仿照 jQuery 的严格实现。语法与 jQuery 几乎完全相同，所以不用再去费心去记一些奇怪的方法了。 官网地址:http://pyquery.readthedocs.io/en/latest/ jQuery参考文档:http://jquery.cuishifeng.cn/ . 初始化 . 初始化的时候一般有三种传入方式：传入字符串，传入url,传入文件 . 字符串初始化 . html = &#39;&#39;&#39; &lt;div&gt; &lt;ul&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) print(doc) print(type(doc)) print(doc(&#39;li&#39;)) . 结果如下： . . 由于PyQuery写起来比较麻烦，所以我们导入的时候都会添加别名： from pyquery import PyQuery as pq 这里我们可以知道上述代码中的doc其实就是一个pyquery对象，我们可以通过doc可以进行元素的选择，其实这里就是一个css选择器，所以CSS选择器的规则都可以用，直接doc(标签名)就可以获取所有的该标签的内容，如果想要获取class 则doc(‘.class_name’),如果是id则doc(‘#id_name’)…. . URL初始化 . from pyquery import PyQuery as pq doc = pq(url=&quot;http://www.baidu.com&quot;,encoding=&#39;utf-8&#39;) print(doc(&#39;head&#39;)) . 文件初始化 . 我们在pq()这里可以传入url参数也可以传入文件参数，当然这里的文件通常是一个html文件。 例如：pq(filename=’index.html’) . 基本的CSS选择器 . html = &#39;&#39;&#39; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) print(doc(&#39;#container .list li&#39;)) . 这里我们需要注意的一个地方是doc(‘#container .list li’)，这里的三者之间的并不是必须要挨着，只要是层级关系就可以,下面是常用的CSS选择器方法： . . 查找元素 . 子元素 children,find 代码例子： . html = &#39;&#39;&#39; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) items = doc(&#39;.list&#39;) print(type(items)) print(items) lis = items.find(&#39;li&#39;) print(type(lis)) print(lis) . 运行结果如下 . . 从结果里我们也可以看出通过pyquery找到结果其实还是一个pyquery对象，可以继续查找，上述中的代码中的items.find(‘li’) 则表示查找ul里的所有的li标签 当然这里通过children可以实现同样的效果,并且通过.children方法得到的结果也是一个pyquery对象 . li = items.children() print(type(li)) print(li) . 同时在children里也可以用CSS选择器 li2 = items.children(‘.active’) print(li2) 父元素 parent,parents方法 通过.parent就可以找到父元素的内容，例子如下： . html = &#39;&#39;&#39; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) items = doc(&#39;.list&#39;) container = items.parent() print(type(container)) print(container) . 通过.parents就可以找到祖先节点的内容，例子如下： . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) items = doc(&#39;.list&#39;) parents = items.parents() print(type(parents)) print(parents) . 结果如下： 从结果我们可以看出返回了两部分内容，一个是的父节点的信息，一个是父节点的父节点的信息即祖先节点的信息 . . 同样我们通过.parents查找的时候也可以添加css选择器来进行内容的筛选 . 兄弟元素 . siblings . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) li = doc(&#39;.list .item-0.active&#39;) print(li.siblings()) . 代码中doc(‘.list .item-0.active’) 中的.tem-0和.active是紧挨着的，所以表示是并的关系，这样满足条件的就剩下一个了：thired item的那个标签了 这样在通过.siblings就可以获取所有的兄弟标签，当然这里是不包括自己的 同样的在.siblings()里也是可以通过CSS选择器进行筛选 . 遍历 . 单个元素 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) li = doc(&#39;.item-0.active&#39;) print(li) lis = doc(&#39;li&#39;).items() print(type(lis)) for li in lis: print(type(li)) print(li) . 运行结果如下： . . 从结果中我们可以看出通过items()可以得到一个生成器，并且我们通过for循环得到的每个元素依然是一个pyquery对象。 . 获取信息 . 获取属性 . pyquery对象.attr(属性名) pyquery对象.attr.属性名 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) a = doc(&#39;.item-0.active a&#39;) print(a) print(a.attr(&#39;href&#39;)) print(a.attr.href) . . 所以这里我们也可以知道获得属性值的时候可以直接a.attr(属性名)或者a.attr.属性名 . 获取文本 . 在很多时候我们是需要获取被html标签包含的文本信息,通过.text()就可以获取文本信息 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) a = doc(&#39;.item-0.active a&#39;) print(a) print(a.text()) . 结果如下： . . 获取html . 我们通过.html()的方式可以获取当前标签所包含的html信息，例子如下 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) li = doc(&#39;.item-0.active&#39;) print(li) print(li.html()) . 结果如下： . . DOM操作 . addClass、removeClass 熟悉前端操作的话，通过这两个操作可以添加和删除属性 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) li = doc(&#39;.item-0.active&#39;) print(li) li.removeClass(&#39;active&#39;) print(li) li.addClass(&#39;active&#39;) print(li) . attr,css 同样的我们可以通过attr给标签添加和修改属性， 如果之前没有该属性则是添加，如果有则是修改 我们也可以通过css添加一些css属性，这个时候，标签的属性里会多一个style属性 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;ul class=&quot;list&quot;&gt; &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt; &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) li = doc(&#39;.item-0.active&#39;) print(li) li.attr(&#39;name&#39;, &#39;link&#39;) print(li) li.css(&#39;font-size&#39;, &#39;14px&#39;) print(li) . 结果如下 . . remove 有时候我们获取文本信息的时候可能并列的会有一些其他标签干扰，这个时候通过remove就可以将无用的或者干扰的标签直接删除，从而方便操作 . html = &#39;&#39;&#39; &lt;div class=&quot;wrap&quot;&gt; Hello, World &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;/div&gt; &#39;&#39;&#39; from pyquery import PyQuery as pq doc = pq(html) wrap = doc(&#39;.wrap&#39;) print(wrap.text()) wrap.find(&#39;p&#39;).remove() print(wrap.text()) . 结果如下： . .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/30/%E7%88%AC%E8%99%AB11.html",
            "relUrl": "/markdown/2020/04/30/%E7%88%AC%E8%99%AB11.html",
            "date": " • Apr 30, 2020"
        }
        
    
  
    
        ,"post23": {
            "title": "爬虫流程及方法10(爬虫伪装专题篇)",
            "content": "原网页链接萌新论坛 . requests 伪装 headers 发送请求 . headers中空着的可能有也可能无，user-agent基本得有 . 在chrome中找到网页的请求头，图片如下 . . headers = { &quot;Accept&quot;: &quot; &quot;, &quot;Accept-Encoding&quot;: &quot; &quot;, &quot;Accept-Language&quot;: &quot; &quot;, &quot;Host&quot;: &quot; &quot;, &#39;user-agent&#39;:&#39;粘贴1处&#39; } #在页面中点击右键选择检查，调出网页自带的抓包工具，打开Network后刷新当前页面抓包找到user-agent的项复制粘贴1 . cookie的三种传参方法 . headers = {&quot;User_Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;, &quot;Cookie&quot; : &quot; &quot;, &quot;Refer&quot; : &quot; 从哪个网页来的(url)&quot; } #三种Cookie请求方式 &#39;&#39;&#39;第一种：cookie放在headers中&#39;&#39;&#39; headers = {&quot;User_Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;, &quot;Cookie&quot; : &quot; &quot; } &#39;&#39;&#39;第二种：cookie字典传给cookies参数&#39;&#39;&#39; &#39;&#39;&#39;第三种 先发送post请求，获取cookie，带上cookie请求登陆之后的页面&#39;&#39;&#39; # 如果没有的就要抓包了Network -&gt; preserve log -&gt; login包 -&gt;requesy seesion = requests.seesion() # 用户名作为键， 真正的密码作为值 模拟登陆 post_data = {&quot;email&quot;:&quot;xxxx&quot;, &quot;password&quot;:&quot;xxxx&quot;} seesion.post(url=url, data=post_data, headers=headers) # 服务器设置在本地的cookie会保存在本地 seesion.get(url) # 会带上之前保存在seesion中的cookie，能够请求成功 . requests 伪装 params 传输数据 . params = { &#39;某名字&#39;:&#39;某值&#39;, &#39;粘贴2&#39;: &#39;黏贴2&#39; } #在页面中点击右键选择检查，调出网页自带的抓包工具，打开Network后刷新当前页面抓包找到Query String Parameters的项复制粘贴2（记得加符号&#39;粘贴2&#39;） . User-Agent：这里面存放浏览器的信息。可以看到上面的参数值，它表示我是通过Windows的Chrome浏览器，访问的这个服务器。如果我们不设置这个参数，用Python程序直接发送GET请求，服务器接受到的User-Agent信息就会是一个包含python字样的User-Agent。如果后台设计者验证这个User-Agent参数是否合法，不让带Python字样的User-Agent访问，这样就起到了反爬虫的作用。这是一个最简单的，最常用的反爬虫手段。 . Referer：这个参数也可以用于反爬虫，它表示这个请求是从哪发出的。可以看到我们通过浏览器访问网站，这个请求是从哪个页面来的(那个页面包含该链接)，这个地址发出的。如果后台设计者，验证这个参数，对于不是从这个地址跳转过来的请求一律禁止访问，这样就也起到了反爬虫的作用。 . ps: authorization：这个参数是基于AAA模型中的身份验证信息允许访问一种资源的行为。在我们用浏览器访问的时候，服务器会为访问者分配这个用户ID。如果后台设计者，验证这个参数，对于没有用户ID的请求一律禁止访问，这样就又起到了反爬虫的作用。 . UserAgent伪装集合详见资源页面 . selenium 模拟使用浏览器伪装 headers . 使用自动化测试工具 selenium 可以模拟使用浏览器访问网站。使用的selenium版本大都支持 Chrome 和 Firefox 浏览器。要使用该库浏览器需要下载对应版本到电脑上。 . 使用 webdriver 访问本身自带浏览器的 headers。 . import selenium import selenium.webdriver import ssl def get_url_text(url): driver = selenium.webdriver.Chrome()#模拟调用谷歌游览器（模拟你电脑有的游览器操作） driver.get(url)#访问链接 pagesource=driver.page_source#抓取网页源代码 #你要执行的预处理写这里 driver.close() return #返回值 . ssl处理(仅针对使用urllib与urllib3) . urllib库爬虫 . import ssl context = ssl._create_unverified_context() #忽略安全 . requests库爬虫 . 忽略ssl验证使得网页访问得以顺利通过 . verify=False 代表不做证书验证 . import requests from requests.packages import urllib3 urllib3.disable_warnings() #关闭警告 respone=requests.get(&#39;https://www.12306.cn&#39;,verify=False) print(respone.status_code) . 不做证书验证的情况，在某些情况下是行不通的的，这需要其他处理方式 . requests 使用 ip 代理发送请求 . 查询自己的ip，网址https://httpbin.org/ip . import requests a = True while a: try: url = &#39;https://httpbin.org/ip&#39; response = requests.get(url) print(response.text) except: print(&quot;爬取失败&quot;) a = False . 使用代理ip与伪装headers的方式相似,只需要传入proxies参数。 比如现在我有一个代理ip:111.164.20.86:8111，使用如下： . import requests a = True while a: url = &#39;https://httpbin.org/ip&#39; proxy = { &#39;http&#39;: &#39;111.164.20.86:8111&#39;, } #或者填入https请求的&#39;https&#39;: &#39; &#39; response = requests.get(url=url, proxies=proxy) print(response.text) #返回值是代理ip地址，更换url即可使用代理ip爬虫 a = False . 支持socks代理,安装输入： . pip install requests[socks] . 实例： . import requests proxies = { &#39;http&#39;: &#39;socks5://user:pass@host:port&#39;, &#39;https&#39;: &#39;socks5://user:pass@host:port&#39; } respone=requests.get(&#39;https://www.12306.cn&#39;, proxies=proxies) print(respone.status_code) . 如果没考虑好用http/https，建议两个都写入字典proxy里面，就不会报错 . 代理免费ip可能会时不时中断，建议淘宝购买(支持验证那种)，当然如果购买阿里云端口也是可以的 . 重复执行报错处理 . import requests from retrying import retry #@retry(stop_max_attempt_number = 10) &#39;&#39;&#39;让被装饰的函数反复执行10次，10次全部报错才会报错， 中间有一次正常就继续往下走&#39;&#39;&#39; url = &quot;http://www.baidu.com&quot; response = requests.get(url,timeout=0.01)#timeout=0.01 代表请求+接收服务端数据的总时间 #如果想明确控制链接与等待接收服务端数据的时间则写 timeout=(1,2) #timeout=(1,2)&gt;1代表链接超时时间 2代表接收数据的超时时间 print(response.content.decode()) headers = {&quot;User_Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36&quot;, } .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/30/%E7%88%AC%E8%99%AB10.html",
            "relUrl": "/markdown/2020/04/30/%E7%88%AC%E8%99%AB10.html",
            "date": " • Apr 30, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "爬虫流程及方法09(动态加载页面)(ajax请求)(Json实例)",
            "content": "动态加载数据ajax . 首页中对应企业数据通过ajax请求得到 . 详情页url只有id不同其余相同 . id从json中获取，域名与id拼接新url . 详情页的数据也是动态加载出来的 . 详情页的url也是相同的只有id不同 . 爬取的原网站药妆局 . 推荐使用chrome网页抓包工具查看请求类型 首页与详情页都使用post请求传输json数据包，需要json解析 . import requests import json a = True while a: headers = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&quot; } #批量获取企业详情页对应id url = &quot;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&quot; id_list = [] # 存储企业id all_data_list = [] #参数封装 for page in range(1,6): data = { &#39;on&#39;: &#39;true&#39;, &#39;page&#39;: page, &#39;pageSize&#39;: &#39; 15&#39;, &#39;productName&#39;: &#39;&#39;, &#39;conditionType&#39;: &#39; 1&#39;, &#39;applyname&#39;: &#39;&#39;, &#39;applysn&#39;: &#39;&#39; } json_ids = requests.post(url=url, headers=headers,data=data).json() for i in json_ids[&#39;list&#39;]: id_list.append(i[&#39;ID&#39;]) # 存储所有企业详情数据 post_url = &quot;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&quot; for id in id_list: data = { &#39;id&#39;: id } detail_json = requests.post(url=post_url, headers=headers, data=data).json() all_data_list.append(detail_json) #持久化存储 fp = open(&#39;./alldata.json&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) json.dump(all_data_list, fp=fp, ensure_ascii=False) print(&#39;over&#39;) a = False . 总结：爬虫检查网页的传输方式，选择get请求还是post请求，注意是否为ajax请求，注意解析数据包的格式 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/29/%E7%88%AC%E8%99%AB09.html",
            "relUrl": "/markdown/2020/04/29/%E7%88%AC%E8%99%AB09.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post25": {
            "title": "爬虫流程及方法08(BeautifulSoup实例)(非ajax请求)",
            "content": "import requests from bs4 import BeautifulSoup a = True while a: headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#39; } params = { &#39;_v&#39;: &#39;5.12.0&#39; } fp = open(&#39;./萌新论坛爬虫.text&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) urls = &#39;http://www.lolichan.vip/&#39; response = requests.get(url=urls, params=params, headers=headers).text soup = BeautifulSoup(response, &#39;lxml&#39;) class_list= soup.select(&#39;.node-title&#39;) for li in class_list: try: detail_url = &#39;http://www.lolichan.vip/&#39; + li.a[&#39;href&#39;] detail_page_text = requests.get(url=detail_url, params=params, headers=headers).text detail_soup = BeautifulSoup(detail_page_text, &#39;lxml&#39;) page_list = detail_soup.select(&#39;.structItem-title&#39;) print(&#39;抓取页面成功&#39;) except: page_list = &#39;--&#39; for i in page_list: try: page_title = i.a.string page_url = &#39;http://www.lolichan.vip/&#39; + i.a[&#39;href&#39;] page_text = requests.get(url=page_url, headers=headers).text detail_soup = BeautifulSoup(page_text, &#39;lxml&#39;) div_tag = detail_soup.find(&#39;div&#39;, class_=&#39;bbWrapper&#39;) content = div_tag.text fp.write(page_title + &#39;:&#39; + content + &#39; n&#39;) print(&#39;爬取页面成功&#39;) except: continue a = False . ajax请求请参考爬虫流程及方法09(动态加载页面)(ajax请求)(Json实例) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/29/%E7%88%AC%E8%99%AB08.html",
            "relUrl": "/markdown/2020/04/29/%E7%88%AC%E8%99%AB08.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post26": {
            "title": "爬虫流程及方法07(爬虫技术路线整理)(实时更新)",
            "content": "技术路线 . 1.requests-BeautifulSoup 2.scrapy(5+2结构) 3.scrapy + requests-Beautiful-re + PhantomJS —&gt;表单提交、爬取周期、入库存储(js处理) 4.requests-xpath 5.requests-ccs 6.requests库可与urllib库互换 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/19/%E7%88%AC%E8%99%AB07.html",
            "relUrl": "/markdown/2020/04/19/%E7%88%AC%E8%99%AB07.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "爬虫流程及方法06(Scrapy进阶爬虫)(实时更新)",
            "content": "提高爬取速度的方法 . 1.在setting.py文件里修改并发选项 . . 2.使用scrapy-*的高级补充库，特化某方面，提升速度 . . 3.选择合适的技术路线进行爬虫 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/19/%E7%88%AC%E8%99%AB06.html",
            "relUrl": "/markdown/2020/04/19/%E7%88%AC%E8%99%AB06.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post28": {
            "title": "爬虫流程及方法05(Scrapy入门级爬虫)",
            "content": "Request类 . class scrapy.http.Request() . Request对象表示一个HTTP请求。 由Spider生成，由Downloader执行。 常用属性： . Response类 . class scrapy.http.Response() . Response对象表示一个HTTP响应。 由Downloader生成，由Spider处理。 常用属性与方法： . Item类 . class scrapy.item.Item() . Item对象表示一个从HTML页面中提取的信息内容。 由Spider生成，由Item Pipeline处理。 Item类似字典类型，可以按照字典类型操作。 . Scrapy爬虫支持多种HTML信息提取方法 . Beautiful Soup lxml re XPath Selector CSS Selector . CSS Selector的基本形式: . 步骤 . 步骤1:建立工程和Spider模板 步骤2:编写Spider(实际爬虫) 步骤3:编写ITEM Pipelines(爬虫数据处理) . 步骤3:编写Pipelines: . 配置pipelines.py文件 定义对爬取项(Scraped Item)的处理类 配置ITEM PIPELINES选项(配置setting.py文件) . PS：以下代码仅供参考，不具备运行基础 . #工程文档为以下内容 import scrapy import re class StocksSpider (scrapy . Spider) : name = &quot;stock s&quot; start_urls = [&#39;http://quote.eastmoney.com/stocklist.html&#39;] def parse(self, response): for href in response.css (&#39;a: :attr (href) &#39;).extract(): try: stock = re.findall(r&quot;[s][hz] d{6}&quot;, href)[0] url = &#39;https://gupiao.baidu.com/stock/&#39; + stock + &#39;.html&#39; yield scrapy.Request(url, callback=self.parse_stock) except: continue def parse_stock(self, response): infoDict = { } stockInfo = response.css(&#39;.stock-bets&#39;) name = stockInfo.css(&#39;.bets-name&#39;).extract()[0] keyList = stockInfo.css(&#39;dt&#39;).extract() valueList = stockInfo.css(&#39;dd&#39;).extract() for i in range(len(keyList)): key = re.findall(r&#39;&gt;.*&lt;/dt&gt;&#39;, keyList[i])[0][1:-5] try: val = re.findall(r&#39; d+ .?.*&lt;/dd&gt;&#39;, valueList[1])[0][0:-5] except: val = &#39;-&#39; infoDict[key] = val infoDict.update({&#39;股票名称&#39;: re.findall(&#39; s.* (&#39;, name)[0].split()[0] + re.findall(&#39; &gt;.* &lt;&#39;, name)[0][1:-1]}) yield infoDict . #pipeline文档下的内容 class BaidustocksPipeline(object): def process_item(self, item, spider): return item class BaidustocksInfoPipeline(object): def open_spider(self, spider): self.f = open(&#39;BaidustockInfo.txt&#39;, &#39;W&#39;) def close_spider(self, spider): self.f.close() def process_item(self, item, spider): try: line = str(dict(item)) + &#39; n&#39; self.f.write(line) except: pass return item . 总结： . 技术路线： requests-bs4-re scrapy(5+2结构) scrapy + requests-bs4-re + PhantomJS —&gt;表单提交、爬取周期、入库存储(js处理) .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/19/%E7%88%AC%E8%99%AB05.html",
            "relUrl": "/markdown/2020/04/19/%E7%88%AC%E8%99%AB05.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post29": {
            "title": "爬虫流程及方法04(Scrapy框架)",
            "content": "安装scrapy . pycharm安装步骤: 1.打开左上角file 2.打开Other Setting下的Setting for New Project 3.在Project Interpreter选择Project Interpreter里你使用的编译器后，点击加号(+)添加包 . . 4.修改Manage Repositories(参考第三方下载包修改篇) 5.在搜索框里搜索以下包名xxx(注意字母大小写不同) . Scrapy Twisted pywin32 wheel . . 6.在terminal窗口输入scrapy确认出现版本信息及命令提示 . . step1: . 建立工程文档 终端terminal输入： . scrapy startproject 工程文档名 . 创建得到的文档结构： . 工程文档名/ --&gt;外层目录 scrapy.cfg --&gt;部署scrapy爬虫的配置文件 工程文档名/ -&gt;scrapy框架的用户自定义的python代码 _init_.py --&gt;初始化脚本 items.py --&gt;items代码模块（继承类） middlewares.py --&gt;middlewares代码模块（继承类） pipelines.py &gt;pipelines代码模板（继承类） setting.py &gt;scrapy爬虫的配置文件 spiders/ &gt;代码模板目录(继承类) . step2: . 产生爬虫 终端terminal输入：(cmd内或pycharm里面的terminal) . cd 工程文档名 scrapy genspider demo 爬取页面的url . 或者： . 直接在含spider的目录下新建demo.py文件 写入以下代码 . import scrapy class DemoSpider(scrapy.Spider): name = &quot;demo&quot; allowed_domain = [&quot;python123.io&quot;]#爬取该域名下的链接 start_urls = [&#39;https://python123.io/&#39;]#爬取页面的初始页面 def parse(self, response):#解析页面方法类，形成字典类型或发现新链接 pass . step3: . 配置产生的spider爬虫(具体修改demo文件) eg： . def parse(self, response): fname = response.url.split(&#39;/&#39;)[-1] with open(fname, &#39;wb&#39;) as f: f.write(response.body) self.log(&#39;Saved file %s.&#39; % fname) . step4: . 终端terminal运行： 输入以下代码 . scrapy crawl 文件名 eg：scrapy crawl demo . ps:(爬虫的另一种框架) . import scrapy: class DemoSpider(scrapy.Spider): name = &quot;demo&quot; def start requests(se1f): urls = [ &#39;http://python123.io/ws/demo.html &#39; ] for url in urls: yield scrapy.Request(ur1=ur1,callback=self.parse) def parse(self,response): fname = response.url.split(&#39;/&#39;)[-1] with open (fname,&#39;wb&#39;) as f: f. write (response.body) self.log(&#39;Saved file %s.&#39; % fname) . yield关键字 . yield —-&gt;生成器 优势：占用存储少，响应速度快 生成器是一个不断产生值的函数，包含yield语句的函数是一个生成器 生成器每次产生一个值(yield语句)，函数被冻结，被唤醒后再产生一个值。 生成器写法 . def gen(n): for i in range(n): yield i**2 for 1 in gen(5): print(1,&quot; &quot;,end=&quot;&quot;) . 结果 . &gt;&gt;&gt;0 1 4 9 16 . 一般写法 . def square(n) : ls =[i**2 for i in range (n) ] return ls for i in square (5) : print(i,&quot; &quot;,end=&quot;&quot;) . 结果 . &gt;&gt;&gt;0 1 4 9 16 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/17/%E7%88%AC%E8%99%AB04.html",
            "relUrl": "/markdown/2020/04/17/%E7%88%AC%E8%99%AB04.html",
            "date": " • Apr 17, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "爬虫流程及方法03(搜索引擎爬取)",
            "content": "#!/usr/bin/env python3 #本篇介绍抓取含搜索引擎的爬虫 #UA检测：门户网站检测对应请求的身份标识 #UA：useragent（请求载体的身份标识） #UA伪装：伪装游览器 import requests a = True while a: # UA伪装：伪装游览器,将对应user-agent封装到字典headers中 headers = { &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#39; }#这里可以使用各种headers，包括ios或者安卓，模拟手机或平板登录 url = &quot;https://www.sogou.com/web?&quot; kw = input(&#39;key words:&#39;)#输入搜索所需要的关键词 # step1:处理url携带的参数：封装到字典中 param = { &#39;query&#39;: kw } res = requests.get(url=url, params=param, headers=headers)#几乎所有大型搜索引擎都是get请求，若属于某些私密的网址搜索可能需要post请求等加密传输方式 # 对指定url发起的请求对应的url是带参数的，请求过程中处理了参数 page_text = res.text #text处理数据 filename = kw + &#39;.html&#39;#命名文件 with open(filename,&#39;w&#39;,encoding=&#39;utf-8&#39;) as fp: #该语法自动创建文件并自动打开关闭文件，需要注意的是该文件在本爬虫文件所在文档内，需要更精确的存储位置推荐使用os库 fp.write(page_text)#输入数据 print(filename, &#39;保存成功&#39;) a = False .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/04/01/%E7%88%AC%E8%99%AB03.html",
            "relUrl": "/markdown/2020/04/01/%E7%88%AC%E8%99%AB03.html",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post31": {
            "title": "爬虫流程及方法02(Beautiful Soup解析页面)",
            "content": "#!/usr/bin/env python3 #对某论坛的爬取 import requests from bs4 import BeautifulSoup import time #需求：爬取网站标题及详情页的文本 a = True while a:#可转变成实时循环#对首页的页面数据进行爬取 url = &quot;https://www.lolichan.vip/&quot; headers = { &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36&#39; } page_text = requests.get(url=url, headers=headers).text#获取响应数据得加text，不然获取的是响应对象 #在首页中解析出章节标题和详情页URL #1.实例化BeautifulSoup对象，需要将页面源码加载到该对象中 soup = BeautifulSoup(page_text, &#39;lxml&#39;) #解析章节标题与详情页url div_list = soup.select(&#39;.node-body &gt; div &gt; h3 &gt; a&#39;)#使用select层级选择器 fp = open(&#39;./xiangqing.text&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;)#创建文档及设定只写w和编码utf-8 for div in div_list: time.sleep(填入休息时间)#防止频繁的请求链接失去响应 title = div.string#获得该标签下的所有文本 detail_url = &#39;https://www.lolichan.vip/&#39; + div[&#39;href&#39;]#获得详情页的url #对详情页发起请求，解析出章节内容 detail_page_text = requests.get(url=detail_url, headers=headers).text #解析出详情页中相关的章节内容 detail_soup = BeautifulSoup(detail_page_text,&#39;lxml&#39;) div_tag = detail_soup.select(&#39;.structItem-title &gt; a&#39;) #原来的class属性得用class_表示，不然会报错（class是保留字） content = []#设定空列表 for a in div_tag: content.append(a.text)#往空列表内装填 fp.write(title+&#39;:&#39;+str(content)+&#39; n&#39;)#str()使content对象变为字符串形式 print(title, &#39;爬取成功&#39;)#响应成功 a = False . #号符号是python注释的前置符号 . pycharm的热键： ctrl+z 键回撤你的对代码的改动 ctrl+/键注释与代码的转换 ctrl+c复制 ctrl+v粘贴 . #!/usr/bin/env python3 soup.tagName print(soup.meta)#第一组a标签 . soup.tagName返回的是html中第一次出现的tagName标签 . #!/usr/bin/env python3 soup.find print(soup.find(&#39;meta&#39;))=print(soup.meta) . 属性定位,定位一定class加空格再= #属性可以是class 或id 或attr . #!/usr/bin/env python3 print(soup.find(&#39;div&#39;, class = &#39;song&#39;)) . #!/usr/bin/env python3 soup.find_all(&#39;tagName&#39;) . 找到符合标准的所有标签,返回一个列表 . #!/usr/bin/env python3 print(soup.find_all(&#39;meta&#39;)) . #!/usr/bin/env python3 select(&#39;某种选择器&#39;). . 表示class类选择器 id选择器 标签选择器 返回的是一个列表 . #!/usr/bin/env python3 soup.select(&#39;xx &gt; xx xx&#39;) . 或 . #!/usr/bin/env python3 soup.select(&#39;xx &gt; xx &gt; xx&#39;) . #!/usr/bin/env python3 print(soup.select(&#39;.tang&#39;))#&lt;div class=&#39;tang&#39;&gt; . 部分html代码 . &lt;div class=&#39;tang&#39;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://....&quot; title=&quot;qingming&quot;&gt;mutongyao&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://....&quot; title=&quot;chunjie&quot;&gt;...&lt;/a&gt;&lt;/li&gt; &lt;ul&gt; . print(soup.select(&#39;.tang &gt; ul &gt; li &gt; a&#39;)) . 结果： . &lt;a href=&quot;http://....&quot; title=&quot;qingming&quot;&gt;...&lt;/a&gt;， &lt;a href=&quot;http://....&quot; title=&quot;chunjie&quot;&gt;...&lt;/a&gt; . 层级选择器：此时返回一个列表，此时’.class的内容 &gt; ul &gt; li &gt; a’中大于号&gt;表示一个层级 . #!/usr/bin/env python3 print(soup.select(&#39;.tang &gt; ul &gt; li &gt; a&#39;)[0]) #结果：&lt;a href=&quot;http://....&quot; title=&quot;qingming&quot;&gt;mutongyao&lt;/a&gt; #多个层级&#39;.tang &gt; ul a&#39; 这里空格表示多个层级，大于号&gt;表示一个层级 . #!/usr/bin/env python3 print(soup.select(&#39;.tang &gt; ul &gt; li &gt; a&#39;)[0])=print(soup.select(&#39;.tang &gt; ul a&#39;)[0]) . 获取标签之间的文本数据 . #!/usr/bin/env python3 soup.a.text/string/get_text() print(soup.select(&#39;. class的内容&gt; ul a&#39;)[0].text) . 结果： . mutongyao . #!/usr/bin/env python3 text/get_text() . get_text()可以获取一个标签中‘所有的’文本内容（即使不属于该标签直系文本内容） . string:只可以获得该标签下直系文本内容 . 获取标签中的属性值 . #!/usr/bin/env python3 print(soup.select(&#39;.class的内容 &gt; ul a&#39;)[0][&#39;href&#39;]) . 下行遍历（这里两个方法必须是循环中使用） . #!/usr/bin/env python3 for child in soup.body.children: print(child) . 遍历儿子节点 . #!/usr/bin/env python3 for child in soup.body.descendants: print(child) . 遍历子孙节点 . 上行遍历 . #!/usr/bin/env python3 for sibling in soup.a.next_siblings: print(sibling) . 遍历后续节点 . #!/usr/bin/env python3 for sibling in soup.a.previous_siblings: print(sibling) . 遍历前续节点 . soup.prettify() . 每个节点一个换行符 . &lt;&gt; .find_all(name, attrs, recursive, string, **kwargs） . 返回一个列表类型，存储查找的结果。 . name:对标签名称的检索字符串。 attrs:对标签属性值的检索字符串，可标注属性检索。 recursive:是否对子孙全部检索，默认True。 string: &lt;&gt;…&lt;/&gt;中字符串区域的检索字符串。 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/03/31/%E7%88%AC%E8%99%AB02.html",
            "relUrl": "/markdown/2020/03/31/%E7%88%AC%E8%99%AB02.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post32": {
            "title": "爬虫流程及方法01(入门准备及Request库使用)",
            "content": "爬虫究竟是合法还是违法的? . 在法律中是不被禁止 具有违法风险 . 请善意爬虫 . 切勿恶意爬虫 . 爬虫带来的风险可以体现在如下2方面: . 爬虫干扰了被访问网站的正常运营 爬虫抓取了受到法律保护的特定类型的数据或信息 . 如何在使用编写爬虫的过程中避免进入局子的厄运呢? . 时常的优化自己的程序，避免干扰被访问网站的正常运行 在使用传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户的商业机密等敏感内容需要及时停止爬取或传播 . 爬虫的矛与盾 . 反爬机制:门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。 反反爬策略:爬虫程序可以通过制定相关的策略或者技术手段，破解]户网站中具备的反爬机制，从而可以获取门户网 . robots. txt协议:? . 君子协议:规定了网站中哪些数据可以被爬虫爬取哪些数据不可以被爬取。 . 例如这个：https://www.bilibili.com/robots.txt . 正文： . ### . 软件：pycharm/thonny/自带IDLE,明白python的基本语法，缩进/字典/元组/列表/循环结构/函数运用/文件存储（绝对路径/相对路径） . step1.安装第三方模块：调出cmd窗口输入以下字符 . （每一行是一个包，等待下载完后再进行下一个包的下载） . python -m pip install --upgrade pip pip install requests pip install bs4 pip install lxml pip install urllib . step2.确认爬虫流程： . 1.指定url 2.请求前进行UA伪装（模拟游览器发出请求） 3.选择post还是get请求 4.请求发送 5.获取响应数据 6.进行存储 . step3.实际代码的编写： . import requests #每使用一个包的方法就得导入一个包 #（引入包后空两行，语法的正确书写习惯） a = True while a: #这里可以改成循环结构对网页进行实时爬取，每次爬取覆盖上次的成果 url = &quot;网址&quot; #指定所爬取页面的网址 headers = { &#39;user-agent&#39;:&#39;粘贴1处&#39; } #在页面中点击右键选择检查，调出网页自带的抓包工具，在network中刷新当前页面抓包找到user-agent的项复制粘贴1，找到Query String Parameters的项复制粘贴2（记得加符号’粘贴2‘） params = { &#39;某名字&#39;:&#39;某值&#39;, &#39;粘贴2&#39;:&#39;黏贴2&#39; } res = requests.get(url=url,params=params,headers=headers) #这里是对网页发起请求并内置参数 dict_object = res.text #对返回内容进行text处理并赋值给一个字典 with open(&quot;./lolichan.html&quot;,&quot;w&quot;,encoding=&#39;utf-8&#39;) as fp: #打开或生成一个文档并选定为写w的状态，转换字符的编码为utf-8 fp.write(dict_object)#往文档内存储爬取的网页源码 print(&#39;over&#39;) #存储成功提示 a = False . step4.实际运用： . 安装而未用到的包下次再讲，剩下的包用于数据的解析定位 如果想要看效果视频，参照B站视频av92683334 更多内容: 【官方文档】opencv-python中文文档 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/03/20/%E7%88%AC%E8%99%AB01.html",
            "relUrl": "/markdown/2020/03/20/%E7%88%AC%E8%99%AB01.html",
            "date": " • Mar 20, 2020"
        }
        
    
  
    
        ,"post33": {
            "title": "安装python第三方库的小技巧",
            "content": "直接放代码 . import os libs = { &quot;requests&quot;,&quot;jieba&quot;,&quot;beautifulsoup4&quot;, &quot;django&quot;,&quot;flask&quot;, &quot;此处填写你需要下载的库的名称，注意大小写并拼写正确，样式如上面例子&quot;,&quot;pandas&quot; } try: for lib in libs: os.system(&#39;pip install &#39;+lib) print(&quot;Successful&quot;) except: print(&#39;error&#39;) . os.system(command) . command 为要执行的命令，近似于Windows下cmd窗口中输入的命令。 .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/03/15/%E5%AE%89%E8%A3%85python%E5%BA%93%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7.html",
            "relUrl": "/markdown/2020/03/15/%E5%AE%89%E8%A3%85python%E5%BA%93%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7.html",
            "date": " • Mar 15, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "Markdown文档书写简单示例",
            "content": "markdown文档书写的简单示例 . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "本博客展示本人的Python学习笔记。 如果对文章还有疑问或者见解，建议点击—&gt;“这里”关注我，里面有我的最新动态。 [^1]:This website is powered by fastpages . [^2].a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Thanks for your reading, this is my study notes for Python, if you find something wrong in my essay, please leave a comment and I will see. . Posts .",
          "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Thanks for your reading, this is my study notes for Python, if you find something wrong in my essay, please leave a comment and I will see. . Posts .",
          "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "",
          "content": "Thanks for your reading, this is my study notes for Python, if you find something wrong in my essay, please leave a comment and I will see. . Posts .",
          "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/page3/",
          "relUrl": "/page3/",
          "date": ""
      }
      
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://spiritlhl.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}